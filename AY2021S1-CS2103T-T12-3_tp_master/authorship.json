[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "## Team Project by team T12-3: PlaNUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-3/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T12-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T12-3/tp)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![Ui](docs/images/SamplePlanus.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Are you still struggling with all your projects and modules? Do you want to have a sense of how much time you spent"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "on each of them? PlaNus is here to help! By providing a clear data visualisation of various aspects of your project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "life, such as time spent, productivity and so on, PlaNus helps you to maintain a better work-life balance and plan"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "better for choosing your future workloads!"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### Site Map"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[User Guide](docs/UserGuide.md)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[Developers Guide](docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[About Us](docs/AboutUs.md)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### Acknowledgement"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 1,
      "BobbyZhouZijian": 18,
      "-": 2,
      "MarcTzh": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "run {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    archiveName \u003d \u0027PlaNus.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 4,
      "-": 71,
      "dearvae": 1
    }
  },
  {
    "path": "config/checkstyle/suppressions.xml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE suppressions PUBLIC"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"-//Checkstyle//DTD SuppressionFilter Configuration 1.2//EN\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"https://checkstyle.org/dtds/suppressions_1_2.dtd\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csuppressions\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003csuppress checks\u003d\"JavadocType\" files\u003d\".*Test\\.java\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003csuppress checks\u003d\"MissingJavadocMethodCheck\" files\u003d\".*Test\\.java\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  \u003csuppress checks\u003d\"Regexp\" files\u003d\".*\\.md\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/suppressions\u003e"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "-": 10
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### Zhou Zijian"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cimg src\u003d\"images/bobbyzhouzijian.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[[homepage](http://www.zijianzhou.com/)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[[github](https://github.com/BobbyZhouZijian)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[[portfolio](team/bobbyzhouzijian.md)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Role: Tech Lead, Git Expert"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Responsibilities: Scheduling and Tracking"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "### Marcus Tan"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "\u003cimg src\u003d\"images/marctzh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "[[github](http://github.com/marctzh)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "[[portfolio](team/marctzh.md)]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* Responsibilities: UI and Testing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "### Gabriella Teh"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "\u003cimg src\u003d\"images/gabriellateh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[[github](http://github.com/GabriellaTeh)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[[portfolio](team/gabriellateh.md)]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* Responsibilities: Documentation, deliverables and deadlines"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "### Li Beining"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "\u003cimg src\u003d\"images/dearvae.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "[[github](http://github.com/dearvae)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "[[portfolio](team/dearvae.md)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Role: Developer, Figma Expert"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* Responsibilities: Integration"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "### Li Gangwei"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003cimg src\u003d\"images/nuovonatura.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "[[github](http://github.com/nuovonatura)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "[[portfolio](team/nuovonatura.md)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Role: Developer, JavaFX Expert"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* Responsibilities: UI and Code Quality"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 5,
      "BobbyZhouZijian": 11,
      "-": 31,
      "dearvae": 6,
      "MarcTzh": 6,
      "GabriellaTeh": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "For detailed instructions on how to set the application up, refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "This section describes the implementation of the design of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TaskListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "1. `Logic` uses the `PlanusParser` class to parse the user command."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a task)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* stores the PlaNus data."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* can save the PlaNus data in json format and read it back."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th task in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Step 3. The user executes `add n/David …` to add a new task. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Step 4. The user now decides that adding the task was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the task being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* NUS Student"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* has a lot of projects"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* wants to track productivity"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* wants to track workload"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dearvae"
        },
        "content": "**Value proposition**: Allows NUS students to manage their tasks and schedule faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| Priority | As a …                  | I want to …                                | So that I can…                      |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| -------- | ----------------------- | ------------------------------------------ | ----------------------------------- |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| `* * *`  | new user                | have a help command                        | easily access the user guide.       |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| `* * *`  | user                    | add new task to my list                    |                                     |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| `* * *`  | student                 | know when my tasks are due                 |                                     |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| `* * *`  | user                    | maintain a list of tasks I currently have  |                                     |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| `* * *`  | user with a lot of tasks| delete my task after it is not relevant   | be focused on the unfinished tasks. |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| `* * *`  | user                    | mark my task as done after it is completed | track the status of the task        |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| `* *  `  | user                    | find tasks by module                       |                                     |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| `* *  `  | user                    | find tasks by due date                     |                                     |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| `* * *`  | user                    | find tasks by title                        |                                     |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| `* *  `  | user                    | find tasks by tag                          |                                     |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| `* * *`  | user                    | edit my tasks                              |                                     |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "(For all use cases below, the **System** is `PlaNus` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Use case 01: Add a task**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. User requests to add a specific task to the list."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "2. PlaNus adds the task."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "- 1a. The given input is invalid."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  - 1a1. PlaNus shows an error message."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "- 1b. The task already exists."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  - 1b1. PlaNus shows an error message."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Use case 02: Add a lesson**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. User requests to add a lesson to the list."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "2. PlaNus adds the lessons as recurring tasks."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "- 1a. The given input is invalid."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  - 1a1. PlaNus shows an error message."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "- 1b. The lesson already exists in the list."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  - 1b1. PlaNus shows an error message."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**Use case 03: Add a deadline**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "1. User requests to add a deadline to the list."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "2. PlaNus adds the deadline to the list."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "- 1a. The given input is invalid."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    - 1a1. PlaNus shows an error message."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "- 1b. The deadline already exists in the list."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    - 1b1. PlaNus shows an error message."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**Use case 04: Add an event**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "1. User requests to add an event to the list."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "2. PlaNus adds the event to the list."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "- 1a. The given input is invalid."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    - 1a1. PlaNus shows an error message."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "- 1b. The event already exists in the list."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    - 1b1. PlaNus shows an error message."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**Use case 05: Delete a task**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. User requests to list tasks."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "2. PlaNus shows a list of tasks."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "3. User requests to delete a specific task from the list."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "4. PlaNus deletes the task."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "- 2a. The list is empty."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "- 3a. The given index is invalid."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  - 3a1. PlaNus shows an error message."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**Use case 06: List all tasks**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. User requests to list tasks."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "2. PlaNus shows a list of tasks."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  - 2a. The list is empty."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**Use case 07: Request help**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. User requests help."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "2. PlaNus shows available commands."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**Use case 08: Mark a task as done**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. User requests to list tasks."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "2. PlaNus shows a list of tasks."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "3. User requests to mark a specific tasks in the list as done."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "4. PlaNus marks the task as done."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "- 3a. The given index is invalid."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  - 3a1. PlaNus shows an error message."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**Use case 09: Find a task**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. User requests to find task with specified search phrase(s) in specified attribute(s)."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "2. PlaNus shows a list of tasks that match the specified search phrase(s) in the specified attribute(s)."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "- 1a. The search phrase is empty or consists of only white spaces."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  - 1a1. PlaNus shows an error message."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "- 1b. The search phrase is in invalid format or includes invalid characters."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    - 1b1. PlaNus shows an error message."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "- 2a. The list is empty."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**Use case 10: Edit a task**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. User requests to edit values of specified attribute(s) of a task."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "2. PlaNus shows task with updated attribute(s)."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "- 1a. The given index is invalid."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  - 1a1. PlaNus shows an error message."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "- 1b. The given value of an attribute is invalid."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  - 1b1. PlaNus shows an error message."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**Use case 11: Exit application**"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. User requests to exit application."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "2. PlaNus exits application."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "2. Should be able to hold up to 1000 tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using a mouse."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "4. The product should be easy to use by a novice with no experience of using a task management application."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "5. The size of built-in module data should not exceed 10mb."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "6. Documentation should be easy to read with proper highlighting."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "7. The source code should be open source."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* **Task**: A task is a collection of details about a specific task that needs to be done, including description, title, tag, date and time."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. _{ more test cases … }_"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "### Deleting a task"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. Deleting a task while all tasks are being shown"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "   1. Prerequisites: List all tasks using the `list` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "      Expected: No task is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. _{ more test cases … }_"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. _{ more test cases … }_"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| ---- | ---- |"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 5,
      "BobbyZhouZijian": 98,
      "-": 331,
      "dearvae": 9,
      "MarcTzh": 184
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "![PlanusLogo](images/PlanusLogo.png)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "User Guide v1.3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "This user guide provides [set-up](#set-up) instructions and a detailed description of all the [features](#features) available in the PlaNus application. You can also access this user guide on the application website with"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "this [link](https://ay2021s1-cs2103t-t12-3.github.io/tp/)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* [Set-up](#set-up)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * [1. General Features](#1-general-features)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "      * [1.1 Show all commands : `help`](#11-show-all-commands--help)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "      * [1.2 Clear the program : `clear`](#12-clear-the-program--clear)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "      * [1.3 Exit the program : `exit`](#13-exit-the-program--exit)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * [2. Create, Read, Update and Delete a Task](#2-create-read-update-and-delete-a-task)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * [2.1 List all tasks : `list-task`](#21-list-all-tasks--list-task)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * [2.2 Add a deadline: `deadline`](#22-add-a-deadline--deadline)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * [2.3 Add an event: `event`](#23-add-an-event--event)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * [2.4 Mark a deadline as done: `done`](#24-mark-a-deadline-as-done--done)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * [2.5 Edit a task : `edit-task`](#25-edit-a-task--edit-task)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * [2.6 Find a task : `find-task`](#26-find-a-task-by-an-attribute--find-task)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * [2.7 Delete a task : `delete-task`](#27-delete-a-task--delete-task)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * [3. Create, Read, Update and Delete a Lesson](#3-create-read-update-and-delete-a-lesson)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * [3.1. List all lessons: `list-lesson`](#31-list-all-lessons-list-lesson)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * [3.2. Add a lesson: `lesson`](#32-add-a-lesson--lesson)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * [3.3. Edit a lesson: `edit-lesson`](#33-edit-a-lesson--edit-lesson)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * [3.4. Find a lesson: `find-lesson`](#34-find-a-lesson--find-lesson)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * [3.5. Delete a lesson: `delete-lesson`](#35-delete-a-lesson--delete-lesson)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * [4. Calendar View](#4-calendar-view)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * [5. Data Analysis](#5-data-analysis)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* [Glossary](#glossary)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* [Input format summary](#input-format-summary)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* [Command summary](#command-summary)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "PlaNus is a **task managing desktop application** for students in NUS with many projects and deadlines, optimized for use via a Command Line Interface (CLI) with the benefits of Graphical User Interface (GUI). PlaNus reduces the time spent by students in task management as adding tasks and lessons is now simple and quick!"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Objectives of PlaNus:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "1. Provide students with a detailed breakdown of how much time they spend on their tasks and lessons in their respective modules."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "2. Allow students to have a calendar view of their schedule."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "3. Allocate tasks and lessons to their schedule automatically. (coming soon in v1.4)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## Set-up"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "1. Ensure you have Java 11 or above installed in your computer."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "2. Download the latest planus.jar from **[here](https://github.com/AY2021S1-CS2103T-T12-3/tp/releases/)**."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    ![setup](images/Setup.png)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for PlaNus."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "4. Double-click the file to start the app. Upon launching PlaNus, you should see the following user interface."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    ![sample PlaNus](images/SamplePlanus.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "5. Alternatively, in command prompt (for Windows) or terminal (in MacOS), go to the directory where planus.jar is stored and enter `java -jar planus.jar`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "6. You may try out some commands listed in the [command summary](#command-summary) to explore the app."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "This section is a comprehensive walkthrough of the features in PlaNus."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**:information_source: Notes about the command format**\u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Words highlighted are code snippets. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    - e.g. `title`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Words in **upper case** are the parameters (i.e. user input) to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  - e.g. in `event title:TITLE`, `TITLE` is a parameter which users can determine."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  - For example, users can type `title:homework 1` or `title:assignment`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Items in **square brackets** are optional fields that a user can provide to add more details to the command. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  - e.g. command `event title:Title [desc:DESCRIPTION]` means that the `desc` field is optional."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  - In the above case, users can either type `event title:homework 1` or `title:homework 1 desc:science project` if they want to store a description of the event."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Items with `...` after them can be keyed in multiple times.\u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  - e.g. `delete-task INDEX...` can be used as both `delete-task 1` or `delete-task 1 2 3`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  - e.g. commands `deadline title:TITLE desc:DESCRIPTION` and `deadline desc:DESCRIPTION title:TITLE` are the same."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## 1. General Features"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "This section shows features that deal with the general functionality of PlaNus application."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### 1.1 Show all commands : `help`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "Shows the user a link to the user guide."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "1. Type in `help` into the command box."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "2. A success message and a pop-up window with a link to the user guide will appear."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![help message](images/HelpMessage.png)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### 1.2 Clear the program : `clear`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Users can clear all the tasks in the PlaNus."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "1. Type in `clear` into the command box."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![clear message](images/ClearMessage.png)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "2. All the tasks and lessons in PlaNus will be cleared."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![clear success message](images/ClearSuccessMessage.png)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### 1.3 Exit the program : `exit`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Users can exit PlaNus."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "1. Type `exit` into the command box."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    ![exit message](images/ExitMessage.png)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "2. The application window will automatically close."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## 2. Create, Read, Update and Delete a Task"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "This section shows features that deal with operation of tasks including"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "creating, reading, updating and deleting a task. A task can be either a"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "`event` or `deadline`. \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### 2.1 List all tasks : `list-task`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Shows the user a list of all the tasks in PlaNus."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Format: `list-task`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dearvae"
        },
        "content": "1. Type in `list-task` into the command box."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dearvae"
        },
        "content": "2. A success message will appear and list of all task will be shown in the task panel."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dearvae"
        },
        "content": "![list tasks](images/ListTasks.png)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### 2.2 Add a deadline : `deadline`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Users can add a deadline to PlaNus."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "A deadline is a task that has a compulsory deadline date and time."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Format: `deadline title:TITLE [desc:DESCRIPTION] datetime:DATE_TIME [tag:MODULE_CODE]`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Adds a deadline to PlaNus,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * with the specified title in `title:TITLE`,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * with the specified description in `description:DESCRIPTION`,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * with a date and time in `datetime:DATE_TIME` of when this deadline should be completed before,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * with a tag in `tag:MODULE_CODE` indicating the module of which this deadline belongs to."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * the added deadline will be tracked for time analysis if it has a tag."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dearvae"
        },
        "content": "To add a deadline with title \"Return book\", and a date and time of \"02-01-2020 18:00\" to PlaNus,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dearvae"
        },
        "content": "users can do the following:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dearvae"
        },
        "content": "1) Type in the command box the following command:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* `deadline title:Return book datetime:02-01-2020 18:00`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dearvae"
        },
        "content": "![add deadline](./images/AddDeadlineCommand.png)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dearvae"
        },
        "content": "2) This adds the corresponding deadline to PlaNus. You can see the added deadline in the task list."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dearvae"
        },
        "content": "![add deadline_result](./images/AddDeadlineCommandResult.png)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### 2.3 Add an event : `event`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Users can add an event."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "An event is a task that has a start time, end time and a date."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "Format: `event title:TITLE date:DATE from:START_TIME to:END_TIME [desc:DESCRIPTION] [tag:MODULE_CODE]`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Adds an event to PlaNus,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * with the specified title in `title:TITLE`,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * with the specified description in `description:DESCRIPTION`,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * on the date specified in `date:DATE`, starting from the time specified in `from:START_TIME` to the time specified in `to:END_TIME`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * with a tag in `tag:MODULE_CODE` indicating the module of which this deadline belongs to."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * the added event will be tracked for time analysis if it has a tag."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dearvae"
        },
        "content": "To add an event with title \"Project meeting\", and a date \"29-10-2020\" with start time of \"09:00\" and end time of \"11:30\" and with tag \"CS2103T\" to PlaNus,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dearvae"
        },
        "content": "users can do the following:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dearvae"
        },
        "content": "1) Type in the command box the following command:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* `event title:Project meeting date:29-10-2020 from:09:00 to:12:30 tag:CS2103T`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dearvae"
        },
        "content": "![add event](./images/AddEventCommand.png)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dearvae"
        },
        "content": "2) This adds the corresponding event to PlaNus. You can see the added event in the task list and the calendar. The duration if the event will be recorded for time analysis."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dearvae"
        },
        "content": "![add event_result](./images/AddEventCommandResult.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### 2.4 Mark a deadline as done : `done`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Users can mark a specified deadline in PlaNus as done."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Format: `done INDEX:TIME_TAKEN...`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* marks the deadline(s) at the specified `INDEX` as done and records the time taken to complete the deadline."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* the index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* the time taken refers to the time in minutes that the user took to complete the specific deadline."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* the index and time taken **must be a positive integer** 1:20, 2:30, 3:120, ..."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**:information_source: Notes**\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* There are two type of tasks, event and deadline."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Only a deadline can be marked as done through this command, an error message will be shown if the user attempts to mark an event as done."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* After the user has marked a deadline as done, the user cannot edit the deadline or undo the done command anymore."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `list-task` followed by `done 2:30 3:60`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Marks the 2nd and the 3rd tasks in the results of the `list` command status to be done, and records that the user has spent 30 minutes to finish the 2nd task, and 60 minutes to finish the 3rd task."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `find-task title:homework` followed by `done 1:20`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Marks the 1st task in the results of the `find` command status to be done and record the time taken to complete the deadline as 20 minutes."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dearvae"
        },
        "content": "To mark the first deadline in the current task list as done and stating you have spend 50 minutes on it,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dearvae"
        },
        "content": "users can do the following:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dearvae"
        },
        "content": "1) Type in the command box the following command:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* `done 1:50`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dearvae"
        },
        "content": "![mark_as_done](./images/DoneCommand.png)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dearvae"
        },
        "content": "2) The status of the deadline has been set to complete. And the time taken to complete the task will be used for time analysis."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dearvae"
        },
        "content": "![mark_as_done_result](./images/DoneCommandResult.png)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### 2.5 Edit a task : `edit-task`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Users can edit a task by a set of attributes given below."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Format: `edit-task INDEX ATTRIBUTE_1:NEW_VALUE ATTRIBUTE_2:NEW_VALUE ...`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Edits the task(s) at the specified INDEX."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**:information_source: Notes**\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* If different fields are provided in the command, all the provided fields of the specified task will be updated."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* If a deadline has a status of **complete**, it cannot be edited."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Fields that the user can modify differ by the type of task(Event or Deadline) the user is trying to modify."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * Available attributes for both deadline and event in v1.3 include:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * `title:` edits the title of the specified task"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * `desc:` edits the description of the specified task"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * `tag:` edits the tag of the specified task"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * Available attributes for **deadline only** in v1.3 include:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "      * `datetime:` edits the date and time of the specified deadline"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * Available attributes for **event only** in v1.3 include:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "      * `date:` edits the date of the specified event"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "      * `from:` edits the start time of the specified event"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "      * `to:` edits the end time of the specified event"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "To edit the date and time of a task, users can do the following:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "1) Display all lessons by typing `list-task` in the command box, and find the index of the task you want to edit in the task list. The index is displayed in the top left corner of each task."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "![list task](images/ListTask.png)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "This displays all tasks in the task list."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "2) Type `edit-task` and the index of the task, followed by the new date and time you want to update the task with."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "For example, if we want to change the first task start time to be an hour earlier, we can type"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "`edit-task 1 from:18:00` in the command box."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "![edit task](./images/EditTask.png)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "This changes the start time of the first task to 18:00 which is one hour earlier than the original start time. You can view the task with the updated information in the task list."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "![edit task result](./images/EditTaskResult.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "Other examples:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `edit-task 1 title:play games` "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Edits the first task in the results of the `list` command, changing its title to `play games`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `find-task type:deadline` followed by `edit-task 3 desc:This is very urgent!` "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Edits the first deadline of the third deadline in the results of the `find` command, changing its description to \"This is very urgent!\"."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `find-task title:homework` followed by`edit-task 2 desc:Homework is difficult date:01-01-2020` "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Edits the second task in the results of the `find-task` command if the task is an event, changing its date to 01-01-2020 and its description to \"Homework is difficult\", otherwise, PlaNus will notify the user of the incompatible error."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `edit-task 1 tag:CS2103T` "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Edits the first task in the results of the `list-task` command, changing its tag to \"CS2103T\"."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### 2.6 Find a task by an attribute : `find-task`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Users can find a task by a set of attributes given below."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Format: `find-task ATTRIBUTE_1:SEARCH_PHRASE ATTRIBUTE_2:SEARCH_PHRASE ...`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**:information_source: Notes**\u003cbr\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* If the user provides different attributes in the command, tasks that match all attributes will be displayed."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* If the user provides multiple search phrases of the same attribute in the command, tasks that match any of the search phrases will be displayed."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Available attributes in v1.3 include:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `title:` finds all tasks which contain the search phrase in the given title"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `desc:` finds all tasks which contain the search phrase in the given description"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `date:` finds all tasks happening on or due the searched date"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `status:` finds all tasks with the given status"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `tag:` finds all tasks related with the given module tag (case-insensitive)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "To find all tasks with titles containing the phrase \"CS\" (case-insensitive), users can do the following:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "1) List all tasks by typing `list-task` in the command box:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "![list task](./images/ListTask.png)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "2) Type the following command in the command box: "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* `find-task title:CS` "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "![find task](./images/FindTask.png)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "This lists all tasks with a title including the phrase `CS`."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "![find task result](./images/FindTaskResult.png)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "Other examples:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `find-task title:play games` "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Lists all tasks with a title including the phrase `play games`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `find-task tag:CS2040` "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Lists all tasks with a tag containing `CS2040`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `find-task date:01-01-2020` ."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * List all tasks happening on or due `01-01-2020`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `find-task title:dinner title:lunch`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * List all tasks with the title including either `dinner` or `lunch`."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### 2.7 Delete a task : `delete-task`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Users can delete the specified task from PlaNus."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Format: `delete-task INDEX...`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Deletes the task(s) at the specified `INDEX`."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* The user can provide more than 1 index at the same time, eg. `delete-task 1 2 3`."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    *  However, if one of the index is invalid, the whole command will not be executed, and an error message will be shown."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "To delete the second task, users can do the following:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "1) Type `list-task` in the command box to display all tasks."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "![list task](./images/ListTask.png)"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "2) Type `delete-task 2` in the command box."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "![delete task](./images/DeleteTask.png)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": " "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "This deletes the 2nd task from PlaNus."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "![delete task result](./images/DeleteTaskResult.png)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "Other examples:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `list-task` followed by `delete-task 1 2` "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Deletes the 1st task followed by the 2nd task in the results of the `list-task` command."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `find-task title:homework` followed by `delete-task 1` "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Deletes the 1st task in the results of the `find-task` command."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## 3. Create, Read, Update and Delete a Lesson"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "This section shows features that a user can use to manage lessons. A lesson happens in a "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "recurring manner that have a start and end time and a start and end date."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### 3.1 List all lessons :`list-lesson`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Shows the user a list of all the lessons in PlaNus."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Format: `list-lesson`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "To show all lessons currently stored in PlaNus, users can do the following:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "1) Type in the command box the following command:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* `list-lesson`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "![List lesson](./images/ListLesson.png)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "This displays all lessons in the lesson list."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### 3.2 Add a lesson : `lesson`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Users can add a lesson to PlaNus."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Format: `lesson title:TITLE tag:MODULE_CODE [desc:DESCRIPTION] day:DAY from:TIME to:TIME start:DATE end:DATE`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Adds a lesson to PlaNus, "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * with the title specified in `title:TITLE`, "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * starting from the date specified in `start:DATE` to the date specified in `end:DATE`, on the days specified in `day:DAY` from the time specified in `from:TIME` to the time specified in `to:TIME`."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**:information_source: Notes**\u003cbr\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* The format of day in `day:DAY` must be as follows (case-insensitive):"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * Monday, Tuesday, ..., Sunday"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "To add a lesson named \"Week 9 Tutorial\" which is under module \"CS2101\", and happens on Monday from 12pm to 14pm, "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "from 10 Aug 2020 to 10 Nov 2020, users can do the following:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "1) Type in the command box the following command:"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `lesson title:Week 9 Tutorial tag:CS2101 desc:Most exciting lecture in NUS! day:Mon from:12:00 to:14:00 start:10-08-2020 end:10-11-2020`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![add lesson](./images/AddLessonCommand.png)"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "2) This adds the corresponding lesson to PlaNus. You can see the added lesson in the lesson list, calendar view and "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "time analysis."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![add lesson result](./images/AddLessonCommandResult.png)"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### 3.3 Edit a lesson : `edit-lesson`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Users can edit a lesson in PlaNus. When a lesson is edited, all the occurrences of the particular lesson will be updated."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Format: `edit-lesson INDEX [title:TITLE] [tag:MODULE_CODE] [desc:DESCRIPTION] [day:DAY] [from:TIME] [to:TIME] [start:DATE] [end:DATE]`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**:information_source: Notes**\u003cbr\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `INDEX` refers to the index of the lesson in the lesson list."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* The format of day in `day:DAY` must be as follows (case-insensitive):"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * Monday, Tuesday, ..., Sunday"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Edit a lesson in PlaNus"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * The values of the specified lesson will be changed to the new values specified in the `edit-lesson` command."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "To edit a lesson, users can do the following:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "1) Display all lessons by typing `list-lesson` in the command box."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![list lesson](images/ListLesson.png)"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "This will display all lessons."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "2) Choose the lesson you want to edit. Find its index which is displayed on the top-left corner."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "For example, if we want to change the first lesson to Wednesday, we can type"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "`edit-lesson 1 day:WED` in the command box."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![edit lesson](./images/EditLessonCommand.png)"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "This changes the day of the first lesson to every Wednesday. You can see the calendar view and "
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "time analysis also updated."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![edit lesson result](./images/EditLessonCommandResult.png)"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### 3.4 Find a lesson : `find-lesson`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Users can find a lesson by a set of attributes given below."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Format: `find-lesson ATTRIBUTE_1:SEARCH_PHRASE ATTRIBUTE_2:SEARCH_PHRASE ...`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**:information_source: Notes**\u003cbr\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* If the user provides different attributes in the command, lesson that match all attributes will be displayed."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* If the user provides multiple search phrases of the same attribute in the command, lessons that match any of the search phrases will be displayed."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Available attributes in v1.3 include:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `title:` finds all lessons which contain the search phrase in the given title"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `desc:` finds all lessons which contain the search phrase in the given description"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `date:` finds all lessons happening on the searched date"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `time:` finds all lessons happening at the searched time"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `datetime:` finds all lessons happening at the searched date and time"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `tag:` finds all lessons related to the given module tag (case-insensitive)"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "To find all lessons with titles containing the phrase \"tutorial\" (case insensitive), users can do"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "the following steps:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "1) List all lessons by typing `list-lesson` in the command box:"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![list lesson](./images/ListLesson.png)"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "2) type the following command in the command box: "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `find-lesson title:tutorial` "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![find lesson](./images/FindLessonCommand.png)"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "This lists all lessons with a title including the phrase `Tutorial`."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![find lesson result](./images/FindLessonCommandResult.png)"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Other examples include:"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `find-lesson tag:CS2040` "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Lists all lessons with a tag containing \u0027CS2040\u0027."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `find-lesson date:01-01-2020` ."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * List all lessons happening on 01-01-2020."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `find-task title:dinner title:lunch`."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * List all lessons with the title including either `dinner` or `lunch`."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `find-lesson datetime:01-01-2020 14:00` "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Lists all lessons happening on 01-01-2020 at 14:00."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### 3.5 Delete a Lesson : `delete-lesson`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Users can delete a specified set of lessons from PlaNus."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Format: `delete-lesson INDEX...`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**:information_source: Notes**\u003cbr\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `INDEX` refers to the index of the lesson in the lesson list."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `...` means that there can be multiple indexes supplied. If all indexes are valid,"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "all lessons of the specified indexes will be deleted. "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "To delete the first two lessons, users can following the steps:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "1) Type `list-lesson` in the command box to display all lessons."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![list lesson](./images/ListLesson.png)"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "2) Type `delete-lesson 1 2` in the command box."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![delete lesson](./images/DeleteLessonCommand.png)"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " "
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "This deletes the 1st and 2nd lesson from PlaNus."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![delete lesson result](./images/DeleteLessonCommandResult.png)"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Users can also delete lessons by first finding the lessons of interest, refer to [feature 3.4](#34-find-a-lesson--find-lesson)"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "for more information. Sample usage:"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `find-lesson title:Lab` followed by `delete-lesson 1` "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Deletes the 1st lesson in the results of the `find-lesson` command."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## 4. Calendar View"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "The calendar view is located in the area shown below."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "![calendar view](./images/CalendarView.png)"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Users can use the calendar view to see what tasks and lessons they have in the previous week, current week and next "
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "two weeks as shown below."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "![calendar view week](./images/CalendarViewWeek.png)"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Calendar view displays:"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Deadlines"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Events"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Lessons"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## 5. Data Analysis"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Users can use the pie chart and list of modules to visualise how much time is spent on each module. Each module is "
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "denoted by the `tag` on its task/lesson."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "![data analysis](./images/DataAnalysis.png)"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "How does it work:"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Each module has a **time spent on tasks** and **time spent on lessons**."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* When a `deadline` is marked as done, it contributes towards **time spent on tasks** for that module. "
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* When an `event` has occured, it contributes towards **time spent on tasks** for that module."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* When a `lesson` has occcured, it contributes towards **time spent on lesson** for that module."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "![data analysis example](./images/DataAnalysisExample.png)"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* The first lesson in the list:"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    * Title of \"CS2103T Lecture\""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    * Only occurred one time during the past week"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    * Has a duration of 4 hours from 12:00 to 16:00"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Therefore, the **time analysis for the week** will show that the **time spent on lessons** with the CS2103T `tag` as"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "240 minutes (4 hours)."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**:information_source: Notes**\u003cbr\u003e"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Version 1.3:"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Only time spent on each module in the **past week** is displayed."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* In the next iteration:"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * A breakdown of time spent on each module in the **past week** and of **all time** is displayed."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| Action     | Format, Examples                                             |"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| ---------- | ------------------------------------------------------------ |"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| **Help**   | `help`                                                       |"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **Clear all**   | `clear`                                                       |"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| **Exit**   | `exit`                                                       |"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **List task**   | `list-task` |"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **Add Event**  | `event title:TITLE [desc:DESCRIPTION] date:DATE from:TIME to:TIME tag:MODULE_CODE` \u003cbr\u003e e.g. `event title:CS2103T Group meeting date:23-10-2020 from:20:00 to:22:00 tag:CS2103T` |"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **Add Deadline**  | `deadline title:TITLE [desc:DESCRIPTION] [datetime:DATETIME] tag:MODULE_CODE` \u003cbr\u003e e.g. `deadline title:Assignment2 submission datetime:23-10-2020 18:00 tag:CS2103T` |"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **Delete task** | `delete-task INDEX...` \u003cbr\u003e e.g. `delete-task 3`, `delete-task 3, 4, 5`                       |"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **Done task**   | `done INDEX:TIME_TAKEN...`\u003cbr\u003e e.g. `done 1:20`, `done 1:20 2:60 3:120`    |"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **Find task**   | `find-task ATTRIBUTE_1:SEARCH_PHRASE ATTRIBUTE_2:SEARCH_PHRASE ...` \u003cbr\u003e e.g.`find-task title:dinner date:02-02-2020` |"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **Edit task**   | `edit-task INDEX [title:TITLE] [date:DATE] [desc:DESCRIPTION] [tag:MODULE_CODE] [datetime:DEADLINE (deadline only)] [date:EVENT_DATE (event only)] [start:START_TIME (event only)] [end:END_TIME (event only)]`\u003cbr\u003ee.g. `edit-task 1 date:02-02-2020 12:00 tag:CS2101` |"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **List lesson** | `list-lesson` |"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **Add Lesson** | `lesson title:TITLE tag:MODULE_CODE [desc:DESCRIPTION] day:DAY from:TIME to:TIME start:DATE end:DATE`\u003cbr\u003ee.g.`lesson title:CS2103T Lecture tag:CS2103T desc:Most exciting lecture in NUS! day:Mon from:12:00 to:14:00 start:01-01-2020 end:01-05-2020` |"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **Edit lesson**   | `edit-lesson INDEX [title:TITLE] [tag:MODULE_CODE] [desc:DESCRIPTION] [day:DAY] [from:TIME] [to:TIME] [start:DATE] [end:DATE]` \u003cbr\u003e `e.g.edit-lesson 1 start:10-10-2020`                                                       |"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **Find lesson**   | `find-lesson ATTRIBUTE_1:SEARCH_PHRASE ATTRIBUTE_2:SEARCH_PHRASE ...` \u003cbr\u003e e.g. `find-lesson title:Tutorial` |"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **Delete lesson**   | `delete-lesson INDEX...` \u003cbr\u003e e.g. `delete-lesson 1 2 3` |"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## Input format summary"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "All the keywords mentioned in the command should follow the format stated below:"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| keyword     | Format, Examples                                             |"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| ---------- | ------------------------------------------------------------ |"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| **date**   | `dd-MM-yyyy`  \u003cbr\u003e e.g. 23-10-2020                                                    |"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **time**   | `HH:mm`  \u003cbr\u003e e.g. 10:00                                                   |"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **datetime** | `dd-MM-yyyy HH:mm` \u003cbr\u003e e.g. 21-10-2020 10:00 "
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| **day**  |  `Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday` |"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| **from, to, time** | `HH:mm` \u003cbr\u003e e.g. 18:00      |"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 68,
      "BobbyZhouZijian": 414,
      "-": 103,
      "dearvae": 43,
      "MarcTzh": 44,
      "GabriellaTeh": 25
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(planus)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "MarcTzh": 1
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o-right-\u003e Person"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Person -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "Person *--\u003e Type"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 1,
      "-": 20
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "participant \":PlanusParser\" as PlanusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "LogicManager -\u003e PlanusParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "activate PlanusParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "PlanusParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "DeleteCommandParser --\u003e PlanusParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "PlanusParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "DeleteCommandParser --\u003e PlanusParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e PlanusParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "PlanusParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "deactivate PlanusParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "DeleteCommand -\u003e Model : deleteTask(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 11,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "c @startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Class PlanusParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "LogicManager --\u003e\"1\" PlanusParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "PlanusParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 4,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Interface ReadOnlyPlanus \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Class Planus"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Class ReadOnlyPlanus"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Package Task {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Class Task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Class Title"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Class DateTime"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "Class Type"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Class UniqueTaskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Planus .up.|\u003e ReadOnlyPlanus"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "ModelManager o--\u003e \"1\" Planus"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Planus *--\u003e \"1\" UniqueTaskList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "UniqueTaskList o--\u003e \"*\" Task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Task *--\u003e Title"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Task *--\u003e DateTime"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Task *--\u003e Description"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Task *--\u003e Type"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Task *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Title -[hidden]right-\u003e DateTime"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "DateTime -[hidden]right-\u003e Type"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Type -[hidden]right-\u003e Description"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "ModelManager --\u003e\"1\" Task : filtered list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 1,
      "BobbyZhouZijian": 23,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Interface PlanusStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Class JsonPlanusStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "StorageManager o--\u003e PlanusStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "JsonPlanusStorage .left.|\u003e PlanusStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "JsonPlanusStorage .down.\u003e JsonSerializablePlanusStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "JsonSerializablePlanusStorage .right.\u003e JsonSerializableTask"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "JsonSerializableTask .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 7,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Class TaskListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Class TaskCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Class LessonListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Class LessonCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "MainWindow *-down-\u003e TaskListPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "MainWindow *-down-\u003e LessonListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "TaskListPanel -down-\u003e TaskCard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "LessonListPanel -down-\u003e LessonCard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "TaskListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "TaskCard --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "LessonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "LessonCard --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "TaskCard ..\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "LessonCard ..\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "TaskListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "LessonListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 17,
      "-": 52
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "title: PlaNus"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T12-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T12-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**PlaNus is a desktop application for **managing tasks, optimized for use via a Command Line"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "type fast, PlaNus can get your tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* If you are interested in using PlaNus, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* If you are interested about developing PlaNus, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 9,
      "-": 13
    }
  },
  {
    "path": "docs/team/bobbyzhouzijian.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "title: Zhou Zijian\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## Project: PlaNus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "PlaNus is a desktop application for **managing tasks, optimized for use via a Command Line"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "type fast, PlaNus can get your tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* **Project management**: Update the README and website pages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * Update the README and website markdowns to be consistent with our project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * Managed releases `v1.1 - v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dbobbyzhouzijian\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Added documentation for the features `list` [\\#59](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/59)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Added hyperlinks to Table of Content [\\#74](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/74)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#56](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/56),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  [\\#61](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/61), [\\#64](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/64),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  [\\#65](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/65)"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 28
    }
  },
  {
    "path": "docs/team/dearvae.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "title: Li Beining\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "## Project: PlaNus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "PlaNus is a desktop application for **managing tasks, optimized for use via a Command Line"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "type fast, PlaNus can get your tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* **Project management**: Update the README and website pages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  * Update the README and website markdowns to be consistent with our project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  * Managed releases `v1.1 - v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003ddearvae\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* **Documentation**: (to be updated)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): (to be updated)"
      }
    ],
    "authorContributionMap": {
      "dearvae": 2,
      "GabriellaTeh": 21
    }
  },
  {
    "path": "docs/team/gabriellateh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "title: Gabriella Teh\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "## Project: PlaNus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "PlaNus is a desktop application for **managing tasks, optimized for use via a Command Line"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "type fast, PlaNus can get your tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* **Project management**: Update the README and website pages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  * Update the README and website markdowns to be consistent with our project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  * Managed releases `v1.1 - v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dgabriellateh\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other) (to be updated)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* User Guide:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    * Added documentation for the features `add` [\\#78](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/78)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    * Added documentation for the features `delete` [\\#65](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/65)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): (to be updated)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "GabriellaTeh": 26
    }
  },
  {
    "path": "docs/team/marctzh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "title: Marcus Tan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "## Project: PlaNus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "PlaNus is a desktop application for **managing tasks, optimized for use via a Command Line"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "type fast, PlaNus can get your tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* **Project management**: Update the README and website pages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  * Update the README and website markdowns to be consistent with our project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  * Managed releases `v1.1 - v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dmarctzh\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other) (to be updated)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* **Documentation**: (to be updated)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): (to be updated)"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "MarcTzh": 22
    }
  },
  {
    "path": "docs/team/nuovonatura.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "title: Li Gangwei\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "## Project: PlaNus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "PlaNus is a desktop application for **managing tasks, optimized for use via a Command Line"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "type fast, PlaNus can get your tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* **Project management**: Update the README and website pages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "  * Update the README and website markdowns to be consistent with our project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "  * Managed releases `v1.1 - v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dnuovonatura\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    * Added documentation for the features `done` [\\#62](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/62)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    * Formatted the user guide [\\#72](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/72)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): (to be updated)"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 26
    }
  },
  {
    "path": "docs/team/template.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## Project: PlaNus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "PlaNus is a desktop application for **managing tasks, optimized for use via a Command Line"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "type fast, PlaNus can get your tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 4,
      "-": 44
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.task.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "MarcTzh": 2
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "       Person taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "       Person editedTask \u003d createEditedPerson(taskToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "       if (!taskToEdit.isSamePerson(editedTask) \u0026\u0026 model.hasPerson(editedTask)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "       model.setPerson(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "       tasks.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "-": 244,
      "MarcTzh": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.storage.JsonPlanusStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.storage.PlanusStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PlaNus ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        PlanusStorage planusStorage \u003d new JsonPlanusStorage(userPrefs.gePlanusFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        storage \u003d new StorageManager(planusStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s PlaNus and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The data from the sample PlaNus will be used instead if {@code storage}\u0027s PlaNus is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * or an empty PlaNus will be used instead if errors occur when reading {@code storage}\u0027s PlaNus."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Optional\u003cReadOnlyPlanus\u003e planusOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ReadOnlyPlanus initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            planusOptional \u003d storage.readPlanus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            if (!planusOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample task list\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            initialData \u003d planusOptional.orElseGet(SampleDataUtil::getSamplePlanus);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty task list\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            initialData \u003d new Planus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty task list\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            initialData \u003d new Planus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty task list\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        logger.info(\"Starting PlaNus \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping PlaNus ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "-": 159,
      "MarcTzh": 13,
      "GabriellaTeh": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 850;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 805;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 2,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String LOG_FILE \u003d \"planus.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_INVALID_DISPLAYED_INDEX_INFER \u003d \"Perhaps you made a typo?\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_INVALID_DISPLAYED_INDEX \u003d \"The %1$s index provided does not exist in the \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"%1$s list. \" + MESSAGE_INVALID_DISPLAYED_INDEX_INFER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_INVALID_DISPLAYED_INDEXES \u003d \"One or more %1$s indexes do not exist in the \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"%1$s list. \" + MESSAGE_INVALID_DISPLAYED_INDEX_INFER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INDEX \u003d \"Please do not include duplicate indexes.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! %1$s\\n%2$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_EMPTY_SEARCH_PHRASE \u003d \"Search phrase cannot be empty!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            String.format(MESSAGE_INVALID_DISPLAYED_INDEX, \"task\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_INVALID_TASKS_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            String.format(MESSAGE_INVALID_DISPLAYED_INDEXES, \"task\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_INVALID_LESSON_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            String.format(MESSAGE_INVALID_DISPLAYED_INDEX, \"lesson\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_INVALID_LESSONS_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            String.format(MESSAGE_INVALID_DISPLAYED_INDEXES, \"lesson\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_LESSONS_LISTED_OVERVIEW \u003d \"%1$d lessons listed!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_INCORRECT_TASK_STATUS \u003d \"One or more targeted deadline is already completed.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + \"Please check your command carefully.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_INVALID_DONE_TASK_TYPE \u003d \"You can only mark a deadline as done.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + \"One or more task selected is not in deadline type\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_EDIT_TYPE \u003d \"You cannot edit system generated lesson event\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_INVALID_EDIT_TYPE \u003d \"You cannot edit this task with the given attributes\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_INVALID_DEADLINE_EDIT_STATUS \u003d \"You cannot edit a deadline after marked as done\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_START_BEFORE_END \u003d \"start time is cannot be before end time!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 21,
      "-": 10,
      "dearvae": 5,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Return true if the targetIndexes contains duplicate Index, else return false."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static boolean hasDuplicateIndex(Index[] targetIndexes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c targetIndexes.length; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            for (int j \u003d i + 1; j \u003c targetIndexes.length; j++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                if (targetIndexes[i].equals(targetIndexes[j])) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "dearvae": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DateUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String DATE_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            \"DateTime should be in the format of dd-MM-yyyy HH:mm.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"^(3[01]|[12][0-9]|0[1-9])-(1[0-2]|0[1-9])-[0-9]{4}$\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String DATETIME_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            \"^(3[01]|[12][0-9]|0[1-9])-(1[0-2]|0[1-9])-[0-9]{4} (2[0-3]|[01][0-9]):([0-5][0-9])$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"^(2[0-3]|[01][0-9]):([0-5][0-9])$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final DateTimeFormatter DATETIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String SEARCH_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            \"Search phrase for time should be in the format of HH:mm.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String SEARCH_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            \"Search phrase for date should be in the format of dd-MM-yyyy.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String DAY_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            \"Day should be in the format of MON, TUE, ..., SUN or MONDAY, TUESDAY, ..., SUNDAY\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final LocalDateTime DEFAULT_DATETIME \u003d LocalDateTime.parse(\"01-01-1000 00:00\", DATETIME_FORMATTER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String RANGE_CONSTRAINTS \u003d \"Start date should be before end date\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Returns true if a given string is a valid date number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param test the string value to be put to test."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @return true if the test string is valid and false otherwise"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return test.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Returns true if a given string is a valid date number."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param test the string value to be put to test."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @return true if the test string is valid and false otherwise"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return test.matches(DATETIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Returns true if a given string is a valid date number."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param test the string value to be put to test."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @return true if the test string is valid and false otherwise"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return test.matches(TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param input the string value for a date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @return a LocalDate object representing the specific date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static LocalDate toLocalDate(String input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        checkArgument(isValidDate(input), DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return LocalDate.parse(input, DateUtil.DATE_FORMATTER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 9,
      "dearvae": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     *   Ignores case"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     *       matchesWordIgnoreCase(\"ABc def\", \"abc\", true) \u003d\u003d true // a full match, ignore case"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     *       matchesWordIgnoreCase(\"ABc def\", \"ABadncbas\") \u003d\u003d false //not a match"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param word cannot be null, cannot be empty"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static boolean matchesWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return isMatched(sentence.toLowerCase(), preppedWord.toLowerCase());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private static boolean isMatched(String sentence, String keyword) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        int keywordLength \u003d keyword.length();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        int taskLength \u003d sentence.length();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // if keyword is longer or is empty, no match can be found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (keywordLength \u003e taskLength || keywordLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d taskLength - keywordLength; ++i) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            boolean matchFound \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            for (int j \u003d 0; j \u003c keywordLength; ++j) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                if (sentence.charAt(i + j) !\u003d keyword.charAt(j)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    matchFound \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (matchFound) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 29,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.StatisticsData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the Planus."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @see seedu.address.model.Model#getPlanus()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    ReadOnlyPlanus getPlanus();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of lessons */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    ObservableList\u003cLesson\u003e getFilteredLessonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of calendar tasks */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredCalendarList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of calendar tasks */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    StatisticsData getStatisticsData();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the user prefs\u0027 PlaNus file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Path getPlanusFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 7,
      "-": 42,
      "MarcTzh": 9,
      "GabriellaTeh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.parser.PlanusParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.StatisticsData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.storage.Statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final PlanusParser planusParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private StatisticsData statisticsData;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        planusParser \u003d new PlanusParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        statisticsData \u003d Statistics.generateStatistics(LocalDate.now().minusDays(6), LocalDate.now());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Command command \u003d planusParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            storage.savePlanus(model.getPlanus());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            statisticsData \u003d Statistics.generateStatistics(LocalDate.now().minusDays(6), LocalDate.now());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public ReadOnlyPlanus getPlanus() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return model.getPlanus();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        return model.getFilteredLessonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredCalendarList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        return model.getFilteredCalendarList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public StatisticsData getStatisticsData() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        return statisticsData;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Path getPlanusFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return model.getPlanusFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 15,
      "BobbyZhouZijian": 4,
      "-": 73,
      "MarcTzh": 9,
      "GabriellaTeh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Clears PlaNus."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"PlaNus has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model.setPlanus(new Planus());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "MarcTzh": 2,
      "GabriellaTeh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Adds a task to the PlaNus task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a deadline to PlaNus.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + PREFIX_DATE_TIME + \"DEADLINE_DATE_TIME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG] \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_TITLE + \"Do work \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            + PREFIX_DATE_TIME + \"01-01-2020 12:00 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Science experiment \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + PREFIX_TAG + \"PC1141 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deadline added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DEADLINE \u003d \"This deadline already exists in PlaNus.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final Deadline toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Creates an DeadlineCommand to add the specified {@code Deadline}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineCommand(Deadline deadline) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        toAdd \u003d deadline;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DEADLINE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                || (other instanceof DeadlineCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 toAdd.equals(((DeadlineCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 7,
      "-": 34,
      "dearvae": 16,
      "GabriellaTeh": 3,
      "MarcTzh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Deletes a lesson identified using it\u0027s displayed index from PlaNus."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class DeleteLessonCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-lesson\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \": Deletes the lesson identified by the index number used in the displayed lesson list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_DELETE_LESSON_SUCCESS \u003d \"Deleted Lesson: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final Index[] targetIndexes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Creates an DeleteLessonCommand to to delete the lessons with {@code targetIndexes} from system."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public DeleteLessonCommand(Index[] targetIndexes) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(targetIndexes);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.targetIndexes \u003d targetIndexes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        List\u003cLesson\u003e lastShownList \u003d model.getFilteredLessonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Lesson[] lessonsToDelete \u003d new Lesson[targetIndexes.length];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (Index.hasDuplicateIndex(targetIndexes)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (int i \u003d 0; i \u003c targetIndexes.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (targetIndexes[i].getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_LESSONS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            lessonsToDelete[i] \u003d lastShownList.get(targetIndexes[i].getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        model.deleteLesson(lessonsToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new CommandResult(buildMessage(lessonsToDelete));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param lessons that is been deleted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * returns message built by the list of lessons deleted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static String buildMessage(Lesson[] lessons) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        StringBuilder message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            message.append(String.format(MESSAGE_DELETE_LESSON_SUCCESS, lesson.getTitle())).append(\"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                || (other instanceof DeleteLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                \u0026\u0026 Arrays.equals(targetIndexes, ((DeleteLessonCommand) other).targetIndexes)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from PlaNus."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-task\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final Index[] targetIndexes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Creates an DeleteTaskCommand to to delete the tasks with {@code targetIndexes} from system."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public DeleteTaskCommand(Index[] targetIndexes) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(targetIndexes);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.targetIndexes \u003d targetIndexes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task[] tasksToDelete \u003d new Task[targetIndexes.length];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (Index.hasDuplicateIndex(targetIndexes)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c targetIndexes.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (targetIndexes[i].getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            tasksToDelete[i] \u003d lastShownList.get(targetIndexes[i].getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        model.deleteTask(tasksToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        for (Task task : tasksToDelete) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            if (model.hasCalendarTask(task)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                model.deleteTaskInCalendar(new Task[]{task});"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new CommandResult(buildMessage(tasksToDelete));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param tasks that is been deleted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * returns message built by the list of tasks deleted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static String buildMessage(Task[] tasks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            message +\u003d String.format(MESSAGE_DELETE_TASK_SUCCESS, tasks[i].getTitle()) + \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                \u0026\u0026 Arrays.equals(targetIndexes, ((DeleteTaskCommand) other).targetIndexes)); // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 5,
      "BobbyZhouZijian": 7,
      "-": 36,
      "dearvae": 27,
      "MarcTzh": 4,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the PlaNus."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + \": mark the task identified by the index number used in the displayed task list as done.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + \"Parameters: INDEX:TIME_TAKEN (one or more positive integers that is separated by a white space)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1:20 2:10 3:120\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"Task: %1$s is marked as complete.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final Index[] targetIndexes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final int[] durations;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Creates an DoneCommand to mark tasks with {@code targetIndexes} as done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DoneCommand(Index[] targetIndexes, int[] durations) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(targetIndexes);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.targetIndexes \u003d targetIndexes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.durations \u003d durations;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Deadline[] deadlinesToMarkAsDone \u003d new Deadline[targetIndexes.length];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (Index.hasDuplicateIndex(targetIndexes)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c targetIndexes.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (targetIndexes[i].getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            Task task \u003d lastShownList.get(targetIndexes[i].getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_DONE_TASK_TYPE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            deadlinesToMarkAsDone[i] \u003d (Deadline) task;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (!allHaveIncompleteStatus(deadlinesToMarkAsDone)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INCORRECT_TASK_STATUS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        model.markAsDone(deadlinesToMarkAsDone, durations);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new CommandResult(buildMessage(deadlinesToMarkAsDone));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param tasks that is been marked as done"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * returns message built by the list of tasks done."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static String buildMessage(Task[] tasks) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            message +\u003d String.format(MESSAGE_DONE_TASK_SUCCESS, tasks[i].getTitle()) + \"\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                || (other instanceof DoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 Arrays.equals(targetIndexes, ((DoneCommand) other).targetIndexes)); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private boolean allHaveIncompleteStatus(Deadline[] deadlinesToMarkAsDone) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c deadlinesToMarkAsDone.length; i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (deadlinesToMarkAsDone[i].isDone()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "dearvae": 91,
      "MarcTzh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CALENDAR_TASKS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LESSONS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Edits the details of an existing lesson in PlaNus lesson list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class EditLessonCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-lesson\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the lesson identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"by the index number used in the displayed lesson list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"[\" + PREFIX_DAY + \"DAY] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"[\" + PREFIX_START_TIME + \"TIME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"[\" + PREFIX_END_TIME + \"TIME] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"DATE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"DATE] \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + PREFIX_TITLE + \"CS2103T Lecture \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Most exciting lecture in NUS! \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + PREFIX_DAY + \"Mon \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + PREFIX_START_TIME + \"12:00 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + PREFIX_END_TIME + \"14:00 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + PREFIX_START_DATE + \"01-01-2020 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + PREFIX_END_DATE + \"01-05-2020 \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_EDIT_LESSON_SUCCESS \u003d \"Edited Lesson: %1$s\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"This lesson already exists in PlaNus.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final EditLessonDescriptor editLessonDescriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param index of the lesson in the filtered lesson list to edit"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param editLessonDescriptor details to edit the lesson with"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public EditLessonCommand(Index index, EditLessonDescriptor editLessonDescriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(editLessonDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.editLessonDescriptor \u003d new EditLessonDescriptor(editLessonDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        List\u003cLesson\u003e lastShownList \u003d model.getFilteredLessonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Lesson lessonToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Lesson editedLesson \u003d createEditedLesson(lessonToEdit, editLessonDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!lessonToEdit.isSameLesson(editedLesson) \u0026\u0026 model.hasLesson(editedLesson)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        ArrayList\u003cTask\u003e associatedTasks \u003d lessonToEdit.getAssociatedTasks();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        model.deleteTask(associatedTasks.toArray(new Task[0]));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        model.deleteTaskInCalendar(associatedTasks.toArray(new Task[0]));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        ArrayList\u003cTask\u003e tasksToAdd \u003d editedLesson.createRecurringTasks();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (Task taskToAdd: tasksToAdd) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (model.hasTask(taskToAdd)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            model.addTask(taskToAdd);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            model.addTaskToCalendar(taskToAdd);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        model.setLesson(lessonToEdit, editedLesson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        model.updateFilteredLessonList(PREDICATE_SHOW_ALL_LESSONS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        model.updateFilteredCalendar(PREDICATE_SHOW_ALL_CALENDAR_TASKS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_LESSON_SUCCESS, editedLesson));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Creates and returns a {@code Lesson} with the details of {@code lessonToEdit}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * edited with {@code editLessonDescriptor}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private static Lesson createEditedLesson(Lesson lessonToEdit, EditLessonDescriptor editLessonDescriptor) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assert lessonToEdit !\u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Title updatedTitle \u003d editLessonDescriptor.getTitle().orElse(lessonToEdit.getTitle());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Description updatedDescription \u003d editLessonDescriptor.getDescription().orElse(lessonToEdit.getDescription());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DayOfWeek updatedDayOfWeek \u003d editLessonDescriptor.getDayOfWeek().orElse(lessonToEdit.getDayOfWeek());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalDate updatedStartDate \u003d editLessonDescriptor.getStartDate().orElse(lessonToEdit.getStartDate());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalDate updatedEndDate \u003d editLessonDescriptor.getEndDate().orElse(lessonToEdit.getEndDate());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalTime updatedStartTime \u003d editLessonDescriptor.getStartTime().orElse(lessonToEdit.getStartTime());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalTime updatedEndTime \u003d editLessonDescriptor.getEndTime().orElse(lessonToEdit.getEndTime());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Tag updatedTag \u003d editLessonDescriptor.getTag().orElse(lessonToEdit.getTag());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new Lesson(updatedTitle, updatedTag, updatedDescription, updatedDayOfWeek,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                updatedStartTime, updatedEndTime, updatedStartDate, updatedEndDate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!(other instanceof EditLessonCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        EditLessonCommand e \u003d (EditLessonCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                \u0026\u0026 editLessonDescriptor.equals(e.editLessonDescriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Stores the details to edit the lesson with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * corresponding field value of the lesson."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static class EditLessonDescriptor {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        private DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        private LocalDate startDate;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        private LocalDate endDate;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        private LocalTime startTime;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        private LocalTime endTime;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        private Tag tag;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public EditLessonDescriptor() {}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public EditLessonDescriptor(EditLessonDescriptor toCopy) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            setDayOfWeek(toCopy.dayOfWeek);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            setStartTime(toCopy.startTime);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            setEndTime(toCopy.endTime);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            setTag(toCopy.tag);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "         */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, description, dayOfWeek,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    startDate, endDate, startTime, endTime, tag);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public void setDayOfWeek(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public Optional\u003cDayOfWeek\u003e getDayOfWeek() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Optional.ofNullable(dayOfWeek);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public void setStartDate(LocalDate startDate) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public Optional\u003cLocalDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public void setEndDate(LocalDate endDate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public Optional\u003cLocalDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public void setStartTime(LocalTime startTime) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public Optional\u003cLocalTime\u003e getStartTime() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public void setEndTime(LocalTime endTime) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public Optional\u003cLocalTime\u003e getEndTime() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Optional.ofNullable(endTime);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public void setTag(Tag tag) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public Optional\u003cTag\u003e getTag() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Optional.ofNullable(tag);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (!(other instanceof EditLessonDescriptor)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            EditLessonDescriptor e \u003d (EditLessonDescriptor) other;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    \u0026\u0026 getDayOfWeek().equals(e.getDayOfWeek())"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    \u0026\u0026 getStartTime().equals(e.getStartTime())"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    \u0026\u0026 getEndTime().equals(e.getEndTime())"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate())"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    \u0026\u0026 getTag().equals(e.getTag());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 2,
      "BobbyZhouZijian": 280,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CALENDAR_TASKS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.deadline.DeadlineDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.event.EndDateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.event.StartDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Edits the details of an existing task in PlaNus task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class EditTaskCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-task\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event/deadline identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            + \"[\" + PREFIX_DATE_TIME + \"DATE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"[\" + PREFIX_DATE_TIME + \"DATE TIME (for deadline only)] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"EVENT DATE (for event only)] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"[\" + PREFIX_START_TIME + \"EVENT START TIME (for event only)] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"[\" + PREFIX_END_TIME + \"EVENT END TIME (for event only)] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            + PREFIX_DATE_TIME + \"02-02-2020 12:00 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + PREFIX_DESCRIPTION + \"something new\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in PlaNus.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public EditTaskCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        checkEditability(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (model.hasCalendarTask(taskToEdit)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            model.setCalendarTasks(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        model.updateFilteredCalendar(PREDICATE_SHOW_ALL_CALENDAR_TASKS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private void checkEditability(Task task, EditTaskDescriptor editTaskDescriptor) throws CommandException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if ((task instanceof Event)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (task.isLesson()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_EVENT_EDIT_TYPE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (editTaskDescriptor.hasDeadlineAttributes()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_EDIT_TYPE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (((Deadline) task).isDone()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_DEADLINE_EDIT_STATUS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (editTaskDescriptor.hasEventAttributes()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_EDIT_TYPE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                                         EditTaskDescriptor editTaskDescriptor) throws CommandException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Title updatedTitle \u003d editTaskDescriptor.getTitle().orElse(taskToEdit.getTitle());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Tag updatedTag \u003d editTaskDescriptor.getTag().orElse(taskToEdit.getTag());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (taskToEdit instanceof Deadline) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            Deadline deadlineToEdit \u003d (Deadline) taskToEdit;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            DeadlineDateTime updatedDeadlineDateTime \u003d editTaskDescriptor.getDeadlineDateTime().orElse("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    deadlineToEdit.getDeadlineDateTime());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Deadline.createDeadline(updatedTitle, updatedDeadlineDateTime,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    updatedDescription, updatedTag);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            Event eventToEdit \u003d (Event) taskToEdit;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            StartDateTime updatedStartDateTime \u003d eventToEdit.getStartDateTime();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            EndDateTime updatedEndDateTime \u003d eventToEdit.getEndDateTime();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (editTaskDescriptor.getEventDate().isPresent()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                LocalDate updatedEventDate \u003d editTaskDescriptor.getEventDate().get();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                updatedStartDateTime \u003d updatedStartDateTime.editStartDate(updatedEventDate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                updatedEndDateTime \u003d updatedEndDateTime.editEndDate(updatedEventDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (editTaskDescriptor.getStartTime().isPresent()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                LocalTime updatedEventStartTime \u003d editTaskDescriptor.getStartTime().get();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                updatedStartDateTime \u003d updatedStartDateTime.editStartTime(updatedEventStartTime);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (editTaskDescriptor.getEndTime().isPresent()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                LocalTime updatedEventEndTime \u003d editTaskDescriptor.getEndTime().get();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                updatedEndDateTime \u003d updatedEndDateTime.editEndTime(updatedEventEndTime);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (!updatedStartDateTime.isBeforeEndDateTime(updatedEndDateTime)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_START_BEFORE_END);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Event.createUserEvent(updatedTitle, updatedStartDateTime, updatedEndDateTime,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    updatedDescription, updatedTag);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!(other instanceof EditTaskCommand)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        EditTaskCommand e \u003d (EditTaskCommand) other;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Stores the details to edit the deadline with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        private LocalDate eventDate;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        private LocalTime startTime;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        private LocalTime endTime;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        private DeadlineDateTime deadlineDateTime;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        private Tag tag;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            setEventDate(toCopy.eventDate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            setDeadlineDateTime(toCopy.deadlineDateTime);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            setStartTime(toCopy.startTime);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            setEndTime(toCopy.endTime);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            setTag(toCopy.tag);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, description, eventDate,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    deadlineDateTime, startTime, endTime, tag);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public boolean hasEventAttributes() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return !(eventDate \u003d\u003d null \u0026\u0026 startTime \u003d\u003d null \u0026\u0026 endTime \u003d\u003d null);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public boolean hasDeadlineAttributes() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return deadlineDateTime !\u003d null;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public void setDeadlineDateTime(DeadlineDateTime deadlineDateTime) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            this.deadlineDateTime \u003d deadlineDateTime;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public Optional\u003cDeadlineDateTime\u003e getDeadlineDateTime() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Optional.ofNullable(deadlineDateTime);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public void setEventDate(LocalDate eventDate) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public Optional\u003cLocalDate\u003e getEventDate() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Optional.ofNullable(eventDate);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public void setStartTime(LocalTime startTime) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public Optional\u003cLocalTime\u003e getStartTime() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public void setEndTime(LocalTime endTime) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public Optional\u003cLocalTime\u003e getEndTime() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Optional.ofNullable(endTime);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public void setTag(Tag tag) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public Optional\u003cTag\u003e getTag() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return (tag !\u003d null) ? Optional.of(tag) : Optional.empty();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                    \u0026\u0026 getTag().equals(e.getTag());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 3,
      "BobbyZhouZijian": 116,
      "-": 118,
      "dearvae": 23,
      "GabriellaTeh": 9,
      "MarcTzh": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Adds a task to the PlaNus task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a event to PlaNus.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + PREFIX_DATE + \"EVENT DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + PREFIX_START_TIME + \"START TIME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + PREFIX_END_TIME + \"END TIME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + PREFIX_TITLE + \"career talk \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + PREFIX_DATE + \"01-01-2020 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + PREFIX_START_TIME + \"17:00 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + PREFIX_END_TIME + \"19:00 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + PREFIX_DESCRIPTION + \"bytedance online sharing session \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in PlaNus.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public EventCommand(Event event) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        model.addTaskToCalendar(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                || (other instanceof EventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 toAdd.equals(((EventCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 65,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting PlaNus as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.lesson.LessonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class FindLessonCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-lesson\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all lessons with the specified attribute\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"containing the specified valid search phrase (case-insensitive)\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"Parameters: ATTRIBUTE_1:SEARCH_PHRASE ATTRIBUTE_2:SEARCH_PHRASE ...\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"For list of all available attribute, please refer to the user guide by typing \u0027help\u0027 command\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" title:meet zijian day:Mon\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final LessonContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public FindLessonCommand(LessonContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        model.updateFilteredLessonList(predicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                String.format(Messages.MESSAGE_LESSONS_LISTED_OVERVIEW, model.getFilteredLessonList().size()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                || (other instanceof FindLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindLessonCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Finds and lists all tasks in PlaNus whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class FindTaskCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-task\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks with the specified attribute\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"containing the specified valid search phrase (case-insensitive)\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"Parameters: ATTRIBUTE_1:SEARCH_PHRASE ATTRIBUTE_2:SEARCH_PHRASE ...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"For list of all available attribute, please refer to the user guide by typing \u0027help\u0027 command\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" title:meet zijian desc:play games\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final TaskContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public FindTaskCommand(TaskContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        model.updateFilteredCalendar(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                || (other instanceof FindTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindTaskCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 13,
      "-": 28,
      "GabriellaTeh": 2,
      "MarcTzh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class LessonCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lesson\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a lesson to PlaNus.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_TAG + \"TAG \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_DAY + \"DAY \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_START_TIME + \"TIME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_END_TIME + \"TIME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_START_DATE + \"DATE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_END_DATE + \"DATE \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_TITLE + \"CS2103T Lecture \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_TAG + \"CS2103T \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Most exciting lecture in NUS! \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_DAY + \"Monday \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_START_TIME + \"12:00 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_END_TIME + \"14:00 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_START_DATE + \"01-05-2020 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_END_DATE + \"01-11-2020 \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New lesson added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"This lesson already exists in PlaNus.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final Lesson lesson;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Creates an LessonCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public LessonCommand(Lesson lesson) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ArrayList\u003cTask\u003e tasksToAdd \u003d lesson.createRecurringTasks();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        for (Task taskToAdd: tasksToAdd) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            if (model.hasTask(taskToAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            model.addTask(taskToAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            model.addTaskToCalendar(taskToAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        model.addLesson(lesson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, lesson));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                || (other instanceof LessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 lesson.equals(((LessonCommand) other).lesson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 2,
      "MarcTzh": 76,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LESSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Lists all lessons in PlaNus lesson list to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class ListLessonCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-lesson\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all lessons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        model.updateFilteredLessonList(PREDICATE_SHOW_ALL_LESSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CALENDAR_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Lists all tasks in PlaNus task list to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class ListTaskCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-task\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        model.updateFilteredCalendar(PREDICATE_SHOW_ALL_CALENDAR_TASKS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 2,
      "-": 18,
      "GabriellaTeh": 3,
      "MarcTzh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"title:\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final Prefix PREFIX_DATE_TIME \u003d new Prefix(\"datetime:\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"desc:\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"status:\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Prefix PREFIX_DAY \u003d new Prefix(\"day:\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"date:\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"from:\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"to:\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"time:\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"start:\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"end:\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tag:\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 3,
      "-": 10,
      "dearvae": 2,
      "MarcTzh": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeadlineCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.logic.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.DeadlineDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DeadlineCommandParser implements Parser\u003cDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DATE_TIME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!Parser.arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DATE_TIME)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"\", DeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Description description \u003d Description.defaultDescription();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Tag tag \u003d Tag.defaultTag();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DeadlineDateTime deadlineDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATE_TIME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Deadline deadline \u003d Deadline.createDeadline(title, deadlineDateTime, description, tag);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new DeadlineCommand(deadline);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 8,
      "-": 20,
      "dearvae": 23,
      "MarcTzh": 3,
      "GabriellaTeh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteLessonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.DeleteLessonCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Parses input arguments and creates a new DeleteLessonCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class DeleteLessonCommandParser implements Parser\u003cDeleteLessonCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteLessonCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * and returns a DeleteLessonCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public DeleteLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            Index[] indexes \u003d ParserUtil.parseVarargsIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return new DeleteLessonCommand(indexes);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, pe.getMessage(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                            DeleteLessonCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * and returns a DeleteTaskCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            Index[] indexes \u003d ParserUtil.parseVarargsIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return new DeleteTaskCommand(indexes);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, pe.getMessage(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                            DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 9,
      "-": 20,
      "dearvae": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * and returns a DeleteTaskCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            String[] splited \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            Index[] indexes \u003d new Index[splited.length];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            int[] durations \u003d new int[splited.length];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            for (int i \u003d 0; i \u003c splited.length; i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                String[] pair \u003d splited[i].trim().split(\":\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                if (pair.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                            String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"\", DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                indexes[i] \u003d ParserUtil.parseIndex(pair[0]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                durations[i] \u003d Integer.parseInt((pair[1]));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return new DoneCommand(indexes, durations);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, pe.getMessage(), DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 5,
      "dearvae": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditLessonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.EditLessonCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.EditLessonCommand.EditLessonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Parses input arguments and creates a new EditLessonCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class EditLessonCommandParser implements Parser\u003cEditLessonCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTaskCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * and returns an EditTaskCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public EditLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_DAY,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                        PREFIX_START_DATE, PREFIX_END_DATE, PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, e.getMessage(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    EditLessonCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        EditLessonDescriptor editLessonDescriptor \u003d new EditLessonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            editLessonDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            editLessonDescriptor.setDescription(ParserUtil"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                            .get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DAY).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            editLessonDescriptor.setDayOfWeek(ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_TIME).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            editLessonDescriptor.setStartTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_TIME).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            editLessonDescriptor.setEndTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            editLessonDescriptor.setStartDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            editLessonDescriptor.setEndDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            editLessonDescriptor.setTag(ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!editLessonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(EditLessonCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new EditLessonCommand(index, editLessonDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Parses input arguments and creates a new EditTaskCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class EditTaskCommandParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTaskCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * and returns an EditTaskCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public EditTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_DATE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                        PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_DATE_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, pe.getMessage(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    EditTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            editTaskDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            editTaskDescriptor.setDescription(ParserUtil"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            editTaskDescriptor.setTag(ParserUtil"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .parseTag(argMultimap.getValue(PREFIX_TAG)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                            .get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            editTaskDescriptor.setEventDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_TIME).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            editTaskDescriptor.setStartTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_TIME).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            editTaskDescriptor.setEndTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_TIME).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            editTaskDescriptor.setDeadlineDateTime(ParserUtil"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .parseDateTime(argMultimap.getValue(PREFIX_DATE_TIME).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(EditTaskCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new EditTaskCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 40,
      "-": 30,
      "MarcTzh": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.logic.commands.EventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.EndDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.StartDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class EventCommandParser implements Parser\u003cEventCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public EventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DATE, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!Parser.arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DATE, PREFIX_START_TIME, PREFIX_END_TIME)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"\", EventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Description description \u003d Description.defaultDescription();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Tag tag \u003d Tag.defaultTag();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        StartDateTime startDateTime \u003d ParserUtil.parseStartDateTime("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                argMultimap.getValue(PREFIX_DATE).get(), argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        EndDateTime endDateTime \u003d ParserUtil.parseEndDateTime("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                argMultimap.getValue(PREFIX_DATE).get(), argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Event event \u003d Event.createUserEvent(title, startDateTime, endDateTime, description, tag);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new EventCommand(event);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 8,
      "-": 25,
      "dearvae": 25,
      "MarcTzh": 4,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindLessonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_SEARCH_PHRASE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.FindLessonCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.lesson.LessonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Parses input arguments and creates a new FindLessonCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class FindLessonCommandParser implements Parser\u003cFindLessonCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindLessonCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * and returns a FindLessonCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public FindLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_TIME, PREFIX_DATE_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!Parser.isAnyPrefixPresent(argMultimap, PREFIX_TITLE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_TIME, PREFIX_DATE_TIME, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    FindLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LessonContainsKeywordsPredicate predicate \u003d new LessonContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        setKeyword(PREFIX_TITLE, argMultimap, predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        setKeyword(PREFIX_DESCRIPTION, argMultimap, predicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        setKeyword(PREFIX_DATE, argMultimap, predicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        setKeyword(PREFIX_TIME, argMultimap, predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        setKeyword(PREFIX_DATE_TIME, argMultimap, predicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        setKeyword(PREFIX_TAG, argMultimap, predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new FindLessonCommand(predicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private void setKeyword(Prefix prefix,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                            ArgumentMultimap argMultimap,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                            LessonContainsKeywordsPredicate predicate) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        List\u003cString\u003e values \u003d argMultimap.getAllValues(prefix);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (values.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // trim values"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        values \u003d values.stream().map(String::trim).collect(Collectors.toList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (String trimmed : values) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (trimmed.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new ParseException(MESSAGE_EMPTY_SEARCH_PHRASE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (prefix.equals(PREFIX_TITLE) \u0026\u0026 !Title.isValidTitle(trimmed)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new ParseException(Title.SEARCH_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (prefix.equals(PREFIX_DESCRIPTION) \u0026\u0026 !Description.isValidDescription(trimmed)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new ParseException(Description.SEARCH_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (prefix.equals(PREFIX_DATE) \u0026\u0026 !DateUtil.isValidDate(trimmed)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new ParseException(DateUtil.SEARCH_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (prefix.equals(PREFIX_DATE_TIME) \u0026\u0026 !DateUtil.isValidDateTime(trimmed)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new ParseException(DateUtil.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (prefix.equals(PREFIX_TIME) \u0026\u0026 !DateUtil.isValidTime(trimmed)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new ParseException(DateUtil.SEARCH_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (prefix.equals(PREFIX_TAG) \u0026\u0026 !Tag.isValidTagName(trimmed)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new ParseException(Tag.SEARCH_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        values.forEach(val -\u003e predicate.setKeyword(prefix, val));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_SEARCH_PHRASE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.FindTaskCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Status;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Parses input arguments and creates a new FindTaskCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class FindTaskCommandParser implements Parser\u003cFindTaskCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindTaskCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * and returns a FindTaskCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public FindTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                                            PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_STATUS, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!Parser.isAnyPrefixPresent(argMultimap, PREFIX_TITLE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_STATUS, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"\", FindTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        setKeyword(PREFIX_TITLE, argMultimap, predicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        setKeyword(PREFIX_DESCRIPTION, argMultimap, predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        setKeyword(PREFIX_DATE, argMultimap, predicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        setKeyword(PREFIX_STATUS, argMultimap, predicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        setKeyword(PREFIX_TAG, argMultimap, predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new FindTaskCommand(predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private void setKeyword(Prefix prefix,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                            ArgumentMultimap argMultimap,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                            TaskContainsKeywordsPredicate predicate) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        List\u003cString\u003e values \u003d argMultimap.getAllValues(prefix);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (values.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // trim values"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        values \u003d values.stream().map(String::trim).collect(Collectors.toList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (String trimmed : values) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (trimmed.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new ParseException(MESSAGE_EMPTY_SEARCH_PHRASE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (prefix.equals(PREFIX_TITLE) \u0026\u0026 !Title.isValidTitle(trimmed)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new ParseException(Title.SEARCH_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (prefix.equals(PREFIX_DESCRIPTION) \u0026\u0026 !Description.isValidDescription(trimmed)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new ParseException(Description.SEARCH_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (prefix.equals(PREFIX_DATE) \u0026\u0026 !DateUtil.isValidDate(trimmed)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new ParseException(DateUtil.SEARCH_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (prefix.equals(PREFIX_STATUS) \u0026\u0026 !Status.isValidStatus(trimmed)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                throw new ParseException(Status.SEARCH_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            } //now the status only have a boolean value of isCompleted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (prefix.equals(PREFIX_TAG) \u0026\u0026 !Tag.isValidTagName(trimmed)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new ParseException(Tag.SEARCH_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        values.forEach(val -\u003e predicate.setKeyword(prefix, val));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 62,
      "-": 14,
      "dearvae": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LessonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.logic.commands.LessonCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.lesson.Time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class LessonCommandParser implements Parser\u003cLessonCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public LessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_TAG, PREFIX_DESCRIPTION, PREFIX_DAY,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                        PREFIX_START_DATE, PREFIX_END_DATE, PREFIX_START_TIME, PREFIX_END_TIME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_TAG, PREFIX_DAY, PREFIX_START_DATE, PREFIX_END_DATE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                PREFIX_START_TIME, PREFIX_END_TIME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"\", LessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Description description \u003d Description.defaultDescription();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assert argMultimap.getValue(PREFIX_TITLE).isPresent() : \"prefix title is missing\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assert argMultimap.getValue(PREFIX_TAG).isPresent() : \"prefix tag is missing\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalDate startDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalDate endDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalTime startTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalTime endTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(DateUtil.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!isStartDateBeforeEndDate(startDate, endDate)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            throw new ParseException(DateUtil.RANGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_TIME).isPresent()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_END_TIME).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!isStartTimeBeforeEndTime(startTime, endTime)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new ParseException(Time.RANGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DAY).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            dayOfWeek \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            throw new ParseException(DateUtil.DAY_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireAllNonNull(startDate, endDate, startTime, endTime, dayOfWeek);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Lesson lesson \u003d new Lesson(title, tag, description, dayOfWeek, startTime, endTime, startDate, endDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new LessonCommand(lesson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if the start date is before the end date."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static boolean isStartDateBeforeEndDate(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return startDate.isBefore(endDate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if the start time is before the end time."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static boolean isStartTimeBeforeEndTime(LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return startTime.isBefore(endTime);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 11,
      "dearvae": 3,
      "MarcTzh": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    static boolean isAnyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 19,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.lesson.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.DeadlineDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.EndDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.StartDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_MISSING_INDEX \u003d \"Index is not supplied in the argument.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String DAY_MESSAGE_CONSTRAINTS \u003d \"Day should be in the format of MON, TUE,\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + \" ..., SUN or MONDAY, TUESDAY, ..., SUNDAY\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Parses {@code oneBasedIndexes} into an {@code Index array} and returns it. Leading and trailing whitespaces will"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static Index[] parseVarargsIndex(String oneBasedIndexes) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String trimmed \u003d oneBasedIndexes.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (trimmed.equals(\"\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(MESSAGE_MISSING_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String[] splited \u003d trimmed.split(\" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        int length \u003d splited.length;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Index[] indexes \u003d new Index[length];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(splited[i])) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            indexes[i] \u003d Index.fromOneBased(Integer.parseInt(splited[i]));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return indexes;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Parses a {@code String dateTime} into a {@code DateTime}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static DeadlineDateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (!DeadlineDateTime.isValidDateTime(trimmedDateTime)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(DateUtil.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new DeadlineDateTime(trimmedDateTime);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Parses a {@code String dateTime} into a {@code DateTime}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static StartDateTime parseStartDateTime(String date, String time) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(date, time);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!StartDateTime.isValidDateTime(trimmedDate, trimmedTime)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(DateUtil.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return StartDateTime.createStartDateTime(trimmedDate, trimmedTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Parses a {@code String dateTime} into a {@code DateTime}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static EndDateTime parseEndDateTime(String date, String time) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(date, time);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String trimmedtime \u003d time.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (!EndDateTime.isValidDateTime(trimmedDate, trimmedtime)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(DateUtil.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return EndDateTime.createEndDateTime(trimmedDate, trimmedtime);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Parses a {@code String time} into a {@code LocalTime}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static LocalTime parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        DateTimeFormatter parser \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return LocalTime.parse(trimmedTime, parser);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Parses a {@code String date} into a {@code LocalDate}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        DateTimeFormatter parser \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (!DateUtil.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(DateUtil.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return LocalDate.parse(trimmedDate, parser);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Parses a {@code String day} into a {@code DayOfTheWeek}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed, input is case-insensitive."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @throws ParseException if the given {@code day} is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static DayOfWeek parseDay(String day) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String trimmedDay \u003d day.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String dayOfWeek \u003d trimmedDay.toUpperCase();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        switch (dayOfWeek) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        case \"MON\":"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        case \"MONDAY\":"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        case \"TUE\":"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        case \"TUESDAY\":"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return DayOfWeek.TUESDAY;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        case \"WED\":"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        case \"WEDNESDAY\":"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return DayOfWeek.WEDNESDAY;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        case \"THU\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        case \"THURSDAY\":"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return DayOfWeek.THURSDAY;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        case \"FRI\":"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        case \"FRIDAY\":"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return DayOfWeek.FRIDAY;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        case \"SAT\":"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        case \"SATURDAY\":"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return DayOfWeek.SATURDAY;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        case \"SUN\":"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        case \"SUNDAY\":"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return DayOfWeek.SUNDAY;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new ParseException(DAY_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 25,
      "-": 87,
      "dearvae": 45,
      "MarcTzh": 67,
      "GabriellaTeh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PlanusParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.logic.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.DeleteLessonCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.logic.commands.EditLessonCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.logic.commands.EventCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.FindLessonCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.FindTaskCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.logic.commands.LessonCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.logic.commands.ListLessonCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.ListTaskCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class PlanusParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"\", HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return new EventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        case DeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return new DeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return new EditTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        case FindTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return new FindTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        case LessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return new LessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        case ListTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return new ListTaskCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // commands related to lessons"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        case ListLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return new ListLessonCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        case EditLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return new EditLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        case FindLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return new FindLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        case DeleteLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return new DeleteLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 26,
      "-": 48,
      "dearvae": 6,
      "GabriellaTeh": 10,
      "MarcTzh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d task -\u003e !(task instanceof Event \u0026\u0026 ((Event) task).isLesson());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    Predicate\u003cLesson\u003e PREDICATE_SHOW_ALL_LESSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_CALENDAR_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the user prefs\u0027 PlaNus file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Path getPlanusFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Sets the user prefs\u0027 PlaNus file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void setPlanusFilePath(Path planusFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Replaces PlaNus data with the data in {@code planus}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void setPlanus(ReadOnlyPlanus planus);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /** Returns PlaNus */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    ReadOnlyPlanus getPlanus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in PlaNus."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Returns true if a lesson with the same identity as {@code lesson} exists in PlaNus."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    boolean hasLesson(Lesson lesson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in PlaNus."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    boolean hasCalendarTask(Task task);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The task must exist in PlaNus."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    void deleteTask(Task[] targets);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Deletes the given lesson."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * The lesson must exist in PlaNus."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    void deleteLesson(Lesson[] targets);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Deletes the given task in calendar."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * The task must exist in PlaNus."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    void deleteTaskInCalendar(Task[] targets);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Mark the given array of tasks to be done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * The tasks must exist in PlaNus."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    void markAsDone(Deadline[] targets, int[] durations);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code task} must not already exist in PlaNus."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Adds the given lesson."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * {@code lesson} must not already exist in PlaNus."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    void addLesson(Lesson lesson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code task} must not already exist in PlaNus."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    void addTaskToCalendar(Task task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code target} must exist in PlaNus."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Replaces the given lesson {@code target} with {@code editedLesson}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * {@code target} must exist in PlaNus."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * The lesson identity of {@code editedLesson} must not be the same as another existing lesson in the lesson list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    void setLesson(Lesson target, Lesson editedLesson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code target} must exist in PlaNus."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    void setCalendarTasks(Task target, Task editedTask);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /** Returns an unmodifiable view of the filtered lesson list */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    ObservableList\u003cLesson\u003e getFilteredLessonList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered calendar list */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredCalendarList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Updates the filter of the filtered lesson list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    void updateFilteredCalendar(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 15,
      "BobbyZhouZijian": 25,
      "-": 71,
      "dearvae": 7,
      "MarcTzh": 20,
      "GabriellaTeh": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Tests that a {@code Model}\u0027s given attribute matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public abstract class ModelContainsKeywordsPredicate\u003cT\u003e implements Predicate\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    protected final Map\u003cPrefix, List\u003cString\u003e\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public ModelContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.keywords \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void setKeyword(Prefix attribute, String keyword) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        List\u003cString\u003e extendedKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (keywords.containsKey(attribute)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            extendedKeywords \u003d keywords.get(attribute);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        extendedKeywords.add(keyword);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        keywords.put(attribute, extendedKeywords);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // assert if attribute is added to keywords"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assert keywords.containsKey(attribute) : \"attribute not added to keywords\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public abstract boolean test(T t);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Represents the in-memory model of the PlaNus data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final Planus planus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private final FilteredList\u003cLesson\u003e filteredLessons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredCalendar;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Initializes a ModelManager with the given planus and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public ModelManager(ReadOnlyPlanus planus, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireAllNonNull(planus, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        logger.fine(\"Initializing with PlaNus: \" + planus + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.planus \u003d new Planus(planus);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.planus.getTaskList().filtered(PREDICATE_SHOW_ALL_TASKS));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        filteredLessons \u003d new FilteredList\u003c\u003e(this.planus.getLessonList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        filteredCalendar \u003d new FilteredList\u003c\u003e(this.planus.getCalendarList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this(new Planus(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Path getPlanusFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return userPrefs.gePlanusFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setPlanusFilePath(Path planusFilePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(planusFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        userPrefs.setPlanusFilePath(planusFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Planus \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setPlanus(ReadOnlyPlanus planus) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.planus.resetData(planus);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public ReadOnlyPlanus getPlanus() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planus;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planus.hasTask(task);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return planus.hasLesson(lesson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public boolean hasCalendarTask(Task task) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        return planus.hasCalendarTask(task);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void deleteTask(Task[] targets) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        planus.removeTask(targets);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void deleteLesson(Lesson[] targets) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        planus.removeLesson(targets);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public void deleteTaskInCalendar(Task[] targets) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        planus.removeTaskInCalendar(targets);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void markAsDone(Deadline[] targets, int[] durations) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        planus.markAsDone(targets, durations);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planus.addTask(task);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        planus.addLesson(lesson);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void addTaskToCalendar(Task task) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        planus.addTaskToCalendar(task);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        updateFilteredCalendar(PREDICATE_SHOW_ALL_CALENDAR_TASKS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planus.setTask(target, editedTask);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireAllNonNull(target, editedLesson);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        planus.setLesson(target, editedLesson);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void setCalendarTasks(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        planus.setCalendarTask(target, editedTask);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * {@code versionedPlanus}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Lesson} backed by the internal list of"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * {@code versionedPlanus}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        return filteredLessons;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code versionedPlanus}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredCalendarList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        return filteredCalendar;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        filteredLessons.setPredicate(predicate);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void updateFilteredCalendar(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireAllNonNull(predicate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        filteredCalendar.setPredicate(predicate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planus.equals(other.planus)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                \u0026\u0026 filteredLessons.equals(other.filteredLessons)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                \u0026\u0026 filteredCalendar.equals(other.filteredCalendar);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 21,
      "BobbyZhouZijian": 25,
      "-": 127,
      "dearvae": 6,
      "MarcTzh": 35,
      "GabriellaTeh": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Planus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.calendar.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Wraps all data at the PlaNus level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class Planus implements ReadOnlyPlanus {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final UniqueLessonList lessons;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private final Calendar calendarTasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        lessons \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarTasks \u003d new Calendar();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Planus() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Creates a Planus using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Planus(ReadOnlyPlanus toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Replaces the contents of the lesson list with {@code lessons}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.lessons.setLessons(lessons);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void setCalendarTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        this.calendarTasks.setCalendarList(tasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Resets the existing data of this {@code Planus} with {@code newData}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void resetData(ReadOnlyPlanus newData) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        setLessons(newData.getLessonList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        setCalendarTasks(newData.getCalendarList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the PlaNUS task list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Returns true if a lesson with the same identity as {@code lesson} exists in the PlaNUS lesson list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return lessons.contains(lesson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Returns true if a task with the same identity as {@code lesson} exists in the PlaNus calendar list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public boolean hasCalendarTask(Task task) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        return calendarTasks.contains(task);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Adds a task to PlaNus."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The task must not already exist in the PlaNus task list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Adds a task to PlaNus."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * The task must not already exist in the PlaNus task list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        lessons.add(lesson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Adds an event or lesson to PlaNus calendar."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The task must not already exist in the PlaNus calendar list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void addTaskToCalendar(Task task) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarTasks.add(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code target} must exist in the PlaNus task list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Replaces the given lesson {@code target} in the list with {@code editedLesson}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * {@code target} must exist in the PlaNus lesson list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * The lesson identity of {@code editedLesson} must not be the same as another existing lesson in the lesson list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(editedLesson);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        lessons.setLesson(target, editedLesson);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code target} must exist in the PlaNus calendar list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the calendar list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void setCalendarTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarTasks.setCalendarTask(target, editedTask);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Mark the given tasks {@code targets} in the list as done."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * task in targets must exist in PlaNus."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void markAsDone(Deadline[] targets, int[] durations) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(targets);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        tasks.markAsDone(targets, durations);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Removes {@code key} from this {@code Planus}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code key} must exist in PlaNus."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Removes the given tasks {@code targets} from this {@code Planus}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Task in targets must exist in PlaNus."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void removeTask(Task[] targets) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(targets);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        tasks.remove(targets);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Removes the given lessons {@code targets} from this {@code Planus}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Lessons in targets must exist in PlaNus."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Removes all associated tasks with the lesson as well."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void removeLesson(Lesson[] targets) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(targets);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (Lesson target : targets) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            removeTask(target.getAssociatedTasks().toArray(new Task[0]));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            removeTaskInCalendar(target.getAssociatedTasks().toArray(new Task[0]));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        lessons.remove(targets);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Removes the given tasks {@code targets} from the calendar in this {@code Planus}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Task in targets must exist in PlaNus."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public void removeTaskInCalendar(Task[] targets) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        requireNonNull(targets);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        calendarTasks.remove(targets);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return lessons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public ObservableList\u003cTask\u003e getCalendarList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        return calendarTasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                || (other instanceof Planus // instanceof handles nulls"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 tasks.equals(((Planus) other).tasks));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 10,
      "BobbyZhouZijian": 57,
      "-": 77,
      "dearvae": 18,
      "GabriellaTeh": 52,
      "MarcTzh": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPlanus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Unmodifiable view of an PlaNus."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public interface ReadOnlyPlanus {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns an unmodifiable view of the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Returns an unmodifiable view of the lesson list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * This list will not contain any duplicate lessons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    ObservableList\u003cLesson\u003e getLessonList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Returns an unmodifiable view of the calendar list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    ObservableList\u003cTask\u003e getCalendarList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 6,
      "-": 11,
      "MarcTzh": 6,
      "GabriellaTeh": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Path gePlanusFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/StatisticsData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class StatisticsData {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatisticsData.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private HashMap\u003cTag, Integer[]\u003e stats;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Creates a statistics data object which can store information that summarises how much time is spent on"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * tasks and lessons for each module tag."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public StatisticsData() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        logger.info(\"New StatisticsData object created\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.stats \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Stores the module tag inside data structure."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        logger.info(\"New tag added to StatisticsData object\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Integer[] defaultValue \u003d new Integer[]{0, 0};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        stats.put(tag, defaultValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Adds the time taken for tasks for the specified module tag."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void addTaskTime(Tag tag, int value) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (contains(tag)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            Integer[] current \u003d stats.get(tag);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            Integer[] updated \u003d new Integer[]{current[0] + value, current[1]};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            stats.put(tag, updated);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Adds the time taken for lessons for the specified module tag."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void addLessonTime(Tag tag, int value) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (contains(tag)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            Integer[] current \u003d stats.get(tag);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            Integer[] updated \u003d new Integer[]{current[0], current[1] + value};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            stats.put(tag, updated);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if the module tag is stored in the data structure."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public boolean contains(Tag tag) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return stats.containsKey(tag);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Retrieves total time spent on tasks associated with module tag from data structure (in minutes)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public int getTotalTaskTime(Tag tag) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (contains(tag)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return stats.get(tag)[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Retrieves total time spent on lessons associated with module tag from data structure (in minutes)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public int getTotalLessonTime(Tag tag) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (contains(tag)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return stats.get(tag)[1];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Retrieves total time spent on both lessons and tasks associated with module tag from data structure (in minutes)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public int getTotalTime(Tag tag) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return getTotalTaskTime(tag) + getTotalLessonTime(tag);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        return stats.keySet();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        sb.append(\"Mod | Task Time | Lesson Time | Total time \\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        for (Tag tag : stats.keySet()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            sb.append(tag.tagName)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(\" | \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(getTotalTaskTime(tag))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(\" | \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(getTotalLessonTime(tag))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(\" | \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(getTotalTime(tag))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 4,
      "dearvae": 2,
      "MarcTzh": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Path planusFilePath \u003d Paths.get(\"data\" , \"planus.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        setPlanusFilePath(newUserPrefs.gePlanusFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Path gePlanusFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planusFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setPlanusFilePath(Path planusFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(planusFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.planusFilePath \u003d planusFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 planusFilePath.equals(o.planusFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return Objects.hash(guiSettings, planusFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + planusFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "MarcTzh": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Calendar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.lesson.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "public class Calendar implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private final ObservableList\u003cTask\u003e calendarList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            FXCollections.unmodifiableObservableList(calendarList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        return calendarList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void setCalendarTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        int index \u003d calendarList.indexOf(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.set(index, editedTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        if (!calendarList.remove(toRemove)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Removes the equivalent tasks from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The tasks must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void remove(Task[] tasks) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireNonNull(tasks);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            int index \u003d calendarList.indexOf(tasks[i]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            calendarList.remove(tasks[i]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Replaces the contents of this list with {@code lessons}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void setCalendarList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.setAll(tasks);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        return calendarList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                || (other instanceof Calendar // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                \u0026\u0026 calendarList.equals(((Calendar) other).calendarList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        return calendarList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabriellaTeh": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.EndDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.StartDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Lesson class to store information about a module\u0027s lessons."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final Tag tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final LocalTime endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private ArrayList\u003cTask\u003e associatedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public Lesson(Title title, Tag tag, Description description, DayOfWeek dayOfWeek, LocalTime startTime,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                  LocalTime endTime, LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireAllNonNull(title, description, dayOfWeek, startTime, endTime, startDate, endDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public DayOfWeek getDayOfWeek() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return dayOfWeek;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private int getTimeTaken() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        return (int) Duration.between(startTime, endTime).toMinutes();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Creates recurring event tasks based on the lesson\u0027s details."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @return a list of recurring tasks to add."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public ArrayList\u003cTask\u003e createRecurringTasks() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalDate currentDate \u003d offsetStartDate();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ArrayList\u003cTask\u003e tasksToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        while (!currentDate.isAfter(this.endDate)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            LocalDateTime localStartDateTime \u003d LocalDateTime.of(currentDate, getStartTime());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            LocalDateTime localEndDateTime \u003d LocalDateTime.of(currentDate, getEndTime());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            String startDateTimeString \u003d localStartDateTime.format(DateUtil.DATETIME_FORMATTER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            String endDateTimeString \u003d localEndDateTime.format(DateUtil.DATETIME_FORMATTER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            StartDateTime startDateTime \u003d new StartDateTime(startDateTimeString);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            EndDateTime endDateTime \u003d new EndDateTime(endDateTimeString);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            Event eventToAdd \u003d Event.createLessonEvent(title, startDateTime, endDateTime, description, tag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            tasksToAdd.add(eventToAdd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            currentDate \u003d currentDate.plusWeeks(1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        associatedTasks \u003d tasksToAdd;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return tasksToAdd;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Calculates if a given time is within the start and end time of the lesson."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param time a LocalTime object to be tested."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @return true if the given time is within the period of the lesson and false otherwise."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean periodContainsGivenTime(LocalTime time) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return !(time.isBefore(startTime) || time.isAfter(endTime));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Calculates if the lesson happens on the given date."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param date the date to be tested."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @return true if the lesson happens on the given date and false otherwise."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean happensOnDate(LocalDate date) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalDate currentDate \u003d offsetStartDate();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        while (!currentDate.isAfter(this.endDate)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (currentDate.equals(date)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            currentDate \u003d currentDate.plusWeeks(1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Calculates if a lesson happens on a given date time."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param dateTime a LocalDateTime object to be tested."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @return true if the lesson happens on the date time and false otherwise."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean happensOnDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalDate date \u003d dateTime.toLocalDate();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalTime time \u003d dateTime.toLocalTime();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!happensOnDate(date)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return periodContainsGivenTime(time);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Calculates the total number of hours this lesson takes within a specified time period."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public int timeTakenWithinPeriod(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireAllNonNull(startDate, endDate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return numberOfLessonsWithinPeriod(startDate, endDate) * getTimeTaken();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Calculates the number of lessons within a specified time period."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private int numberOfLessonsWithinPeriod(LocalDate start, LocalDate end) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        LocalDate currentDate \u003d getStartDate();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        while (!((currentDate.getDayOfWeek()).equals(this.dayOfWeek)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            \u0026\u0026 ((currentDate.isAfter(start)) || currentDate.isEqual(start)))) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            currentDate \u003d currentDate.plusDays(1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        while ((currentDate.isBefore(this.endDate) || currentDate.isEqual(this.endDate))"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            \u0026\u0026 (currentDate.isAfter(start) || currentDate.isEqual(start))"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            \u0026\u0026 (currentDate.isBefore(end) || currentDate.isEqual(end))) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            currentDate \u003d currentDate.plusDays(7);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return counter;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Returns the set of tasks the lesson created."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @return an array list of tasks created by the lesson."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public ArrayList\u003cTask\u003e getAssociatedTasks() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return associatedTasks;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if both lessons of the same title have the same start and end date, and the same start and end time."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public boolean isSameLesson(Lesson otherLesson) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (otherLesson \u003d\u003d this) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return otherLesson !\u003d null"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 otherLesson.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 otherLesson.getDayOfWeek().equals(getDayOfWeek())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 otherLesson.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 otherLesson.getEndTime().equals(getEndTime())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 otherLesson.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 otherLesson.getEndDate().equals(getEndDate());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return Objects.hash(title, tag, description, dayOfWeek, startTime, endTime, startDate, endDate);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // attributes that are neglected are hidden"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                .append(getDescription().equals(Description.defaultDescription()) ? \"\" : \" Description: \")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(\" Tag: \")"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(getTag())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(\" Day: \")"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(getDayOfWeek())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(\" Start Time: \")"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(getStartTime())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(\" End Time: \")"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(getEndTime())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(\" Start Date: \")"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(\" End Date: \")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(getEndDate());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Offsets the start date to match the day of first lesson."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @return a LocalDate object representing the offset start date."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private LocalDate offsetStartDate() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalDate currentDate \u003d getStartDate();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        while (!(currentDate.getDayOfWeek()).equals(this.dayOfWeek)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            currentDate \u003d currentDate.plusDays(1);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return currentDate;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 1,
      "BobbyZhouZijian": 69,
      "dearvae": 12,
      "MarcTzh": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/LessonContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.ModelContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Tests that a {@code Lesson}\u0027s given attribute matches any of the keywords given."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class LessonContainsKeywordsPredicate extends ModelContainsKeywordsPredicate\u003cLesson\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                                            implements Predicate\u003cLesson\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public LessonContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.keywords \u003d super.keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean test(Lesson lesson) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        boolean matched \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (Map.Entry\u003cPrefix, List\u003cString\u003e\u003e entry : keywords.entrySet()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            Prefix prefix \u003d entry.getKey();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            List\u003cString\u003e words \u003d entry.getValue();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (!isMatched(prefix.getPrefix(), words, lesson)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            matched \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return matched;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!(other instanceof LessonContainsKeywordsPredicate)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LessonContainsKeywordsPredicate casted \u003d (LessonContainsKeywordsPredicate) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (Prefix key : keywords.keySet()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (!casted.keywords.containsKey(key) || !keywords.get(key).equals(casted.keywords.get(key))) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private boolean isMatched(String prefix, List\u003cString\u003e words, Lesson lesson) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // assert prefix is of the desired format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assert prefix.charAt(prefix.length() - 1) \u003d\u003d \u0027:\u0027 : \"prefix string is in the wrong format\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (prefix.equals(\"title:\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return words.stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.matchesWordIgnoreCase(lesson.getTitle().title, keyword));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (prefix.equals(\"desc:\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return words.stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.matchesWordIgnoreCase(lesson.getDescription().value, keyword));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (prefix.equals(\"date:\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return words.stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                        assert DateUtil.isValidDate(keyword) : \"find keyword for date not in correct format\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                        return lesson.happensOnDate("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                                LocalDate.parse(keyword, DateUtil.DATE_FORMATTER));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (prefix.equals(\"time:\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return words.stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                        assert DateUtil.isValidTime(keyword) : \"find keyword for time not in correct format\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                        return lesson.periodContainsGivenTime("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                                LocalTime.parse(keyword, DateUtil.TIME_FORMATTER));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (prefix.equals(\"datetime:\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return words.stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                        assert DateUtil.isValidDateTime(keyword) : \"find keyword for date time not in correct format\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                        return lesson.happensOnDateTime("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                                LocalDateTime.parse(keyword, DateUtil.DATETIME_FORMATTER)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                        );"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (prefix.equals(\"tag:\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return words.stream()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.matchesWordIgnoreCase(lesson.getTag().tagName, keyword));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Represents a Lesson\u0027s time in PlaNus task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            \"Time should be in the format of HH:mm\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String RANGE_CONSTRAINTS \u003d \"Start time should be before end time\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final LocalTime DEFAULT_TIME \u003d LocalTime.parse(\"00:00\", FORMATTER);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(2[0-3]|[01][0-9]):([0-5][0-9])$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public final LocalTime value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public final boolean isDefault;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        value \u003d LocalTime.parse(time, FORMATTER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        isDefault \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Constructs a default {@code Time}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Caveat: Only called by defaultTime method."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Time() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        value \u003d DEFAULT_TIME; // a dummy value"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        isDefault \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if a given string is a valid time number."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @param test the string value to be put to test."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @return true if the test string is valid and false otherwise"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (isDefault) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            assert value.equals(DEFAULT_TIME) : \"default time using real time value.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return value.format(FORMATTER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 (value.equals(((Time) other).value)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                || isDefault \u0026\u0026 ((Time) other).isDefault)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "MarcTzh": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/UniqueLessonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.lesson.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.lesson.exceptions.LessonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * A list of lessons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * A lesson is considered unique by comparing using {@code Task#isSameTasks(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * lessons uses Lesson#isSameLessons(Lesson) for equality so as to ensure that the lesson being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * unique in terms of identity in the UniqueTasksList. However, the removal of a lesson uses Task#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * as to ensure that the lesson with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * @see Lesson#isSameLesson(Lesson)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class UniqueLessonList implements Iterable\u003cLesson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Returns true if the list contains an equivalent lesson as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean contains(Lesson toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameLesson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Adds a lesson to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * The lesson must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void add(Lesson toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Replaces the lesson {@code target} in the list with {@code editedLesson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * The lesson identity of {@code editedLesson} must not be the same as another existing lesson in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireAllNonNull(target, editedLesson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!target.isSameLesson(editedLesson) \u0026\u0026 contains(editedLesson)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        internalList.set(index, editedLesson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Removes the equivalent lesson from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * The lesson must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void remove(Lesson toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Removes the equivalent lessons from the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * The lessons must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void remove(Lesson[] lessons) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(lessons);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (int i \u003d 0; i \u003c lessons.length; i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            int index \u003d internalList.indexOf(lessons[i]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            internalList.remove(lessons[i]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Replaces the contents of this list with {@code lessons}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireAllNonNull(lessons);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!lessonsAreUnique(lessons)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        internalList.setAll(lessons);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public ObservableList\u003cLesson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public Iterator\u003cLesson\u003e iterator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                || (other instanceof UniqueLessonList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueLessonList) other).internalList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Returns true if {@code lessons} contains only unique lessons."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private boolean lessonsAreUnique(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (int i \u003d 0; i \u003c lessons.size() - 1; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            for (int j \u003d i + 1; j \u003c lessons.size(); j++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                if (lessons.get(i).isSameLesson(lessons.get(j))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/DuplicateLessonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Signals that the operation will result in duplicate Lessons (Lessons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class DuplicateLessonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public DuplicateLessonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        super(\"Operation would result in duplicate lessons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/LessonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Signals that the operation is unable to find the specified lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class LessonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Represents a Tag in the PlaNus."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String SEARCH_CONSTRAINTS \u003d \"Search phrase for tag names should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String upperCaseTag \u003d tagName.toUpperCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.tagName \u003d upperCaseTag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Constructs a default {@code Tag}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private Tag() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        tagName \u003d DEFAULT_TAG;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Create a placeholder {@code Tag} that has an empty tag value."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @return an empty tag."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static Tag defaultTag() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new Tag();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Format tag as text for viewing."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return tagName.equals(\"\") ? \"\" : tagName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 16,
      "-": 52,
      "MarcTzh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Represents a Task\u0027s date and time in PlaNus task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    protected final LocalDateTime value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param dateTime A valid date and time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (dateTime.isEmpty() || dateTime.isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            value \u003d DateUtil.DEFAULT_DATETIME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            checkArgument(isValidDateTime(dateTime), DateUtil.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            value \u003d LocalDateTime.parse(dateTime, DateUtil.DATETIME_FORMATTER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DateTime(LocalDateTime value) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public LocalDateTime getValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Returns true if a given string is a valid dateTime number."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param test the string value to be put to test."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @return true if the test string is valid and false otherwise"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return DateUtil.isValidDateTime(test);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return value.format(DateUtil.DATETIME_FORMATTER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 (value.equals(((DateTime) other).value)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "dearvae": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Represents a Task\u0027s description in the PlaNus task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Comprises of a few sentences representing a brief description of the content of the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Guarantees: is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions should only contain alphanumerical values\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"as well as comma, period, question mark and exclamation mark, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"should also not be blank\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"example \u003d\u003e desc:Tell Zijian to review my PR!!! Repeat, this is urgent!!! You get it?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String SEARCH_CONSTRAINTS \u003d \"Search phrase for desc should only contain alphanumerical values\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"as well as comma, period, question mark and exclamation mark, and should also not be blank\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum},.!?][\\\\p{Alnum},.!? ]*\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private static final String DEFAULT_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Constructs a default {@code Description}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Caveat: Only called by the defaultDescription method."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private Description() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        value \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Returns if a given string is a valid description."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Constructs an empty Description object if the user does not provide the description field."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Caveat: Only called when the user does not key in this field."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static Description defaultDescription() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new Description();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 63,
      "dearvae": 14,
      "GabriellaTeh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Represents a Task in the PlaNus task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public abstract class Task implements Comparable\u003cTask\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    protected final Title title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    protected final Description description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    protected final Tag tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    protected Task(Title title, Description description, Tag tag) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireAllNonNull(title, description, tag);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.tag \u003d (tag);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns an immutable tag, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the time taken for the task to be completed in minutes."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public abstract int getTimeTaken();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the date in which the task occurs."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if both tasks of the same title, date and time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * This defines a strong notion of equality between two tasks to allow recurring tasks yet preventing duplicates."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public abstract boolean isSameTask(Task otherTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if tasks is a lesson."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public abstract boolean isLesson();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public abstract int hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public abstract int compareTo(Task otherTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 5,
      "-": 34,
      "dearvae": 10,
      "MarcTzh": 28,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.ModelContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Tests that a {@code Task}\u0027s given attribute matches any of the keywords given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class TaskContainsKeywordsPredicate extends ModelContainsKeywordsPredicate\u003cTask\u003e implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public TaskContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        keywords \u003d super.keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        boolean matched \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (Map.Entry\u003cPrefix, List\u003cString\u003e\u003e entry : keywords.entrySet()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            Prefix prefix \u003d entry.getKey();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            List\u003cString\u003e words \u003d entry.getValue();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (!isMatched(prefix.getPrefix(), words, task)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            matched \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return matched;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!(other instanceof TaskContainsKeywordsPredicate)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate casted \u003d (TaskContainsKeywordsPredicate) other;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (Prefix key : keywords.keySet()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (!casted.keywords.containsKey(key) || !keywords.get(key).equals(casted.keywords.get(key))) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private boolean isMatched(String prefix, List\u003cString\u003e words, Task task) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // assert prefix is of the desired format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assert prefix.charAt(prefix.length() - 1) \u003d\u003d \u0027:\u0027 : \"prefix string is in the wrong format\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (prefix.equals(\"title:\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return words.stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.matchesWordIgnoreCase(task.getTitle().title, keyword));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (prefix.equals(\"desc:\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return words.stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.matchesWordIgnoreCase(task.getDescription().value, keyword));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (prefix.equals(\"date:\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            String dateTime \u003d task.getDate().format(DateUtil.DATE_FORMATTER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return words.stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.matchesWordIgnoreCase(dateTime, keyword));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (prefix.equals(\"status:\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return task instanceof Deadline \u0026\u0026 words.stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    .anyMatch(keyword -\u003e ((Deadline) task).getStatus().toString().toLowerCase()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                            .equals(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (prefix.equals(\"tag:\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return words.stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.matchesWordIgnoreCase(task.getTag().tagName, keyword));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 81,
      "dearvae": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Represents a Task\u0027s title in the PlaNus task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            \"Title should only contain alphanumeric characters and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String SEARCH_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            \"Search phrase for title should only contain alphanumeric characters and spaces,\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"and it should not be blank.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return title.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 3,
      "-": 40,
      "MarcTzh": 16,
      "GabriellaTeh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTasks(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * tasks uses Task#isSameTasks(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * unique in terms of identity in the UniqueTasksList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Removes the equivalent tasks from the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * The tasks must exist in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void remove(Task[] tasks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(tasks);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            int index \u003d internalList.indexOf(tasks[i]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            internalList.remove(tasks[i]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Replaces the task in the list with {@code tasks} done version."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * each task in tasks must exist in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void markAsDone(Deadline[] deadlines, int[] durations) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(deadlines);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c deadlines.length; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            int index \u003d internalList.indexOf(deadlines[i]);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            internalList.set(index, deadlines[i].markAsDone(durations[i]));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 89,
      "dearvae": 35,
      "MarcTzh": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/deadline/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Represents a Deadline in the PlaNus task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final DeadlineDateTime deadlineDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final DoneDateTime doneDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Deadline(Title title, DeadlineDateTime deadlineDateTime, Description description, Tag tag,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                     Status status, Duration duration, DoneDateTime doneDateTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        super(title, description, tag);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireAllNonNull(deadlineDateTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.deadlineDateTime \u003d deadlineDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.doneDateTime \u003d doneDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Factory method to create a new Deadline object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static Deadline createDeadline(Title title, DeadlineDateTime deadlineDateTime,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                                          Description description, Tag tag) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new Deadline(title, deadlineDateTime, description, tag, Status.createIncompleteStatus(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                Duration.createNullDuration(), DoneDateTime.createNullDoneDateTime());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineDateTime getDeadlineDateTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return deadlineDateTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DoneDateTime getDoneDateTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return doneDateTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public int getTimeTaken() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return duration.valueInMinutes;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return this.doneDateTime.getValue().toLocalDate();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public boolean isLesson() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean isDeadlineDateTimeFilled() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return deadlineDateTime.isFilled();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (otherTask instanceof Deadline) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return isSameDeadline((Deadline) otherTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return status.isCompleted;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Returns true if both deadlines of the same title, date and time."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private boolean isSameDeadline(Deadline otherDeadline) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (otherDeadline \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return otherDeadline !\u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 otherDeadline.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 otherDeadline.getDeadlineDateTime().equals(getDeadlineDateTime());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public LocalDateTime getDeadlineDateTimeValue() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this.deadlineDateTime.getValue();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * mark the task as done by updating the status, duration and done time."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public Deadline markAsDone(int durationInMinutes) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new Deadline(title, deadlineDateTime, description, tag, Status.createCompleteStatus(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new Duration(durationInMinutes), DoneDateTime.createDoneNow());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Returns true if both deadlines have the same identity and data fields."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * This defines a stronger notion of equality between two deadlines."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (!(other instanceof Deadline)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Deadline otherDeadline \u003d (Deadline) other;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return otherDeadline.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 otherDeadline.getDeadlineDateTime().equals(getDeadlineDateTime())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 otherDeadline.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 otherDeadline.getTag().equals(getTag())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 otherDeadline.getStatus().equals(getStatus());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return Objects.hash(title, deadlineDateTime, description, tag, status);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // attributes that are neglected are hidden"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .append(\" Done by: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .append(getDeadlineDateTime())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                .append(getDescription().equals(Description.defaultDescription()) ? \"\" : \" Description: \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                .append(getTag().toString().equals(\"\") ? \"\" : \" Tag: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .append(getTag());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        builder.append(\" Status: \").append(getStatus());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * compares deadline with another task object"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public int compareTo(Task otherTask) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (otherTask instanceof Event) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (deadlineDateTime.isFilled) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                return getDeadlineDateTimeValue().compareTo(((Event) otherTask).getEndDateTimeValue());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else { //otherTask instanceof Deadline"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            Deadline deadline \u003d (Deadline) otherTask;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (deadline.isDeadlineDateTimeFilled() \u0026\u0026 deadlineDateTime.isFilled) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                return getDeadlineDateTimeValue().compareTo(deadline.getDeadlineDateTimeValue());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            } else if (deadline.isDeadlineDateTimeFilled() \u0026\u0026 !deadlineDateTime.isFilled) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            } else if (!deadline.isDeadlineDateTimeFilled() \u0026\u0026 deadlineDateTime.isFilled) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                return getTitle().toString().compareTo(deadline.getTitle().toString());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 5,
      "dearvae": 174,
      "MarcTzh": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/deadline/DeadlineDateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Represents a Task\u0027s date and time in PlaNus task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DeadlineDateTime extends DateTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public final boolean isFilled;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * @param dateTime A valid date and time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineDateTime(String dateTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        super(dateTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (value.equals(DateUtil.DEFAULT_DATETIME)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            this.isFilled \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            isFilled \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static DeadlineDateTime createNullDeadlineDateTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new DeadlineDateTime(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean isFilled() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return isFilled;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (!isFilled || value \u003d\u003d DateUtil.DEFAULT_DATETIME) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return value.format(DateUtil.DATETIME_FORMATTER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                || (other instanceof DeadlineDateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 (value.equals(((DeadlineDateTime) other).value)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    || isFilled \u0026\u0026 ((DeadlineDateTime) other).isFilled())); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "dearvae": 30,
      "-": 18,
      "GabriellaTeh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/deadline/DoneDateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Represents a Task\u0027s date and time in PlaNus task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DoneDateTime extends DateTime {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public final boolean isFilled;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * @param dateTime A valid date and time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DoneDateTime(String dateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        super(dateTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.isFilled \u003d !value.equals(DateUtil.DEFAULT_DATETIME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private DoneDateTime(LocalDateTime value) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.isFilled \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Constructs a DoneDateTime object of default value when the task is not done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static DoneDateTime createNullDoneDateTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new DoneDateTime(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static DoneDateTime createDoneNow() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new DoneDateTime(LocalDateTime.now());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean isFilled() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return isFilled;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (!isFilled) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return value.format(DateUtil.DATETIME_FORMATTER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                || (other instanceof DoneDateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 (value.equals(((DoneDateTime) other).value)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                || isFilled \u0026\u0026 ((DoneDateTime) other).isFilled())); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 5,
      "dearvae": 37,
      "-": 18,
      "GabriellaTeh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/deadline/Duration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Represents a Deadline Task\u0027s Status in the PlaNus task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class Duration {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final int NULL_VALUE \u003d -1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String INVALID_DURATION_FORMAT \u003d \"The valid of duration is not valid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public final int valueInMinutes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public final boolean isFill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Constructs a {@code Duration}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param valueInMinutes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public Duration(int valueInMinutes) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (valueInMinutes \u003d\u003d NULL_VALUE) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            this.isFill \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            this.valueInMinutes \u003d valueInMinutes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            checkArgument(isValidDuration(valueInMinutes), Duration.INVALID_DURATION_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            this.valueInMinutes \u003d valueInMinutes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            this.isFill \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * factory method that returns a Duration Object represents a null duration;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static Duration createNullDuration() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new Duration(NULL_VALUE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean isFilled() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return isFill;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static boolean isValidDuration(int duration) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return duration \u003d\u003d NULL_VALUE || duration \u003e\u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return String.valueOf(valueInMinutes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                || (other instanceof Duration // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 valueInMinutes \u003d\u003d (((Duration) other).valueInMinutes)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/deadline/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Represents a Deadline Task\u0027s Status in the PlaNus task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class Status {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String COMPLETE_TEXT \u003d \"complete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String INCOMPLETE_TEXT \u003d \"incomplete\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String ACCEPTED_STATUS \u003d COMPLETE_TEXT + \",\" + INCOMPLETE_TEXT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d String.format(\"Value for status can only be one of \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + \"the following: %s.\", ACCEPTED_STATUS);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String SEARCH_CONSTRAINTS \u003d String.format(\"Search phrase for Status can only be one of \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + \"the following: %s.\", ACCEPTED_STATUS);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public final boolean isCompleted;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Constructs a {@code Status}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param isCompleted"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public Status(boolean isCompleted) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * factory method that returns a Status Object represents a deadline task is complete."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static Status createCompleteStatus() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new Status(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * factory method that returns a Status Object represents a deadline task is incomplete."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static Status createIncompleteStatus() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new Status(false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static boolean isComplete(String status) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return status.equals(COMPLETE_TEXT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static boolean isValidStatus(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return test.equals(COMPLETE_TEXT) || test.equals(INCOMPLETE_TEXT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return COMPLETE_TEXT;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return INCOMPLETE_TEXT;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                || (other instanceof Status // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 isCompleted \u003d\u003d (((Status) other).isCompleted)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 2,
      "dearvae": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/event/EndDateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Represents a Task\u0027s date and time in PlaNus task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class EndDateTime extends DateTime {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Constructs a {@code EndDateTime} using a date time string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param dateTime A valid date and time string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public EndDateTime(String dateTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        super(dateTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Constructs a {@code EndDateTime} using a LocalDateTime object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param dateTime A LocalDateTime object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private EndDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        super(dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Factory method to create EndDateTime object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param date of the endDateTime"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param time of the endDateTime"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @return an EndDateTime object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static EndDateTime createEndDateTime(String date, String time) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        checkArgument(DateUtil.isValidDate(date), DateUtil.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        checkArgument(DateUtil.isValidTime(time), DateUtil.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String datetime \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new EndDateTime(datetime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static boolean isValidDateTime(String date, String time) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return DateUtil.isValidDate(date) \u0026\u0026 DateUtil.isValidTime(time);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Creates a new EndDateTime object with the date changed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param date the date to be changed to."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @return a new EndDateTime object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public EndDateTime editEndDate(LocalDate date) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalTime time \u003d value.toLocalTime();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new EndDateTime(LocalDateTime.of(date, time));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Creates a new EndDateTime object with the start time changed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param endTime a LocalTime object representing the end time to change to."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @return a EndDateTime object with the end time changed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public EndDateTime editEndTime(LocalTime endTime) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalDate date \u003d value.toLocalDate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new EndDateTime(LocalDateTime.of(date, endTime));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                || (other instanceof EndDateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 (value.equals(((EndDateTime) other).value))); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 38,
      "dearvae": 27,
      "-": 15,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.model.tag.Tag.defaultTag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Represents a Task in the PlaNus task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final StartDateTime startDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final EndDateTime endDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final boolean isLesson;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public Event(Title title, StartDateTime startDateTime, EndDateTime endDateTime, Description description,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                  Tag tag, boolean isLesson) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        super(title, description, tag);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireAllNonNull(startDateTime, endDateTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.isLesson \u003d isLesson;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static Event createLessonEvent(Title title, StartDateTime startDateTime, EndDateTime endDateTime,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                                          Description description, Tag tag) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new Event(title, startDateTime, endDateTime, description, tag, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static Event createUserEvent(Title title, StartDateTime startDateTime, EndDateTime endDateTime,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                                        Description description, Tag tag) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new Event(title, startDateTime, endDateTime, description, tag, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean isLesson() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return isLesson;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public StartDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public EndDateTime getEndDateTime() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public LocalDateTime getEndDateTimeValue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return endDateTime.getValue();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public LocalDateTime getStartDateTimeValue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return startDateTime.getValue();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns an immutable tag, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public int getTimeTaken() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return (int) Duration.between(getStartDateTimeValue(), getEndDateTimeValue()).toMinutes();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return this.startDateTime.getValue().toLocalDate();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (otherTask instanceof Event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return isSameEvent((Event) otherTask);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Returns true if both events of the same title, start and end datetime."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * This defines a strong notion of equality between two events to allow recurring events yet preventing duplicates."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 otherEvent.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 otherEvent.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDateTime().equals(getEndDateTime());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Returns true if both events have the same identity and data fields."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return otherEvent.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 otherEvent.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDateTime().equals(getEndDateTime())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 otherEvent.getTag().equals(getTag())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 otherEvent.isLesson() \u003d\u003d isLesson();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return Objects.hash(title, startDateTime, endDateTime, description, tag, isLesson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (isLesson) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            builder.append(\"Lesson: \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // attributes that are neglected are hidden"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .append(\" From: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .append(getStartDateTime())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .append(\" To: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .append(getEndDateTime())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                .append(getDescription().equals(Description.defaultDescription()) ? \"\" : \" Description: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                .append(getTag().equals(defaultTag()) ? \"\" : \" Tag: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .append(getTag());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * compares event with another task object, if the otherTask is also an event, compare there endDateTime,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * if another task is deadline object, check whether if has the deadlineDateTime filled by user, if exits,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * compare the this event\u0027s entDateTime with the deadlineDateTime, if not exits, the event is consider to be"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * before the deadline."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public int compareTo(Task otherTask) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (otherTask instanceof Event) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return getEndDateTimeValue().compareTo(((Event) otherTask).getEndDateTimeValue());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            Deadline deadline \u003d (Deadline) otherTask;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (deadline.isDeadlineDateTimeFilled()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                return getEndDateTimeValue().compareTo(deadline.getDeadlineDateTimeValue());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 5,
      "dearvae": 155,
      "MarcTzh": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/event/StartDateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Represents a Task\u0027s date and time in PlaNus task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class StartDateTime extends DateTime {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Constructs a {@code StartDateTime} using a date time string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param dateTime A valid date and time string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public StartDateTime(String dateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        super(dateTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Constructs a {@code StartDateTime} using a LocalDateTime object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param dateTime A LocalDateTime object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private StartDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        super(dateTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Factory method to create EndDateTime object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param date of the endDateTime"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param time of the endDateTime"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @return an EndDateTime object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static StartDateTime createStartDateTime(String date, String time) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        checkArgument(DateUtil.isValidDate(date), DateUtil.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        checkArgument(DateUtil.isValidTime(time), DateUtil.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String datetime \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new StartDateTime(datetime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Returns true if a given string is a valid dateTime number."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param date the string value of date to be put to test."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param time the string value of time to be put to test."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @return true if the test string is valid and false otherwise"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static boolean isValidDateTime(String date, String time) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return DateUtil.isValidDate(date) \u0026\u0026 DateUtil.isValidTime(time);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Creates a new StartDateTime object with the date changed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param date the date to be changed to."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @return a new StartDateTime object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public StartDateTime editStartDate(LocalDate date) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalTime time \u003d value.toLocalTime();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new StartDateTime(LocalDateTime.of(date, time));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Creates a new StartDateTime object with the start time changed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param startTime a LocalTime object representing the start time to change to."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @return a StartDateTime object with the start time changed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public StartDateTime editStartTime(LocalTime startTime) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        LocalDate date \u003d value.toLocalDate();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new StartDateTime(LocalDateTime.of(date, startTime));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean isBeforeEndDateTime(EndDateTime endDateTime) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return value.isBefore(endDateTime.getValue());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                || (other instanceof StartDateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 (value.equals(((StartDateTime) other).value))); // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 44,
      "dearvae": 28,
      "-": 19,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcTzh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "MarcTzh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.DeadlineDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.DoneDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Status;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.EndDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.StartDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Contains utility methods for populating {@code Planus} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            Deadline.createDeadline(new Title(\"Borrow books\"), new DeadlineDateTime(\"25-11-2020 09:00\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                    Description.defaultDescription(), new Tag(\"CS1101S\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            new Deadline(new Title(\"Assignment 1\"), new DeadlineDateTime(\"25-11-2020 09:00\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    new Description(\"Programming Assignment 2 of CS3230, Very hard.\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                    new Tag(\"CS3230\"), Status.createCompleteStatus(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    new Duration(20), DoneDateTime.createDoneNow()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            Event.createUserEvent(new Title(\"Source Academy Orientation\"), new StartDateTime(\"25-11-2020 13:00\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    new EndDateTime(\"25-11-2020 18:00\"), Description.defaultDescription(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                    new Tag(\"CS1101S\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            Event.createUserEvent(new Title(\"CS2105 tutorial\"), new StartDateTime(\"25-11-2020 13:00\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    new EndDateTime(\"25-11-2020 15:00\"), Description.defaultDescription(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    new Tag((\"CS2105\")))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static ReadOnlyPlanus getSamplePlanus() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Planus samplePlanus \u003d new Planus();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            samplePlanus.addTask(sampleTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return samplePlanus;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 4,
      "BobbyZhouZijian": 3,
      "-": 15,
      "dearvae": 16,
      "MarcTzh": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDeadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.DeadlineDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.DoneDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "class JsonAdaptedDeadline {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedDeadline.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final String deadlineDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final String doneDateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final int duration;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final String tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public JsonAdaptedDeadline(@JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                               @JsonProperty(\"deadlineDateTime\") String deadlineDateTime,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                               @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                               @JsonProperty(\"doneDateTime\") String doneDateTime,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                               @JsonProperty(\"duration\") int duration,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                               @JsonProperty(\"tag\") String tag,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                               @JsonProperty(\"status\") String status) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.deadlineDateTime \u003d deadlineDateTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.doneDateTime \u003d doneDateTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public JsonAdaptedDeadline(Deadline source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        deadlineDateTime \u003d source.getDeadlineDateTime().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        doneDateTime \u003d source.getDoneDateTime().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        status \u003d source.getStatus().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        duration \u003d source.getTimeTaken();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        tag \u003d source.getTag().tagName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        logger.info(\"Planus deadline with title: \u0027\" + title + \"\u0027 successfully converted to adapted task object\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public Deadline toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Tag.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (deadlineDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    DeadlineDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        final DeadlineDateTime modelDeadlineDateTime;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (deadlineDateTime.equals(\"\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            logger.info(\"Deadline datetime for deadline with title: \u0027\" + title + \"\u0027 is empty. \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    + \"Creating a default deadline datetime for it\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelDeadlineDateTime \u003d DeadlineDateTime.createNullDeadlineDateTime();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else if (!DateUtil.isValidDateTime(deadlineDateTime)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(DateUtil.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelDeadlineDateTime \u003d new DeadlineDateTime(deadlineDateTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // tentatively description field is not allowed to be empty"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        final Description modelDescription;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            logger.info(\"Description for deadline title: \u0027\" + title + \"\u0027 is empty. \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    + \"Creating a default description for it\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelDescription \u003d Description.defaultDescription();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (doneDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    DoneDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        final DoneDateTime modelDoneDateTime;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (doneDateTime.equals(\"\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            logger.info(\"Done datetime for deadline with title: \u0027\" + title + \"\u0027 is empty. Creating a default \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    + \"done datetime for it\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelDoneDateTime \u003d DoneDateTime.createNullDoneDateTime();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else if (!DateUtil.isValidDateTime(doneDateTime)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(DateUtil.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelDoneDateTime \u003d new DoneDateTime(doneDateTime);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        final Status modelStatus;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (Status.isComplete(status)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelStatus \u003d Status.createCompleteStatus();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelStatus \u003d Status.createIncompleteStatus();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        final Duration modelDuration;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (!Duration.isValidDuration(duration)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            throw new IllegalValueException(Duration.INVALID_DURATION_FORMAT);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelDuration \u003d new Duration(duration);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        final Tag modelTag;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (tag.equals(\"\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            logger.info(\"Tag for deadline title: \u0027\" + title + \"\u0027 is empty. Creating a default tag for it\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            modelTag \u003d Tag.defaultTag();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        } else if (!Tag.isValidTagName(tag)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            modelTag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new Deadline(modelTitle, modelDeadlineDateTime, modelDescription, modelTag, modelStatus, modelDuration,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                modelDoneDateTime);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 37,
      "-": 40,
      "dearvae": 73,
      "MarcTzh": 18,
      "GabriellaTeh": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.EndDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.StartDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedEvent.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final String startDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final String endDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final boolean isLesson;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final String tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"title\") String title, @JsonProperty(\"startDateTime\") String startDateTime,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                            @JsonProperty(\"endDateTime\") String endDateTime,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                            @JsonProperty(\"description\") String description, @JsonProperty(\"isLesson\") boolean isLesson,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                            @JsonProperty(\"tag\") String tag) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.isLesson \u003d isLesson;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        startDateTime \u003d source.getStartDateTime().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        endDateTime \u003d source.getEndDateTime().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        isLesson \u003d source.isLesson();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        tag \u003d source.getTag().tagName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        logger.info(\"Planus event with title: \u0027\" + title + \"\u0027 successfully converted to adapted task object\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Tag.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (startDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    StartDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        final StartDateTime modelStartDateTime;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (!DateUtil.isValidDateTime(startDateTime) || startDateTime.equals(\"\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(DateUtil.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelStartDateTime \u003d new StartDateTime(startDateTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    StartDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        final EndDateTime modelEndDateTime;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (!DateUtil.isValidDateTime(endDateTime) || endDateTime.equals(\"\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(DateUtil.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelEndDateTime \u003d new EndDateTime(endDateTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // tentatively description field is not allowed to be empty"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        final Description modelDescription;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            logger.info(\"Description for event title: \u0027\" + title + \"\u0027 is empty. Creating a default description for it\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelDescription \u003d Description.defaultDescription();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        final Tag modelTag;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (tag.equals(\"\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            logger.info(\"Tag for event title: \u0027\" + title + \"\u0027 is empty. Creating a default tag for it\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            modelTag \u003d Tag.defaultTag();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        } else if (!Tag.isValidTagName(tag)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            modelTag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new Event(modelTitle, modelStartDateTime, modelEndDateTime, modelDescription, modelTag, isLesson);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 28,
      "-": 37,
      "dearvae": 47,
      "MarcTzh": 21,
      "GabriellaTeh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedLesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.lesson.Time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Jackson-friendly version of {@link Lesson}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "class JsonAdaptedLesson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Lesson\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedLesson.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final String tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final String dayOfWeek;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Constructs a {@code JsonAdaptedLesson} with the given lesson details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public JsonAdaptedLesson(@JsonProperty(\"title\") String title, @JsonProperty(\"tag\") String tag,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                             @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                         @JsonProperty(\"dayOfWeek\") String dayOfWeek, @JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                       @JsonProperty(\"endTime\") String endTime, @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                             @JsonProperty(\"endDate\") String endDate) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Converts a given {@code Lesson} into this class for Jackson use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public JsonAdaptedLesson(Lesson source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        tag \u003d source.getTag().tagName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        dayOfWeek \u003d source.getDayOfWeek().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        startTime \u003d source.getStartTime().format(Time.FORMATTER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        endTime \u003d source.getEndTime().format(Time.FORMATTER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        startDate \u003d source.getStartDate().format(DateUtil.DATE_FORMATTER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        endDate \u003d source.getEndDate().format(DateUtil.DATE_FORMATTER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        logger.info(\"Planus lesson with title: \u0027\" + title + \"\u0027 successfully converted to adapted lesson object\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Converts this Jackson-friendly adapted lesson object into the model\u0027s {@code Lesson} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted lesson."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public Lesson toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Tag.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        final Tag modelTag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // tentatively description field is not allowed to be empty"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        final Description modelDescription;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            logger.info(\"Description for lesson title: \u0027\" + title + \"\u0027 is empty.\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    + \"Creating a default description for it\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            modelDescription \u003d Description.defaultDescription();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        } else if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (dayOfWeek \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    DayOfWeek.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        final DayOfWeek modelDayOfWeek \u003d ParserUtil.parseDay(dayOfWeek);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    LocalTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        final LocalTime modelStartTime \u003d LocalTime.parse(startTime, Time.FORMATTER);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    LocalTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        final LocalTime modelEndTime \u003d LocalTime.parse(endTime, Time.FORMATTER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    LocalDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        final LocalDate modelStartDate \u003d LocalDate.parse(startDate, DateUtil.DATE_FORMATTER);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    LocalDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        final LocalDate modelEndDate \u003d LocalDate.parse(endDate, DateUtil.DATE_FORMATTER);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new Lesson(modelTitle, modelTag, modelDescription, modelDayOfWeek,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                modelStartTime, modelEndTime, modelStartDate, modelEndDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 131,
      "dearvae": 6,
      "MarcTzh": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPlanusStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * A class to access Planus data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class JsonPlanusStorage implements PlanusStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPlanusStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public JsonPlanusStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Path getPlanusFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Optional\u003cReadOnlyPlanus\u003e readPlanus() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return readPlanus(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Similar to {@link #readPlanus()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Optional\u003cReadOnlyPlanus\u003e readPlanus(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Optional\u003cJsonSerializablePlanus\u003e jsonPlanus \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                filePath, JsonSerializablePlanus.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!jsonPlanus.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return Optional.of(jsonPlanus.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void savePlanus(ReadOnlyPlanus planus) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        savePlanus(planus, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Similar to {@link #savePlanus(ReadOnlyPlanus)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void savePlanus(ReadOnlyPlanus planus, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(planus);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        logger.info(\"saving data to: \" + filePath + \", with data: \" + planus);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePlanus(planus), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 2,
      "-": 60,
      "MarcTzh": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePlanus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * An Immutable Planus that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "@JsonRootName(value \u003d \"planus\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "class JsonSerializablePlanus {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final List\u003cJsonAdaptedDeadline\u003e deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final List\u003cJsonAdaptedLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e calendar \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Constructs a {@code JsonSerializablePlanus} with the given tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public JsonSerializablePlanus(@JsonProperty(\"deadlines\") List\u003cJsonAdaptedDeadline\u003e deadlines,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                                  @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.deadlines.addAll(deadlines);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Converts a given {@code ReadOnlyPlanus} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePlanus}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public JsonSerializablePlanus(ReadOnlyPlanus source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        deadlines.addAll(source.getTaskList().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                .filter(task -\u003e task instanceof Deadline)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                .map(task -\u003e (Deadline) task)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .map(JsonAdaptedDeadline::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        events.addAll(source.getTaskList().stream().filter(task -\u003e task instanceof Event).map(task -\u003e (Event) task)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .filter(event -\u003e !event.isLesson()).map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        lessons.addAll(source.getLessonList().stream().map(JsonAdaptedLesson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendar.addAll(source.getCalendarList().stream().map(task -\u003e (Event) task)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                .map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Converts this PlaNus into the model\u0027s {@code Planus} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Planus toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus planus \u003d new Planus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (JsonAdaptedDeadline jsonAdaptedDeadline : deadlines) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            Deadline deadline \u003d jsonAdaptedDeadline.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (planus.hasTask(deadline)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            planus.addTask(deadline);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (planus.hasTask(event)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            planus.addTask(event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            planus.addTaskToCalendar(event);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (JsonAdaptedLesson jsonAdaptedLesson : lessons) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            Lesson lesson \u003d jsonAdaptedLesson.toModelType();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d lesson.createRecurringTasks();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                if (planus.hasTask(task)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                planus.addTask(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                planus.addTaskToCalendar(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            planus.addLesson(lesson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planus;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 19,
      "-": 31,
      "dearvae": 30,
      "MarcTzh": 14,
      "GabriellaTeh": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PlanusStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Represents a storage for {@link Planus}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public interface PlanusStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Path getPlanusFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns Planus data as a {@link ReadOnlyPlanus}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Optional\u003cReadOnlyPlanus\u003e readPlanus() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @see #getPlanusFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Optional\u003cReadOnlyPlanus\u003e readPlanus(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Saves the given {@link ReadOnlyPlanus} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @param planus cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void savePlanus(ReadOnlyPlanus planus) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @see #savePlanus(ReadOnlyPlanus)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void savePlanus(ReadOnlyPlanus planus, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcTzh": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Statistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.StatisticsData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * This class handles all computation related to time spent on tasks and lessons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Statistics.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final Path filePath \u003d Paths.get(\"data\", \"planus.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Computes total duration of time spent on all tasks and lessons for the specified time period and"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * stores it in a data structure."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static StatisticsData generateStatistics(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus planus \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        StatisticsData stats \u003d new StatisticsData();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            JsonSerializablePlanus dataFromFile \u003d JsonUtil.readJsonFile(filePath,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                    JsonSerializablePlanus.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            planus \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            logger.info(\"Failed to read PlaNus storage file in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (planus \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            logger.info(\"Unable to get statistics summary as storage file is not found.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return stats;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        logger.info(\"Generating summary for statistics.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        updateTimeTakenForTasks(planus.getTaskList(), stats, startDate, endDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        updateTimeTakenForLessons(planus.getLessonList(), stats, startDate, endDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        logger.info(\"Generated statistics \\n\" + stats.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return stats;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static FilteredList\u003cTask\u003e filterTasksWithinPeriod(ObservableList\u003cTask\u003e tasks, LocalDate start,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                                                              LocalDate end) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return tasks.filtered(task -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            LocalDate taskDate \u003d task.getDate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return (taskDate.isEqual(start) || taskDate.isAfter(start))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 (taskDate.isBefore(end) || taskDate.isEqual(end));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static void updateTimeTakenForTasks(ObservableList\u003cTask\u003e tasks, StatisticsData stats,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                                               LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        FilteredList\u003cTask\u003e filteredTasks \u003d filterTasksWithinPeriod(tasks, startDate, endDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        for (Task task: filteredTasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            if (task.isLesson()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            Tag currentTag \u003d task.getTag();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            if (!stats.contains(currentTag)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                stats.addTag(currentTag);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            stats.addTaskTime(currentTag, task.getTimeTaken());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static void updateTimeTakenForLessons(ObservableList\u003cLesson\u003e lessons, StatisticsData stats,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                                                 LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        for (Lesson lesson: lessons) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            Tag currentTag \u003d lesson.getTag();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            if (!stats.contains(currentTag)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                stats.addTag(currentTag);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            stats.addLessonTime(currentTag, lesson.timeTakenWithinPeriod(startDate, endDate));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 1,
      "dearvae": 3,
      "MarcTzh": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public interface Storage extends PlanusStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Path getPlanusFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Optional\u003cReadOnlyPlanus\u003e readPlanus() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void savePlanus(ReadOnlyPlanus planus) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "MarcTzh": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Manages storage of Planus data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private PlanusStorage planusStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code PlanusStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public StorageManager(PlanusStorage planusStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.planusStorage \u003d planusStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Planus methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Path getPlanusFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planusStorage.getPlanusFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Optional\u003cReadOnlyPlanus\u003e readPlanus() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return readPlanus(planusStorage.getPlanusFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Optional\u003cReadOnlyPlanus\u003e readPlanus(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planusStorage.readPlanus(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void savePlanus(ReadOnlyPlanus planus) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        savePlanus(planus, planusStorage.getPlanusFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void savePlanus(ReadOnlyPlanus planus, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planusStorage.savePlanus(planus, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "MarcTzh": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarDayPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.ui.card.CalendarDayEventCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "public class CalendarDayPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private static final String FXML \u003d \"CalendarDayPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarDayEventCard.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private ListView\u003cTask\u003e scheduleView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Create a CalendarDayPanel object to hold day event information."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * @param schedule the filtered tasks that will be displayed in the calendar view"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * @param dateTime the date time of the day cell in the calendar view"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public CalendarDayPanel(ObservableList\u003cTask\u003e schedule, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        displayDate(dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        scheduleView.setItems(schedule);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        scheduleView.setCellFactory(listView -\u003e new CalendarDayPanelCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private void displayDate(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        date.setText(dateTime.getMonth().toString() + \" \" + dateTime.getDayOfMonth());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    class CalendarDayPanelCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                setGraphic(new CalendarDayEventCard(task).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private GridPane calendar;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label column1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label column2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label column3;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label column4;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label column5;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label column6;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label column7;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Create a CalendarPanel that holds the calendar view"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * @param calendarList a list containing all tasks in the timeline"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public CalendarPanel(ObservableList\u003cTask\u003e calendarList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadDays();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadCalendar(calendarList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private void loadCalendar(ObservableList\u003cTask\u003e calendarList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        LocalDateTime startDate \u003d findCalendarStart();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        for (int i \u003d 1; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                FilteredList\u003cTask\u003e dayList \u003d filterDayList(calendarList, startDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                calendar.add(loadDay(dayList, startDate).getRoot(), j, i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                startDate \u003d startDate.plusDays(1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private FilteredList\u003cTask\u003e filterDayList(ObservableList\u003cTask\u003e calendarList, LocalDateTime startDate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        Predicate\u003cTask\u003e inTheDay \u003d task -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                return (deadline.getDeadlineDateTimeValue().isEqual(startDate)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                        || deadline.getDeadlineDateTimeValue().isAfter(startDate))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                        \u0026\u0026 deadline.getDeadlineDateTimeValue().isBefore(startDate.plusDays(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                return (event.getStartDateTimeValue().isEqual(startDate)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                        || event.getStartDateTimeValue().isAfter(startDate))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                        \u0026\u0026 event.getStartDateTimeValue().isBefore(startDate.plusDays(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        };"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        return calendarList.filtered(inTheDay);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private CalendarDayPanel loadDay(ObservableList\u003cTask\u003e dayList, LocalDateTime startDateTime) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        return new CalendarDayPanel(dayList, startDateTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private LocalDateTime findCalendarStart() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        LocalDateTime today \u003d LocalDate.now().atStartOfDay();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        LocalDateTime start \u003d today.minusDays(7 + today.getDayOfWeek().getValue());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private void loadDays() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        column1.setText(\"Sunday\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        column2.setText(\"Monday\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        column3.setText(\"Tuesday\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        column4.setText(\"Wednesday\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        column5.setText(\"Thursday\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        column6.setText(\"Friday\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        column7.setText(\"Saturday\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DataAnalysisPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.StatisticsData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "public class DataAnalysisPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private static final String FXML \u003d \"DataAnalysisPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DataAnalysisPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private StatsSummaryPanel statsSummaryPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private PieChart pieChart;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private StackPane pieChartPlaceholder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Pane statsSummaryPanelPlaceholder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Creates a Data Analysis Panel UI."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * @param statsData lesson list to be analysed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public DataAnalysisPanel(StatisticsData statsData) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadPieChart(statsData);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadSummary(statsData);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Update statistics"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * @param newStatsData new Stats data"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public void updateStats(StatisticsData newStatsData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        fillPieChart(newStatsData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadSummary(newStatsData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private void loadPieChart(StatisticsData statsData) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        pieChart \u003d new PieChart();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        fillPieChart(statsData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        pieChart.setMaxSize(300, 300);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        pieChartPlaceholder.getChildren().add(pieChart);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        pieChart.setLabelsVisible(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        pieChart.setTitle(\"Breakdown of time spent\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private void fillPieChart(StatisticsData statsData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        pieChart.setData(transformToPieChartData(statsData));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private void loadSummary(StatisticsData statsData) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        statsSummaryPanel \u003d new StatsSummaryPanel(statsData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        statsSummaryPanelPlaceholder.getChildren().add(statsSummaryPanel.getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private ObservableList\u003cPieChart.Data\u003e transformToPieChartData(StatisticsData statsData) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e dataList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        for (Tag tag : statsData.getTags()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            int tagTotaltime \u003d statsData.getTotalTime(tag);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            PieChart.Data data \u003d tag.tagName.equals(\"\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                ? new PieChart.Data(\"Untagged\", tagTotaltime)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                : new PieChart.Data(tag.tagName, tagTotaltime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            dataList.add(data);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        return dataList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 72,
      "BobbyZhouZijian": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t12-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LessonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.ui.card.LessonCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Panel containing the list of lessons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "public class LessonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private static final String FXML \u003d \"LessonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LessonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private ListView\u003cLesson\u003e lessonListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Creates a {@code LessonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public LessonListPanel(ObservableList\u003cLesson\u003e lessonList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        lessonListView.setItems(lessonList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        lessonListView.setCellFactory(listView -\u003e new LessonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Lesson} using a {@code LessonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    class LessonListViewCell extends ListCell\u003cLesson\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        protected void updateItem(Lesson lesson, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            super.updateItem(lesson, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            if (empty || lesson \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                setGraphic(new LessonCard(lesson, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 46,
      "BobbyZhouZijian": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private LessonListPanel lessonListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private DataAnalysisPanel dataAnalysisPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private StackPane lessonListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private StackPane dataAnalysisPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private StackPane calendarPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        lessonListPanel \u003d new LessonListPanel(logic.getFilteredLessonList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        lessonListPanelPlaceholder.getChildren().add(lessonListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        calendarPanel \u003d new CalendarPanel(logic.getFilteredCalendarList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        calendarPanelPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        dataAnalysisPanel \u003d new DataAnalysisPanel(logic.getStatisticsData());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        dataAnalysisPanelPlaceholder.getChildren().add(dataAnalysisPanel.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPlanusFilePath());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private void updateDataAnalysisPanel() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        dataAnalysisPanel.updateStats(logic.getStatisticsData());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            updateDataAnalysisPanel();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 22,
      "-": 193,
      "MarcTzh": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatsSummaryPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.StatisticsData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.ui.card.StatsSummaryCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "public class StatsSummaryPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private static final String FXML \u003d \"StatsSummaryPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StatsSummaryPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private StatisticsData dataSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private ListView\u003cTag\u003e tagListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Create a StatsSummaryPanel to hold stats summary"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * @param dataSet the statistic data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public StatsSummaryPanel(StatisticsData dataSet) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        this.dataSet \u003d dataSet;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        ObservableList\u003cTag\u003e tagList \u003d FXCollections.observableArrayList(dataSet.getTags());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        tagListView.setItems(tagList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        tagListView.setCellFactory(listView -\u003e new TagListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    class TagListViewCell extends ListCell\u003cTag\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        protected void updateItem(Tag tag, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            super.updateItem(tag, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            if (empty || tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                setGraphic(new StatsSummaryCard(tag, dataSet).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.ui.card.DeadlineCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.ui.card.EventCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    setGraphic(new DeadlineCard((Deadline) task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    setGraphic(new EventCard((Event) task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 9,
      "-": 33,
      "MarcTzh": 14,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/planus.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/card/CalendarDayEventCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "package seedu.address.ui.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "public class CalendarDayEventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private static final String FXML \u003d \"CalendarDayEventCard.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public final Task event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Create a CalendarDayEventCard that holds day events"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * @param task the task that will be displayed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public CalendarDayEventCard(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        this.event \u003d task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        setStartTime(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        title.setText(task.getTitle().toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private void setStartTime(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        startTime.setText(event.getStartDateTimeValue().toLocalTime().toString() + \" - \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            + event.getEndDateTimeValue().toLocalTime().toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/card/DeadlineCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "package seedu.address.ui.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.control.CheckBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "//import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "//import seedu.address.model.task.State;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "public class DeadlineCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private static final String FXML \u003d \"DeadlineCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public final Deadline deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private VBox card;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private CheckBox statusSign;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private HBox durationHolder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label duration;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private HBox dateTimeHolder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private HBox descriptionHolder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Creates a {@code TaskCode} with the given {@code Task} and index to display."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public DeadlineCard(Deadline deadline, int displayedIndex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        title.setText(deadline.getTitle().title);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        statusSign.setSelected(deadline.getStatus().isCompleted);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        status.setText(deadline.getStatus().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadTag(deadline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadDescription(deadline);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadDateTime(deadline);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadDuration(deadline);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private void loadTag(Deadline deadline) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (!deadline.getTag().tagName.equals(\"\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            tags.getChildren().add(new Label(deadline.getTag().tagName));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private boolean loadDateTime(Deadline deadline) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (!deadline.getDeadlineDateTime().isFilled()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            card.getChildren().remove(dateTimeHolder);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            dateTime.setText(deadline.getDeadlineDateTime().toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private boolean loadDescription(Deadline deadline) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (deadline.getDescription().equals(Description.defaultDescription())) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            card.getChildren().remove(descriptionHolder);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            description.setText(deadline.getDescription().value);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private boolean loadDuration(Deadline deadline) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (deadline.getDuration().isFilled()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            card.getChildren().remove(durationHolder);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            duration.setText(deadline.getTimeTaken() + \" mins\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (!(other instanceof DeadlineCard)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        DeadlineCard card \u003d (DeadlineCard) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u0026\u0026 deadline.equals(card.deadline);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 70,
      "-": 48,
      "dearvae": 6,
      "MarcTzh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/card/EventCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "package seedu.address.ui.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private static final String FXML \u003d \"EventCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private VBox card;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label from;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label to;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private HBox descriptionHolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Creates a {@code TaskCode} with the given {@code Task} and index to display."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public EventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        title.setText(event.getTitle().title);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        from.setText(event.getStartDateTime().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        to.setText(event.getEndDateTime().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadTag(event);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadDescription(event);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private void loadTag(Event event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (!event.getTag().tagName.equals(\"\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            tags.getChildren().add(new Label(event.getTag().tagName));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private boolean loadDescription(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (task.getDescription().equals(Description.defaultDescription())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            card.getChildren().remove(descriptionHolder);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            description.setText(task.getDescription().value);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 45,
      "-": 45,
      "dearvae": 1,
      "MarcTzh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/card/LessonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "package seedu.address.ui.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * An UI component that displays information of a {@code Lesson}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "public class LessonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private static final String FXML \u003d \"LessonCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public final Lesson lesson;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private VBox card;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label dayOfWeek;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label recurrence;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private HBox descriptionHolder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Creates a {@code LessonCode} with the given {@code Lesson} and index to display."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public LessonCard(Lesson lesson, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        title.setText(lesson.getTitle().title);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        dayOfWeek.setText(lesson.getDayOfWeek().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        time.setText(lesson.getStartTime().toString() + \" - \" + lesson.getEndTime().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        recurrence.setText(lesson.getStartDate().toString() + \" to \" + lesson.getEndDate().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadDescription(lesson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadTag(lesson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private void loadTag(Lesson lesson) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (!lesson.getTag().tagName.equals(\"\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            tags.getChildren().add(new Label(lesson.getTag().tagName));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private boolean loadDescription(Lesson lesson) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (lesson.getDescription().equals(Description.defaultDescription())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            card.getChildren().remove(descriptionHolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            description.setText(lesson.getDescription().value.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (!(other instanceof LessonCard)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        LessonCard card \u003d (LessonCard) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u0026\u0026 lesson.equals(card.lesson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 95,
      "BobbyZhouZijian": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/card/StatsSummaryCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "package seedu.address.ui.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.StatisticsData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "public class StatsSummaryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private static final String FXML \u003d \"StatsSummaryCard.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public final Tag tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label lessonTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label taskTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label totalTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Create a StatsSummaryCard"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * @param tag the tag"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * @param dataSet the statistic data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public StatsSummaryCard(Tag tag, StatisticsData dataSet) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        moduleCode.setText(tag.tagName.equals(\"\") ? \"Untagged\" : tag.tagName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        lessonTime.setText(\"\" + dataSet.getTotalLessonTime(tag) + \" mins\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        taskTime.setText(\"\" + dataSet.getTotalTaskTime(tag) + \" mins\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        totalTime.setText(\"\" + dataSet.getTotalTime(tag) + \" mins\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (!(other instanceof LessonCard)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        StatsSummaryCard card \u003d (StatsSummaryCard) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        return tag.equals(card.tag);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 54
    }
  },
  {
    "path": "src/main/resources/view/CalendarDayEventCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003cGridPane gridLinesVisible\u003d\"true\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cRowConstraints fillHeight\u003d\"false\" minHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cRowConstraints fillHeight\u003d\"false\" vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cLabel fx:id\u003d\"startTime\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"Title\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 29
    }
  },
  {
    "path": "src/main/resources/view/CalendarDayPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cVBox alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Label\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cListView fx:id\u003d\"scheduleView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 11,
      "BobbyZhouZijian": 1
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003cGridPane fx:id\u003d\"calendar\" alignment\u003d\"CENTER\" gridLinesVisible\u003d\"true\" styleClass\u003d\"grid-pane\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cRowConstraints fillHeight\u003d\"false\" minHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" valignment\u003d\"CENTER\" vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"70.0\" valignment\u003d\"CENTER\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"70.0\" valignment\u003d\"CENTER\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"70.0\" valignment\u003d\"CENTER\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"70.0\" valignment\u003d\"CENTER\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cLabel fx:id\u003d\"column1\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cLabel fx:id\u003d\"column2\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cLabel fx:id\u003d\"column3\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Label\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cLabel fx:id\u003d\"column4\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Label\" GridPane.columnIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cLabel fx:id\u003d\"column5\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Label\" GridPane.columnIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cLabel fx:id\u003d\"column6\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Label\" GridPane.columnIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cLabel fx:id\u003d\"column7\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Label\" GridPane.columnIndex\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 38
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "#filterField, #taskListPanel, #taskWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 351,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/main/resources/view/DataAnalysisPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003cVBox alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cLabel styleClass\u003d\"label-header\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Time Analysis For The Past Week\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cStackPane fx:id\u003d\"pieChartPlaceholder\" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statsSummaryPanelPlaceholder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 22
    }
  },
  {
    "path": "src/main/resources/view/DeadlineCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.CheckBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003cVBox alignment\u003d\"CENTER\" fillWidth\u003d\"false\" maxWidth\u003d\"30.0\" minWidth\u003d\"30.0\" prefWidth\u003d\"30.0\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cLabel text\u003d\"D\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003cSeparator orientation\u003d\"VERTICAL\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003cVBox fx:id\u003d\"card\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cHBox spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "               \u003cLabel text\u003d\"Status:\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cHBox fx:id\u003d\"dateTimeHolder\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "               \u003cLabel text\u003d\"Date \u0026amp; Time:\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateTime\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cHBox fx:id\u003d\"descriptionHolder\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "               \u003cLabel text\u003d\"Description:\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cHBox fx:id\u003d\"durationHolder\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "               \u003cLabel text\u003d\"Duration:\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cLabel fx:id\u003d\"duration\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$duration\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003cCheckBox fx:id\u003d\"statusSign\" alignment\u003d\"CENTER\" disable\u003d\"true\" mnemonicParsing\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003c/CheckBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 50,
      "BobbyZhouZijian": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/EventCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003cVBox alignment\u003d\"CENTER\" fillWidth\u003d\"false\" maxWidth\u003d\"30.0\" minWidth\u003d\"30.0\" prefWidth\u003d\"30.0\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cLabel text\u003d\"E\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003cSeparator orientation\u003d\"VERTICAL\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cVBox fx:id\u003d\"card\" alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"title\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cHBox spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003cLabel text\u003d\"From:\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003cLabel fx:id\u003d\"from\" styleClass\u003d\"cell_small_label\" text\u003d\"from\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cHBox spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "               \u003cLabel text\u003d\"To:\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "               \u003cLabel fx:id\u003d\"to\" styleClass\u003d\"cell_small_label\" text\u003d\"to\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cHBox fx:id\u003d\"descriptionHolder\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003cLabel text\u003d\"Description:\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 65
    }
  },
  {
    "path": "src/main/resources/view/LessonCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cVBox fx:id\u003d\"card\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\\\$title\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cHBox spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003cLabel text\u003d\"Day of Week:\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003cLabel fx:id\u003d\"dayOfWeek\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$dayOfWeek\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cHBox spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003cLabel text\u003d\"Time:\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$time\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cHBox spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003cLabel text\u003d\"Recurrence period:\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003cLabel fx:id\u003d\"recurrence\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$recurrence\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cHBox fx:id\u003d\"descriptionHolder\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003cLabel text\u003d\"Description:\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$description\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 61
    }
  },
  {
    "path": "src/main/resources/view/LessonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003cListView fx:id\u003d\"lessonListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003cfx:root minHeight\u003d\"805.0\" minWidth\u003d\"850.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"PlaNus\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    \u003cImage url\u003d\"@/images/planus.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                  \u003cSplitPane dividerPositions\u003d\"0.5\" orientation\u003d\"VERTICAL\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                     \u003citems\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                              \u003cLabel styleClass\u003d\"label-header\" text\u003d\"Tasks:\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                                    \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                                 \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                                 \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                         \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                        \u003cVBox minWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                              \u003cLabel styleClass\u003d\"label-header\" text\u003d\"Lessons:\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                                    \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                                 \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                                    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                                 \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                                 \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                                 \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"lessonListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                     \u003c/items\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                  \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                  \u003cVBox styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"calendarPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                        \u003cSeparator VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"dataAnalysisPanelPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 54,
      "BobbyZhouZijian": 1,
      "-": 42,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/main/resources/view/StatsSummaryCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cLabel fx:id\u003d\"moduleCode\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cLabel text\u003d\"Total\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cRegion minWidth\u003d\"50.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalTime\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cLabel text\u003d\"Lesson\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cRegion minWidth\u003d\"50.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cLabel fx:id\u003d\"lessonTime\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cLabel text\u003d\"Task\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cRegion minWidth\u003d\"50.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cLabel fx:id\u003d\"taskTime\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 32,
      "BobbyZhouZijian": 1
    }
  },
  {
    "path": "src/main/resources/view/StatsSummaryPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003cVBox alignment\u003d\"CENTER\" maxHeight\u003d\"300.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cLabel styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Modules\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cListView fx:id\u003d\"tagListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 17
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/test/data/JsonPlanusStorageTest/invalidAndValidTaskPlanus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  \"deadlines\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    \"title\" : \"Valid Task\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"deadlineDateTime\" : \"25-11-2020 09:00\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"doneDateTime\" : \"24-10-2020 04:07\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"duration\" : 10,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    \"tag\" : \"\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"status\" : \"incomplete\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  }],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  \"events\" : {},"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  \"lessons\" : [ ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "-": 2,
      "dearvae": 9,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/test/data/JsonPlanusStorageTest/invalidTaskPlanus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  \"deadlines\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    \"title\" : \"Task with invalid title field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"deadlineDateTime\" : \"25-11-2020 09:00\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"doneDateTime\" : \"24-10-2020 04:07\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"duration\" : 10,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    \"tag\" : \"\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"status\" : \"incomplete\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  }],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  \"events\" : [ ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  \"lessons\" : [ ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "-": 2,
      "dearvae": 9,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializablePlanusTest/duplicateTaskPlanus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  \"deadlines\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"title\" : \"Valid Task\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"deadlineDateTime\" : \"25-11-2020 09:00\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"doneDateTime\" : \"24-10-2020 04:07\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"duration\" : 10,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    \"tag\" : \"CS2102\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"status\" : \"incomplete\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"title\" : \"Valid Task\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"deadlineDateTime\" : \"25-11-2020 09:00\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"doneDateTime\" : \"24-10-2020 04:07\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"duration\" : 10,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    \"tag\" : \"CS2102\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"status\" : \"incomplete\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  }],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  \"events\" : [ ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  \"lessons\" : [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 2,
      "-": 3,
      "dearvae": 16
    }
  },
  {
    "path": "src/test/data/JsonSerializablePlanusTest/invalidTaskPlanus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  \"deadlines\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"title\" : \"Valid Task\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"deadlineDateTime\" : \"25-11-2020 09:00\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"description\" : \"@\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"doneDateTime\" : \"24-10-2020 04:07\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"duration\" : 10,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    \"tag\" : \"\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"status\" : \"incomplete\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  }],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  \"events\" : [ ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  \"lessons\" : [ ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "-": 2,
      "dearvae": 10
    }
  },
  {
    "path": "src/test/data/JsonSerializablePlanusTest/typicalTaskPlanus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  \"_comment\": \"Planus save file which contains the same Tasks values as in TypicalTasks#getTypicalPlanus()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  \"deadlines\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"title\" : \"Submit Developer Guide\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"deadlineDateTime\" : \"01-01-2020 12:00\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"description\" : \"Submit through luminus\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"doneDateTime\" : \"01-01-1000 00:00\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"duration\" : -1,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    \"tag\" : \"CS2103T\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"status\" : \"incomplete\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"title\" : \"Assignment 3\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"deadlineDateTime\" : \"02-02-2020 12:59\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"description\" : \"important\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"doneDateTime\" : \"24-10-2020 04:07\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"duration\" : 20,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    \"tag\" : \"CS2102\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"status\" : \"complete\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"title\" : \"GEQ Readings\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"deadlineDateTime\" : \"01-01-1000 00:00\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"description\" : \"15 pages reading\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"doneDateTime\" : \"01-01-1000 00:00\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"duration\" : -1,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    \"tag\" : \"GEQ1000\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"status\" : \"incomplete\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"title\" : \"Grade Mission\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"deadlineDateTime\" : \"04-04-2020 12:00\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"description\" : \"grading all student mission\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"doneDateTime\" : \"01-01-1000 00:00\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"duration\" : -1,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    \"tag\" : \"CS1101S\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"status\" : \"incomplete\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  \"events\" : [{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "      \"title\" : \"Project meeting\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "      \"startDateTime\" : \"05-05-2020 12:00\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "      \"endDateTime\" : \"05-05-2020 14:00\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "      \"description\" : \"discuss v1.3 content\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "      \"isLesson\" : false,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "      \"tag\" : \"CS2103T\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"title\" : \"Project meeting2\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"startDateTime\" : \"05-05-2020 14:00\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"endDateTime\" : \"05-05-2020 16:00\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"description\" : \"discuss project database diagram\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"isLesson\" : false,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"tag\" : \"CS2102\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"title\" : \"Project meeting3\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"startDateTime\" : \"05-05-2020 18:00\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"endDateTime\" : \"05-05-2020 20:00\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"description\" : \"discuss v1.3 content\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"isLesson\" : false,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    \"tag\" : \"CS2103T\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  }],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  \"lessons\" : [ ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 4,
      "-": 5,
      "dearvae": 49,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  \"planusFilePath\": \"planus.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  \"planusFilePath\": \"planus.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        final Index fifthTaskIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(fifthTaskIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "MarcTzh": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/planus.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(serializableTestClass.getTitle(), SerializableTestClass.getTitleTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                StringUtil.matchesWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            -\u003e StringUtil.matchesWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.matchesWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // Matches a partial word"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"aaa bbb ccc\", \"bb\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"aaa bbb ccc\", \"bb\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"01-01-2020 18:00\", \"01-02-2020\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"todo\", \"todu\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // mismatched"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"aaa bbb ccc\", \"bbbbccc\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 24,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.ListTaskCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.storage.JsonPlanusStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonPlanusStorage planusStorage \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                new JsonPlanusStorage(temporaryFolder.resolve(\"planus.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(planusStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String deleteTaskCommand \u003d \"delete-task 9\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertCommandException(deleteTaskCommand, MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String listCommand \u003d ListTaskCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertCommandSuccess(listCommand, ListTaskCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static class JsonPlanusIoExceptionThrowingStub extends JsonPlanusStorage {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        private JsonPlanusIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public void savePlanus(ReadOnlyPlanus planus, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 5,
      "-": 117,
      "dearvae": 1,
      "MarcTzh": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_emptyPlanus_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_nonEmptyPlanus_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel.setPlanus(new Planus());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "MarcTzh": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String VALID_TITLE_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String VALID_TITLE_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String VALID_DATE_TIME_AMY \u003d \"31-12-2020 17:00\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String VALID_DATE_TIME_BOB \u003d \"01-01-2020 00:00\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String VALID_DESCRIPTION_AMY \u003d \"amy,example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String VALID_DESCRIPTION_BOB \u003d \"bob,example.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public static final String VALID_TYPE_BOB \u003d \"deadline\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String TITLE_DESC_AMY \u003d \" \" + PREFIX_TITLE + VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String TITLE_DESC_BOB \u003d \" \" + PREFIX_TITLE + VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String DATE_TIME_DESC_AMY \u003d \" \" + PREFIX_DATE_TIME + VALID_DATE_TIME_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String DATE_TIME_DESC_BOB \u003d \" \" + PREFIX_DATE_TIME + VALID_DATE_TIME_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String DESCRIPTION_DESC_AMY \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String DESCRIPTION_DESC_BOB \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"Homework\u0026\"; // \u0027\u0026\u0027 not allowed in titles"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String INVALID_DATE_TIME_DESC \u003d \" \" + PREFIX_DATE_TIME"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            + \"32-11-2000 19:00\"; // 32nd day not allowed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"bob@yahoo\"; // \u0027@\u0027 not allowed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String VALID_TITLE_CS2103T \u003d \"CS2103T Lecture\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String VALID_DESC_CS2103T \u003d \"Best lecture ever!\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String VALID_START_TIME_CS2103T \u003d \"12:00\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String VALID_END_TIME_CS2103T \u003d \"14:00\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String VALID_START_DATE_CS2103T \u003d \"01-01-2020\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String VALID_END_DATE_CS2103T \u003d \"01-05-2020\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String VALID_TAG \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * - the address book, filtered task list and selected task in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus expectedPlanus \u003d new Planus(actualModel.getPlanus());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedPlanus, actualModel.getPlanus());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code model}\u0027s task list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        final String[] splitTitle \u003d task.getTitle().title.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, splitTitle[0]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 4,
      "BobbyZhouZijian": 10,
      "-": 75,
      "dearvae": 1,
      "MarcTzh": 23,
      "GabriellaTeh": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * {@code DeleteTaskCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class DeleteTaskCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_oneValidIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task[] taskToDelete \u003d new Task[indexes.length];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            taskToDelete[i] \u003d model.getFilteredTaskList().get(indexes[i].getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(indexes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTaskCommand.buildMessage(taskToDelete));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertCommandSuccess(deleteTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_manyValidIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK, INDEX_SECOND_TASK};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task[] taskToDelete \u003d new Task[indexes.length];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            taskToDelete[i] \u003d model.getFilteredTaskList().get(indexes[i].getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(indexes);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTaskCommand.buildMessage(taskToDelete));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertCommandSuccess(deleteTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_oneInvalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {outOfBoundIndex};"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(indexes);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_duplicatedIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK, INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(indexes);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_DUPLICATE_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_manyInvalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex1 \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex2 \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {outOfBoundIndex1, outOfBoundIndex2};"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(indexes);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_oneValidIndexFilteredList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task[] taskToDelete \u003d new Task[indexes.length];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            taskToDelete[i] \u003d model.getFilteredTaskList().get(indexes[i].getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(indexes);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTaskCommand.buildMessage(taskToDelete));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        showNoTask(expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertCommandSuccess(deleteTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_oneInvalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {outOfBoundIndex};"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlanus().getTaskList().size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(indexes);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_mixValidInvalidIndexList_throwsCommandException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK, outOfBoundIndex};"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(indexes);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_mixValidInvalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK, outOfBoundIndex};"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(indexes);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] firstIndex \u003d {INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] secondIndex \u003d {INDEX_SECOND_TASK};"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DeleteTaskCommand deleteFirstCommand \u003d new DeleteTaskCommand(firstIndex);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DeleteTaskCommand deleteSecondCommand \u003d new DeleteTaskCommand(secondIndex);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DeleteTaskCommand deleteFirstCommandCopy \u003d new DeleteTaskCommand(firstIndex);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 26,
      "-": 68,
      "dearvae": 65,
      "MarcTzh": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DURATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_DURATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_DURATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * {@code DeleteTaskCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_oneValidIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        int[] durations \u003d {INDEX_FIRST_DURATION};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Deadline[] tasksToDone \u003d new Deadline[indexes.length];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            tasksToDone[i] \u003d (Deadline) model.getFilteredTaskList().get(indexes[i].getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes, durations);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.buildMessage(tasksToDone));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        expectedModel.markAsDone(tasksToDone, durations);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_manyValidIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK, INDEX_THIRD_TASK};"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        int[] durations \u003d {INDEX_FIRST_DURATION, INDEX_THIRD_DURATION};"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Deadline[] tasksToDone \u003d new Deadline[indexes.length];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            tasksToDone[i] \u003d (Deadline) model.getFilteredTaskList().get(indexes[i].getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes, durations);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.buildMessage(tasksToDone));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        expectedModel.markAsDone(tasksToDone, durations);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_oneInvalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {outOfBoundIndex};"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        int[] durations \u003d {INDEX_FIRST_DURATION};"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes, durations);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_duplicatedIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK, INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        int[] durations \u003d {INDEX_FIRST_DURATION, INDEX_SECOND_DURATION};"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes, durations);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_DUPLICATE_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_incorrectStatusTask_throwsCommandException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_SECOND_TASK};"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        int[] durations \u003d {INDEX_SECOND_DURATION};"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes, durations);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INCORRECT_TASK_STATUS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_manyInvalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex1 \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex2 \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {outOfBoundIndex1, outOfBoundIndex2};"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        int[] durations \u003d {INDEX_FIRST_DURATION, INDEX_SECOND_DURATION};"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes, durations);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_oneValidIndexFilteredList_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        int[] durations \u003d {INDEX_FIRST_DURATION};"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Deadline[] tasksToDone \u003d new Deadline[indexes.length];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            tasksToDone[i] \u003d (Deadline) model.getFilteredTaskList().get(indexes[i].getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes, durations);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.buildMessage(tasksToDone));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        showTaskAtIndex(expectedModel, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        expectedModel.markAsDone(tasksToDone, durations);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_oneInvalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {outOfBoundIndex};"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        int[] durations \u003d {INDEX_SECOND_DURATION};"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlanus().getTaskList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes, durations);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_mixValidInvalidIndexList_throwsCommandException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK, outOfBoundIndex};"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        int[] durations \u003d {INDEX_FIRST_DURATION, INDEX_SECOND_DURATION};"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes, durations);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_mixValidInvalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK, outOfBoundIndex};"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        int[] durations \u003d {INDEX_FIRST_DURATION, INDEX_SECOND_DURATION};"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes, durations);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] firstIndex \u003d {INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] secondIndex \u003d {INDEX_SECOND_TASK};"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        int[] firstDurations \u003d {INDEX_FIRST_DURATION};"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        int[] secondDurations \u003d {INDEX_SECOND_DURATION};"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneFirstCommand \u003d new DoneCommand(firstIndex, firstDurations);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneSecondCommand \u003d new DoneCommand(secondIndex, secondDurations);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(doneFirstCommand.equals(doneFirstCommand));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneFirstCommandCopy \u003d new DoneCommand(firstIndex, firstDurations);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(doneFirstCommand.equals(doneFirstCommandCopy));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(doneFirstCommand.equals(1));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(doneFirstCommand.equals(null));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(doneFirstCommand.equals(doneSecondCommand));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 2,
      "dearvae": 188,
      "MarcTzh": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.EVENT1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.EVENT2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.EVENT3;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindTaskCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class FindTaskCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate firstPredicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        firstPredicate.setKeyword(PREFIX_TITLE, \"first\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate secondPredicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        secondPredicate.setKeyword(PREFIX_TITLE, \"second\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        FindTaskCommand findFirstCommand \u003d new FindTaskCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        FindTaskCommand findSecondCommand \u003d new FindTaskCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertEquals(findFirstCommand, findFirstCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        FindTaskCommand findFirstCommandCopy \u003d new FindTaskCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertEquals(findFirstCommand, findFirstCommandCopy);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertNotEquals(1, findFirstCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertNotEquals(null, findFirstCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertNotEquals(findFirstCommand, findSecondCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        FindTaskCommand command \u003d new FindTaskCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_multipleKeywords_multipleTasksFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 5);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d preparePredicate(\"Developer Assignment Project\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        FindTaskCommand command \u003d new FindTaskCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertEquals(Arrays.asList(DEADLINE1, DEADLINE2, EVENT1, EVENT2, EVENT3), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Parses {@code userInput} into a {@code TaskContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private TaskContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Arrays.asList(userInput.split(\"\\\\s+\")).forEach(input -\u003e predicate.setKeyword(PREFIX_TITLE, input));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 30,
      "-": 43,
      "dearvae": 3,
      "MarcTzh": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListTaskCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class ListTaskCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertCommandSuccess(new ListTaskCommand(), model, ListTaskCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertCommandSuccess(new ListTaskCommand(), model, ListTaskCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 4,
      "-": 29,
      "MarcTzh": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * outside of the DeleteTaskCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * same path through the DeleteTaskCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class DeleteTaskCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private DeleteTaskCommandParser parser \u003d new DeleteTaskCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteTaskCommand(indexes));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void parse_manyValidArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK, INDEX_SECOND_TASK};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseSuccess(parser, \"1 2\", new DeleteTaskCommand(indexes));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_INDEX, DeleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 9,
      "-": 24,
      "dearvae": 8,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_SEARCH_PHRASE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.FindTaskCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class FindTaskCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private FindTaskCommandParser parser \u003d new FindTaskCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"\", FindTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, \"Meet Alice\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_DESCRIPTION, \"play\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_DATE, \"01-01-2020\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_STATUS, \"incomplete\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        FindTaskCommand expectedFindTaskCommand \u003d new FindTaskCommand(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \" title:Meet Alice desc:play date:01-01-2020 status: incomplete\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                expectedFindTaskCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \" \\n title:Meet Alice  \\t desc:play \\t\\t\\t date: \\t 01-01-2020 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                        + \"\\n status:incomplete\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                expectedFindTaskCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void parse_emptyArgs_returnsFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // throw error if argument is empty"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseFailure(parser, \" title:\", MESSAGE_EMPTY_SEARCH_PHRASE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseFailure(parser, \" desc:\", MESSAGE_EMPTY_SEARCH_PHRASE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseFailure(parser, \" status:\", MESSAGE_EMPTY_SEARCH_PHRASE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseFailure(parser, \" date:\", MESSAGE_EMPTY_SEARCH_PHRASE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // one of the attribute is empty"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseFailure(parser, \" title:abc date: desc:edf\", MESSAGE_EMPTY_SEARCH_PHRASE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // space is trimmed. empty spaces also considered empty"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseFailure(parser, \" desc:abc date:  \", MESSAGE_EMPTY_SEARCH_PHRASE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void parse_argsWrongFormat_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // throw error if argument is invalid"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseFailure(parser, \" title:@@\", Title.SEARCH_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseFailure(parser, \" desc:@@\", Description.SEARCH_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseFailure(parser, \" status:comple\", Status.SEARCH_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseFailure(parser, \" date:01-01-202\", DateUtil.SEARCH_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseFailure(parser, \" date:13\", DateUtil.SEARCH_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // one of the attribute is invalid"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseFailure(parser, \" title:abc# date: desc:edf\", Title.SEARCH_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 50,
      "-": 23,
      "dearvae": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.lesson.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"R@te movie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private static final String INVALID_DATE_TIME \u003d \"1-1-2020 12:00\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String INVALID_DATE \u003d \"1-1-2020\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String INVALID_TIME \u003d \"12:0\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"@example\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String VALID_TITLE \u003d \"Rate movie\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private static final String VALID_DATE_TIME \u003d \"01-01-2020 12:00\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String VALID_TIME \u003d \"12:00\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"rachel,example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void parseTitle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void parseTitle_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_TITLE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void parseTitle_validValueWithoutWhitespace_returnsTitle() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(VALID_TITLE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void parseTitle_validValueWithWhitespace_returnsTrimmedTitle() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String titleWithWhitespace \u003d WHITESPACE + VALID_TITLE + WHITESPACE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(titleWithWhitespace));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void parseDateTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateTime((String) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void parseDateTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateTime(INVALID_DATE_TIME));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void parseDateTime_validValueWithoutWhitespace_returnsDateTime() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        DateTime expectedDateTime \u003d new DateTime(VALID_DATE_TIME);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertEquals(expectedDateTime, ParserUtil.parseDateTime(VALID_DATE_TIME));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void parseDateTime_validValueWithWhitespace_returnsTrimmedDateTime() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE_TIME + WHITESPACE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        DateTime expectedDateTime \u003d new DateTime(VALID_DATE_TIME);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertEquals(expectedDateTime, ParserUtil.parseDateTime(dateWithWhitespace));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void parseTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTime((String) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void parseTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTime(INVALID_TIME));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void parseTime_validValueWithoutWhitespace_returnsTime() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        LocalTime expectedTime \u003d new Time(VALID_TIME).value;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(VALID_TIME));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void parseTime_validValueWithWhitespace_returnsTrimmedTime() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String timeWithWhitespace \u003d WHITESPACE + VALID_TIME + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        LocalTime expectedTime \u003d new Time(VALID_TIME).value;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(timeWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 14,
      "-": 114,
      "MarcTzh": 41,
      "GabriellaTeh": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PlanusParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.FindTaskCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.commands.ListTaskCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class PlanusParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final PlanusParser parser \u003d new PlanusParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        DeleteTaskCommand command \u003d (DeleteTaskCommand) parser.parseCommand("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                DeleteTaskCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertEquals(new DeleteTaskCommand(indexes), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void parseCommand_done() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand command \u003d (DoneCommand) parser.parseCommand("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                DoneCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + \":20\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        int[] durations \u003d {20};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertEquals(new DoneCommand(indexes, durations), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"title:foo\", \"desc:bar\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        FindTaskCommand command \u003d (FindTaskCommand) parser.parseCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                FindTaskCommand.COMMAND_WORD + \" \" + String.join(\" \", keywords));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, \"foo\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_DESCRIPTION, \"bar\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertEquals(new FindTaskCommand(predicate), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(parser.parseCommand(ListTaskCommand.COMMAND_WORD) instanceof ListTaskCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(parser.parseCommand(ListTaskCommand.COMMAND_WORD + \" 3\") instanceof ListTaskCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 25,
      "-": 60,
      "dearvae": 10,
      "MarcTzh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.PlanusBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(new Planus(), new Planus(modelManager.getPlanus()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        userPrefs.setPlanusFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        userPrefs.setPlanusFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setPlanusFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPlanusFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setPlanusFilePath_validPath_setsPlanusFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        modelManager.setPlanusFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(path, modelManager.getPlanusFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTask(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void hasTask_taskNotInPlanus_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(modelManager.hasTask(DEADLINE1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void hasTask_taskInPlanus_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        modelManager.addTask(DEADLINE1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(modelManager.hasTask(DEADLINE1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Planus planus \u003d new PlanusBuilder().withTask(DEADLINE1).withTask(DEADLINE2).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus differentPlanus \u003d new Planus();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        modelManager \u003d new ModelManager(planus, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(planus, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different planus -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentPlanus, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, DEADLINE1.getTitle().title);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        modelManager.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(planus, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        differentUserPrefs.setPlanusFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(planus, differentUserPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 4,
      "-": 97,
      "dearvae": 7,
      "MarcTzh": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/PlanusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class PlanusTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final Planus planus \u003d new Planus();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(Collections.emptyList(), planus.getTaskList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e planus.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void resetData_withValidReadOnlyPlanus_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus newData \u003d getTypicalPlanus();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planus.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(newData, planus);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void resetData_withDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Two tasks with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task editedAlice \u003d new DeadlineBuilder(DEADLINE1).withTag(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(DEADLINE1, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        PlanusStub newData \u003d new PlanusStub(newTasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e planus.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e planus.hasTask(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void hasTask_taskNotInPlanus_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(planus.hasTask(DEADLINE1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void hasTask_taskInPlanus_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        planus.addTask(DEADLINE1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(planus.hasTask(DEADLINE1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void hasTask_taskWithSameIdentityFieldsInPlanus_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        planus.addTask(DEADLINE1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task editedAlice \u003d new DeadlineBuilder(DEADLINE1).withTag(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(planus.hasTask(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e planus.getTaskList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * A stub ReadOnlyPlanus whose tasks list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static class PlanusStub implements ReadOnlyPlanus {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        private final ObservableList\u003cLesson\u003e lessons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        private final ObservableList\u003cTask\u003e calendar \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        PlanusStub(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        public ObservableList\u003cTask\u003e getCalendarList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            return calendar;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 7,
      "-": 62,
      "dearvae": 9,
      "MarcTzh": 30,
      "GabriellaTeh": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setPlanusFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPlanusFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "MarcTzh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/CalendarTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.EVENT1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.EVENT2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "public class CalendarTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private final Calendar calendarList \u003d new Calendar();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e calendarList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertFalse(calendarList.contains(EVENT1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.add(EVENT1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertTrue(calendarList.contains(EVENT1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.add(EVENT1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        Task editedAlice \u003d new EventBuilder(EVENT1).withTag(VALID_TAG)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertTrue(calendarList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e calendarList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.add(EVENT1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e calendarList.add(EVENT1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e calendarList.setCalendarTask(null, EVENT1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e calendarList.setCalendarTask(EVENT1, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e calendarList.setCalendarTask(EVENT1, EVENT1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.add(EVENT1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.setCalendarTask(EVENT1, EVENT1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        Calendar expectedCalendarList \u003d new Calendar();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        expectedCalendarList.add(EVENT1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertEquals(expectedCalendarList, calendarList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void setTask_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.add(EVENT1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        Task editedAlice \u003d new EventBuilder(EVENT1).withTag(VALID_TAG)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.setCalendarTask(EVENT1, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        Calendar expectedCalendarList \u003d new Calendar();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        expectedCalendarList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertEquals(expectedCalendarList, calendarList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void setTask_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.add(EVENT1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.setCalendarTask(EVENT1, EVENT2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        Calendar expectedCalendarList \u003d new Calendar();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        expectedCalendarList.add(EVENT2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertEquals(expectedCalendarList, calendarList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.add(EVENT1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.add(EVENT2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e calendarList.setCalendarTask(EVENT1, EVENT2));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e calendarList.remove((Task) null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void remove_nullTasks_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e calendarList.remove((Task[]) null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e calendarList.remove(EVENT1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.add(EVENT1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.remove(EVENT1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        Calendar expectedCalendarList \u003d new Calendar();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertEquals(expectedCalendarList, calendarList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void setTask_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e calendarList.setCalendarList((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void setTask_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.add(EVENT1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(EVENT2);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        calendarList.setCalendarList(taskList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        Calendar expectedCalendarList \u003d new Calendar();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        expectedCalendarList.add(EVENT2);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertEquals(expectedCalendarList, calendarList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e calendarList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 1,
      "GabriellaTeh": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/LessonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_CS2103T;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class LessonTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Title title \u003d new Title(VALID_TITLE_CS2103T);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Description description \u003d new Description(VALID_DESC_CS2103T);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        DayOfWeek day \u003d DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        LocalTime startTime \u003d new Time(VALID_START_TIME_CS2103T).value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        LocalTime endTime \u003d new Time(VALID_END_TIME_CS2103T).value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        LocalDate startDate \u003d DateUtil.toLocalDate(VALID_START_DATE_CS2103T);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        LocalDate endDate \u003d DateUtil.toLocalDate(VALID_END_DATE_CS2103T);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        LocalTime differentStartTime \u003d new Time(\"10:00\").value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Tag tag \u003d new Tag(VALID_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Description differentDescription \u003d new Description(\"Different description\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Title differentTitle \u003d new Title(\"CS1101S Lecture\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        DayOfWeek differentDay \u003d DayOfWeek.FRIDAY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Lesson lesson \u003d new Lesson(title, tag, description, day, startTime, endTime, startDate, endDate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Lesson lessonWithDifferentDescription \u003d new Lesson(title, tag, differentDescription, day, startTime,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                endTime, startDate, endDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Lesson lessonWithDifferentTitle \u003d new Lesson(differentTitle, tag, description, day, startTime, endTime,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                startDate, endDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Lesson lessonWithStartTime \u003d new Lesson(title, tag, description, day, differentStartTime, endTime,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                startDate, endDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Lesson lessonWithDifferentDay \u003d new Lesson(title, tag, description, differentDay, startTime, endTime,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                startDate, endDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(lesson.isSameLesson(lesson));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(lesson.isSameLesson(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different description -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(lesson.isSameLesson(lessonWithDifferentDescription));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(lesson.isSameLesson(lessonWithDifferentTitle));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // same title, different start time -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(lesson.isSameLesson(lessonWithStartTime));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        //same attributes, different day -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(lesson.isSameLesson(lessonWithDifferentDay));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "dearvae": 11,
      "MarcTzh": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/TimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Time(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Time.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Time.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Time.isValidTime(\"1200\")); //no colon"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Time.isValidTime(\"24:00\")); //wrong hour"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Time.isValidTime(\"12:60\")); //wrong minute"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Time.isValidTime(\"1:00\")); //incomplete hour"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Time.isValidTime(\"12:0\")); //incomplete minute"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // valid time"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(Time.isValidTime(\"00:00\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(Time.isValidTime(\"23:59\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcTzh": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void isValidDateTime() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // null dateTime number"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // invalid dateTime numbers"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"\")); // empty string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"12-13-2000 12:00\")); // month greater than 12"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"date\")); // non-numeric"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"32-01-1200\")); // day greater than 31"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"12-12-2020\")); // no time"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"5-6-2020 12:00\")); // no leading zero for day and month"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // valid dateTime numbers"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"05-09-2020 18:00\")); // date and month with leading zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"12-12-2020 12:00\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabriellaTeh": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // blank description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(Description.isValidDescription(\"peterjack@-\")); // invalid symbols used."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(Description.isValidDescription(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // invalid symbols used."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(Description.isValidDescription(\" fdsjkfsd\")); // start with space."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(Description.isValidDescription(\"amy,example.com\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(Description.isValidDescription(\"abc\")); // minimal"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(Description.isValidDescription(\"testlocalhost\")); // alphabets only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(Description.isValidDescription(\"123  145\")); // white space allowed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(Description.isValidDescription(\"sadf !!!!\")); // exclamation mark allowed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(Description.isValidDescription(\"????????sdfsdf ?????adsfaf???\")); // question mark allowed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(Description.isValidDescription(\"this is a trolling test case.\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                + \"Happy debugging! Are you enjoying it?\")); // long description"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 45,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class TaskContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate firstPredicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        firstPredicateKeywordList.forEach(word -\u003e firstPredicate.setKeyword(PREFIX_TITLE, word));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate secondPredicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        secondPredicateKeywordList.forEach(word -\u003e secondPredicate.setKeyword(PREFIX_TITLE, word));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate firstPredicateCopy \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        firstPredicateKeywordList.forEach(word -\u003e firstPredicateCopy.setKeyword(PREFIX_TITLE, word));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void test_findMatchedKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, \"Play\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(predicate.test(new DeadlineBuilder().withTitle(\"Play Games\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_DESCRIPTION, \"League of Legends\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(predicate.test(new DeadlineBuilder().withTitle(\"Play\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                .withDescription(\"League of Legends\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // status keywords match status exactly"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_STATUS, \"incomplete\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(predicate.test(new DeadlineBuilder().withIncompleteStatus().build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_STATUS, \"complete\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(predicate.test(new DeadlineBuilder().withCompleteStatus().build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, \"mEeT aLiCe\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(predicate.test(new DeadlineBuilder().withTitle(\"Meet Alice\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void test_findMatchedKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(predicate.test(new DeadlineBuilder().withTitle(\"Alice\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_DATE_TIME, \"01-01-2020 19:00\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(predicate.test(new DeadlineBuilder().withDeadlineDateTime(\"01-02-2019 18:00\").build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // title Keywords does not match title"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, \"01-01-2020 12:00\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(predicate.test(new DeadlineBuilder().withTitle(\"Alice\").withDeadlineDateTime(\"01-01-2020 12:00\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .withDescription(\"alice,email.com\").build()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // type Keywords does not match tag"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TAG, \"CS2040\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(predicate.test(new DeadlineBuilder().withTag(\"MA1521\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .withDescription(\"alice,email.com\").build()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // desc Keywords does not match description"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_DESCRIPTION, \"play outside\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(predicate.test(new DeadlineBuilder().withDeadlineDateTime(\"01-01-2020 12:00\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .withDescription(\"alice,email.com\").build()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // status Keywords does not match status"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_STATUS, \"complet\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(predicate.test(new DeadlineBuilder().withDeadlineDateTime(\"01-01-2020 12:00\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .withDescription(\"alice,email.com\").withCompleteStatus().build()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // test with multiple repeated attributes"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, \"assignment\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, \"borrow\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(predicate.test(new DeadlineBuilder().withTitle(\"Submit assignment\").build()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(predicate.test(new DeadlineBuilder().withTitle(\"borrow\").build()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(predicate.test(new DeadlineBuilder().withTitle(\"random thing\").build()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // test with multiple distinct attributes"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, \"assignment\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(predicate.test(new DeadlineBuilder().withTitle(\"submit assignment\").build()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_DATE, \"01-01-2020\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(predicate.test(new DeadlineBuilder().withTitle(\"submit assignment\").build()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(predicate.test(new DeadlineBuilder().withTitle(\"random\").build()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 57,
      "dearvae": 20,
      "MarcTzh": 50,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.EVENT_TEST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task task \u003d new DeadlineBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(DEADLINE1.isSameTask(DEADLINE1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.isSameTask(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // different dateTime and description -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task editedAlice \u003d new DeadlineBuilder(DEADLINE1).withDeadlineDateTime(VALID_DATE_TIME_BOB)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                                                 .withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                                                 .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        editedAlice \u003d new DeadlineBuilder(DEADLINE1).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // same title, same dateTime, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        editedAlice \u003d new DeadlineBuilder(DEADLINE1).withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                .withTag(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(DEADLINE1.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // same title, same dateTime, same type, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        editedAlice \u003d new DeadlineBuilder(DEADLINE1).withTag(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(DEADLINE1.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task aliceCopy \u003d new DeadlineBuilder(DEADLINE1).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(DEADLINE1.equals(aliceCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(DEADLINE1.equals(DEADLINE1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.equals(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.equals(EVENT_TEST));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task editedAlice \u003d new DeadlineBuilder(DEADLINE1).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.equals(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        editedAlice \u003d new DeadlineBuilder(DEADLINE1).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.equals(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        editedAlice \u003d new DeadlineBuilder(DEADLINE1).withTag(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 4,
      "-": 40,
      "dearvae": 26,
      "MarcTzh": 7,
      "GabriellaTeh": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Title.isValidTitle(\"sleep*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // valid title"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(Title.isValidTitle(\"do homework\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Do 2nd lecture\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Do Homework\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Remember to do homework when I get home\")); // long titles"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcTzh": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/UniqueTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.EVENT_TEST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(uniqueTaskList.contains(DEADLINE1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        uniqueTaskList.add(DEADLINE1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(uniqueTaskList.contains(DEADLINE1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        uniqueTaskList.add(DEADLINE1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task editedAlice \u003d new DeadlineBuilder(DEADLINE1).withTag(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        uniqueTaskList.add(DEADLINE1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.add(DEADLINE1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(null, DEADLINE1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(DEADLINE1, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.setTask(DEADLINE1, DEADLINE1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        uniqueTaskList.add(DEADLINE1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        uniqueTaskList.setTask(DEADLINE1, DEADLINE1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        expectedUniqueTaskList.add(DEADLINE1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        uniqueTaskList.add(DEADLINE1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task editedAlice \u003d new DeadlineBuilder(DEADLINE1).withTag(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        uniqueTaskList.setTask(DEADLINE1, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedUniqueTaskList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        uniqueTaskList.add(DEADLINE1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        uniqueTaskList.setTask(DEADLINE1, EVENT_TEST);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        expectedUniqueTaskList.add(EVENT_TEST);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        uniqueTaskList.add(DEADLINE1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        uniqueTaskList.add(EVENT_TEST);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTask(DEADLINE1, EVENT_TEST));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.remove((Task) null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void remove_nullTasks_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.remove((Task[]) null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.remove(DEADLINE1));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        uniqueTaskList.add(DEADLINE1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        uniqueTaskList.remove(DEADLINE1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_nullUniqueTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((UniqueTaskList) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_uniqueTaskList_replacesOwnListWithProvidedUniqueTaskList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        uniqueTaskList.add(DEADLINE1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        expectedUniqueTaskList.add(EVENT_TEST);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        uniqueTaskList.add(DEADLINE1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(EVENT_TEST);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        expectedUniqueTaskList.add(EVENT_TEST);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(DEADLINE1, DEADLINE1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTasks(listWithDuplicateTasks));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            -\u003e uniqueTaskList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 86,
      "dearvae": 40,
      "MarcTzh": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/deadline/DeadlineDateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DeadlineDateTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeadlineDateTime(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void constructor_invalidDateTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String invalidDeadlineDateTime \u003d \"12-30-2020 12:12\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DeadlineDateTime(invalidDeadlineDateTime));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void isValidDateTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // null dateTime number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DeadlineDateTime.isValidDateTime(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // invalid dateTime numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DeadlineDateTime.isValidDateTime(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DeadlineDateTime.isValidDateTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DeadlineDateTime.isValidDateTime(\"12-13-2000 12:00\")); // month greater than 12"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DeadlineDateTime.isValidDateTime(\"date\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DeadlineDateTime.isValidDateTime(\"32-01-1200\")); // day greater than 31"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DeadlineDateTime.isValidDateTime(\"12-12-2020\")); // no time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DeadlineDateTime.isValidDateTime(\"5-6-2020 12:00\")); // no leading zero for day and month"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // valid dateTime numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(DeadlineDateTime.isValidDateTime(\"05-09-2020 18:00\")); // date and month with leading zero"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(DeadlineDateTime.isValidDateTime(\"12-12-2020 12:00\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/deadline/DeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.EVENT_TEST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(DEADLINE1.isSameTask(DEADLINE1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.isSameTask(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Deadline editedAlice \u003d new DeadlineBuilder(DEADLINE1).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // same title, same dateTime, same type, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        editedAlice \u003d new DeadlineBuilder(DEADLINE1).withTag(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(DEADLINE1.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task aliceCopy \u003d new DeadlineBuilder(DEADLINE1).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(DEADLINE1.equals(aliceCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(DEADLINE1.equals(DEADLINE1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.equals(5));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.equals(EVENT_TEST));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task editedAlice \u003d new DeadlineBuilder(DEADLINE1).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.equals(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        editedAlice \u003d new DeadlineBuilder(DEADLINE1).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.equals(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different tag -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        editedAlice \u003d new DeadlineBuilder(DEADLINE1).withTag(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DEADLINE1.equals(editedAlice));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 64,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/deadline/DoneDateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DoneDateTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DoneDateTime(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void constructor_invalidDateTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String invalidDoneDateTime \u003d \"12-30-2020 12:12\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DoneDateTime(invalidDoneDateTime));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void isValidDateTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // null dateTime number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DoneDateTime.isValidDateTime(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // invalid dateTime numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DoneDateTime.isValidDateTime(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DoneDateTime.isValidDateTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DoneDateTime.isValidDateTime(\"12-13-2000 12:00\")); // month greater than 12"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DoneDateTime.isValidDateTime(\"date\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DoneDateTime.isValidDateTime(\"32-01-1200\")); // day greater than 31"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DoneDateTime.isValidDateTime(\"12-12-2020\")); // no time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(DoneDateTime.isValidDateTime(\"5-6-2020 12:00\")); // no leading zero for day and month"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // valid dateTime numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(DoneDateTime.isValidDateTime(\"05-09-2020 18:00\")); // date and month with leading zero"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(DoneDateTime.isValidDateTime(\"12-12-2020 12:00\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/deadline/DurationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DurationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        int invalidDuration \u003d -10;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Duration(invalidDuration));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // invalid duration"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(Duration.isValidDuration(-10)); // negative number"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // valid duration"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(Duration.isValidDuration(Duration.NULL_VALUE)); // default value"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(Duration.isValidDuration(120)); // positive numbers only"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/event/EndDateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class EndDateTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EndDateTime(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void constructor_invalidDateTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String invalidEndDateTime \u003d \"12-30-2020 12:12\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EndDateTime(invalidEndDateTime));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void isValidDateTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // null dateTime number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EndDateTime.isValidDateTime(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // invalid dateTime numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(EndDateTime.isValidDateTime(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(EndDateTime.isValidDateTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(EndDateTime.isValidDateTime(\"12-13-2000 12:00\")); // month greater than 12"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(EndDateTime.isValidDateTime(\"date\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(EndDateTime.isValidDateTime(\"32-01-1200\")); // day greater than 31"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(EndDateTime.isValidDateTime(\"12-12-2020\")); // no time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(EndDateTime.isValidDateTime(\"5-6-2020 12:00\")); // no leading zero for day and month"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // valid dateTime numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(EndDateTime.isValidDateTime(\"05-09-2020 18:00\")); // date and month with leading zero"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(EndDateTime.isValidDateTime(\"12-12-2020 12:00\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/event/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/event/StartDateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class StartDateTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StartDateTime(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void constructor_invalidDateTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String invalidStartDateTime \u003d \"12-30-2020 12:12\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new StartDateTime(invalidStartDateTime));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void isValidDateTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // null dateTime number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StartDateTime.isValidDateTime(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // invalid dateTime numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(StartDateTime.isValidDateTime(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(StartDateTime.isValidDateTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(StartDateTime.isValidDateTime(\"12-13-2000 12:00\")); // month greater than 12"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(StartDateTime.isValidDateTime(\"date\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(StartDateTime.isValidDateTime(\"32-01-1200\")); // day greater than 31"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(StartDateTime.isValidDateTime(\"12-12-2020\")); // no time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(StartDateTime.isValidDateTime(\"5-6-2020 12:00\")); // no leading zero for day and month"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // valid dateTime numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(StartDateTime.isValidDateTime(\"05-09-2020 18:00\")); // date and month with leading zero"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(StartDateTime.isValidDateTime(\"12-12-2020 12:00\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedDeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDeadline.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class JsonAdaptedDeadlineTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"R@te movie\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private static final String INVALID_DATE_TIME \u003d \"1-1-2020 12:00\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"@do homework\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#CS\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private static final String VALID_TITLE \u003d DEADLINE1.getTitle().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private static final String VALID_DATE_TIME \u003d DEADLINE1.getDeadlineDateTime().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d DEADLINE1.getDescription().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private static final String VALID_TAG \u003d DEADLINE1.getTag().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private static final String VALID_STATUS \u003d ((Deadline) DEADLINE1).getStatus().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void toModelType_validTaskDetails_returnsTask() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        JsonAdaptedDeadline deadline \u003d new JsonAdaptedDeadline(DEADLINE1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertEquals(DEADLINE1, deadline.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        JsonAdaptedDeadline deadline \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new JsonAdaptedDeadline(INVALID_TITLE, VALID_DATE_TIME, VALID_DESCRIPTION, VALID_DATE_TIME, 1,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                        VALID_TAG, VALID_STATUS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, deadline::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        JsonAdaptedDeadline task \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new JsonAdaptedDeadline(null, VALID_DATE_TIME, VALID_DESCRIPTION, VALID_DATE_TIME, 1,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                        VALID_TAG, VALID_STATUS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void toModelType_invalidDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        JsonAdaptedDeadline task \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new JsonAdaptedDeadline(VALID_TITLE, INVALID_DATE_TIME, VALID_DESCRIPTION, VALID_DATE_TIME, 1,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                        VALID_TAG, VALID_STATUS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String expectedMessage \u003d DateUtil.DATE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        JsonAdaptedDeadline task \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new JsonAdaptedDeadline(VALID_TITLE, VALID_DATE_TIME, INVALID_DESCRIPTION,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                        VALID_DATE_TIME, 1, VALID_TAG, VALID_STATUS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        JsonAdaptedDeadline task \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new JsonAdaptedDeadline(VALID_TITLE, VALID_DATE_TIME, null, VALID_DATE_TIME, 1,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                        VALID_TAG, VALID_STATUS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void toModelType_invalidTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        JsonAdaptedDeadline task \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new JsonAdaptedDeadline(VALID_TITLE, VALID_DATE_TIME, null, VALID_DATE_TIME, 1,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                        INVALID_TAG, VALID_STATUS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertThrows(IllegalValueException.class, task::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "dearvae": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonPlanusStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE5;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.EVENT4;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class JsonPlanusStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPlanusStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void readPlanus_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPlanus(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPlanus\u003e readPlanus(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new JsonPlanusStorage(Paths.get(filePath)).readPlanus(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(readPlanus(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPlanus(\"notJsonFormatPlanus.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void readPlanus_invalidTaskPlanus_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPlanus(\"invalidTaskPlanus.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void readPlanus_invalidAndValidTaskPlanus_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPlanus(\"invalidAndValidTaskPlanus.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void readAndSavePlanus_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempPlanus.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus original \u003d getTypicalPlanus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonPlanusStorage jsonPlanusStorage \u003d new JsonPlanusStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        jsonPlanusStorage.savePlanus(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ReadOnlyPlanus readBack \u003d jsonPlanusStorage.readPlanus(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(original, new Planus(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        original.addTask(DEADLINE5);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        original.removeTask(DEADLINE1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        jsonPlanusStorage.savePlanus(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        readBack \u003d jsonPlanusStorage.readPlanus(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(original, new Planus(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        original.addTask(EVENT4);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        jsonPlanusStorage.savePlanus(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        readBack \u003d jsonPlanusStorage.readPlanus().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(original, new Planus(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void savePlanus_nullPlanus_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePlanus(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Saves {@code planus} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private void savePlanus(ReadOnlyPlanus planus, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            new JsonPlanusStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                    .savePlanus(planus, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void savePlanus_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePlanus(new Planus(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 4,
      "dearvae": 3,
      "MarcTzh": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializablePlanusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class JsonSerializablePlanusTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePlanusTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTaskPlanus.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final Path INVALID_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskPlanus.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskPlanus.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void toModelType_typicalTaskFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonSerializablePlanus dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TASKS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                JsonSerializablePlanus.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus planusFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus typicalTasksPlanus \u003d TypicalTasks.getTypicalPlanus();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(planusFromFile, typicalTasksPlanus);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonSerializablePlanus dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TASKS_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                JsonSerializablePlanus.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void toModelType_duplicateTask_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonSerializablePlanus dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TASK_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                JsonSerializablePlanus.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePlanus.MESSAGE_DUPLICATE_TASK,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "MarcTzh": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        userPrefs.setPlanusFilePath(Paths.get(\"planus.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonPlanusStorage planusStorage \u003d new JsonPlanusStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        storageManager \u003d new StorageManager(planusStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void planusReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "         * {@link JsonPlanusStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPlanusStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus original \u003d getTypicalPlanus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        storageManager.savePlanus(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ReadOnlyPlanus retrieved \u003d storageManager.readPlanus().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(original, new Planus(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void getPlanusFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertNotNull(storageManager.getPlanusFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "MarcTzh": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeadlineBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.DeadlineDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.DoneDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Status;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DeadlineBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"School work\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String DEFAULT_DEADLINE_DATE_TIME \u003d \"01-01-2020 12:00\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"6 midterms next week.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String DEFAULT_DONE_DATE_TIME \u003d \"02-01-2020 12:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final int DEFAULT_DURATION \u003d -1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final boolean DEFAULT_STATUS \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"CS2100\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private DeadlineDateTime deadlineDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private DoneDateTime doneDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Creates a {@code TaskBuilder} with the default details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        deadlineDateTime \u003d new DeadlineDateTime(DEFAULT_DEADLINE_DATE_TIME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        doneDateTime \u003d new DoneDateTime(DEFAULT_DONE_DATE_TIME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        tag \u003d new Tag(DEFAULT_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        status \u003d new Status(DEFAULT_STATUS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        duration \u003d new Duration(DEFAULT_DURATION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineBuilder(Deadline deadlineToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        title \u003d deadlineToCopy.getTitle();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        deadlineDateTime \u003d deadlineToCopy.getDeadlineDateTime();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        description \u003d deadlineToCopy.getDescription();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        doneDateTime \u003d deadlineToCopy.getDoneDateTime();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        tag \u003d deadlineToCopy.getTag();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        status \u003d deadlineToCopy.getStatus();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        duration \u003d deadlineToCopy.getDuration();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code Title} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Task} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineBuilder withTag(String tag) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.tag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code Type} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineBuilder withDeadlineDateTime(String deadlineDateTime) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.deadlineDateTime \u003d new DeadlineDateTime(deadlineDateTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code dateTime} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineBuilder withDoneDateTime(String doneDateTime) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.doneDateTime \u003d new DoneDateTime(doneDateTime);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Task} that we are building to be default DateTime."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Simulates the situation that the task is created without a DateTime field."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineBuilder withNullDeadlineDateTime() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.deadlineDateTime \u003d DeadlineDateTime.createNullDeadlineDateTime();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Task} that we are building to be default DateTime."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Simulates the situation that the task is created without a DateTime field."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineBuilder withNullDoneDateTime() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.doneDateTime \u003d DoneDateTime.createNullDoneDateTime();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code Description} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code Description} of the {@code Task} that we are building to be default description."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Simulates the situation that the task is created without a description field."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineBuilder withDefaultDescription() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.description \u003d Description.defaultDescription();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code Status} of the {@code Deadline} that we are building to be complete status."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Simulates the situation that the deadline is first been created."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineBuilder withCompleteStatus() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.status \u003d Status.createCompleteStatus();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code Status} of the {@code Deadline} that we are building to be incomplete status."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Simulates the situation that the deadline is first been created."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineBuilder withIncompleteStatus() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.status \u003d Status.createIncompleteStatus();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.duration \u003d Duration.createNullDuration();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code Status} of the {@code Task}  that we are building."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DeadlineBuilder withDuration(int duration) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.duration \u003d new Duration(duration);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public Deadline build() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new Deadline(title, deadlineDateTime, description, tag, status, duration, doneDateTime);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 150,
      "MarcTzh": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.EndDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.StartDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"School work\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String DEFAULT_START_DATE_TIME \u003d \"01-01-2020 12:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String DEFAULT_END_DATE_TIME \u003d \"01-01-2020 12:00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"6 midterms next week.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final boolean DEFAULT_ISLESSON \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"CS1101S\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private StartDateTime startDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private EndDateTime endDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private boolean isLesson;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Creates a {@code TaskBuilder} with the default details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        startDateTime \u003d new StartDateTime(DEFAULT_START_DATE_TIME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        endDateTime \u003d new EndDateTime(DEFAULT_END_DATE_TIME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        isLesson \u003d DEFAULT_ISLESSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        tag \u003d new Tag(DEFAULT_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public EventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        title \u003d eventToCopy.getTitle();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        startDateTime \u003d eventToCopy.getStartDateTime();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        endDateTime \u003d eventToCopy.getEndDateTime();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        description \u003d eventToCopy.getDescription();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        isLesson \u003d eventToCopy.isLesson();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        tag \u003d eventToCopy.getTag();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code Title} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public EventBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Sets the {@code Tag} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public EventBuilder withTag(String tag) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.tag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code Type} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public EventBuilder withStartDateTime(String startDateTime) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.startDateTime \u003d new StartDateTime(startDateTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code dateTime} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public EventBuilder withEndDateTime(String endDateTime) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.endDateTime \u003d new EndDateTime(endDateTime);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code Description} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public EventBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code Description} of the {@code Task} that we are building to be default description."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Simulates the situation that the task is created without a description field."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public EventBuilder withDefaultDescription() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.description \u003d Description.defaultDescription();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code Status} of the {@code Deadline} that we are building to be incomplete status."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Simulates the situation that the deadline is first been created."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public EventBuilder withNotALesson() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.isLesson \u003d false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new Event(title, startDateTime, endDateTime, description, tag, isLesson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 106,
      "MarcTzh": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PlanusBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * A utility class to help with building PlaNus objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " *     {@code Planus planus \u003d new PlanusBuilder().withTask(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class PlanusBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Planus planus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public PlanusBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planus \u003d new Planus();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public PlanusBuilder(Planus planus) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.planus \u003d planus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Adds a new {@code Task} to the {@code Planus} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public PlanusBuilder withTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planus.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Planus build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcTzh": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + \"  \\\"title\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String TITLE_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static String getTitleTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return TITLE_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        title \u003d getTitleTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "MarcTzh": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the middle index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the last index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the task in the {@code model}\u0027s task list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static Task getTask(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "MarcTzh": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final int INDEX_FIRST_DURATION \u003d 10;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final int INDEX_SECOND_DURATION \u003d 20;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final int INDEX_THIRD_DURATION \u003d 30;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "dearvae": 3,
      "MarcTzh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.deadline.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final Deadline DEADLINE1 \u003d new DeadlineBuilder().withTitle(\"Submit Developer Guide\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withDescription(\"Submit through luminus\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withDeadlineDateTime(\"01-01-2020 12:00\").withIncompleteStatus()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withTag(\"CS2103T\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final Deadline DEADLINE2 \u003d new DeadlineBuilder().withTitle(\"Assignment 3\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withDeadlineDateTime(\"02-02-2020 12:59\").withTag(\"CS2102\").withCompleteStatus()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withDuration(20).withDescription(\"important\").withDoneDateTime(\"24-10-2020 04:07\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final Deadline DEADLINE3 \u003d new DeadlineBuilder().withTitle(\"GEQ Readings\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withNullDeadlineDateTime().withDescription(\"15 pages reading\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withIncompleteStatus().withTag(\"GEQ1000\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final Deadline DEADLINE4 \u003d new DeadlineBuilder().withTitle(\"Grade Mission\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withDeadlineDateTime(\"04-04-2020 12:00\").withIncompleteStatus()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withDescription(\"grading all student mission\").withTag(\"CS1101S\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final Event EVENT1 \u003d new EventBuilder().withTitle(\"Project meeting\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withStartDateTime(\"05-05-2020 12:00\").withEndDateTime(\"05-05-2020 14:00\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withDescription(\"discuss v1.3 content\").withTag(\"CS2103T\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final Event EVENT2 \u003d new EventBuilder().withTitle(\"Project meeting2\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withStartDateTime(\"05-05-2020 14:00\").withEndDateTime(\"05-05-2020 16:00\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withDescription(\"discuss project database diagram\").withTag(\"CS2102\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final Event EVENT3 \u003d new EventBuilder().withTitle(\"Project meeting3\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withStartDateTime(\"05-05-2020 18:00\").withEndDateTime(\"05-05-2020 20:00\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withDescription(\"discuss v1.3 content\").withTag(\"CS2103T\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final Deadline DEADLINE5 \u003d new DeadlineBuilder().withTitle(\"Assignment 10\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withDeadlineDateTime(\"02-02-2020 12:59\").withTag(\"CS2102\").withCompleteStatus().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final Event EVENT4 \u003d new EventBuilder().withTitle(\"Project meeting 2020\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withStartDateTime(\"05-05-2020 12:00\").withEndDateTime(\"05-05-2020 14:00\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withDescription(\"dicuss v1.3 content\").withTag(\"CS2103T\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final Deadline DEADLINE_TEST \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            .withTitle(VALID_TITLE_AMY).withDeadlineDateTime(VALID_DATE_TIME_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_AMY).withTag(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final Event EVENT_TEST \u003d new EventBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withStartDateTime(VALID_DATE_TIME_BOB).withEndDateTime(VALID_DATE_TIME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_BOB).withTag(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns an {@code Planus} with all the typical tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static Planus getTypicalPlanus() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus ab \u003d new Planus();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            ab.addTask(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DEADLINE1, DEADLINE2, DEADLINE3, DEADLINE4, EVENT1, EVENT2, EVENT3));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 4,
      "-": 25,
      "dearvae": 35,
      "GabriellaTeh": 2,
      "MarcTzh": 14
    }
  }
]
