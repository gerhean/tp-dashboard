[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "# CANdidates"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T17-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T17-3/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T17-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T17-3/tp)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "CANdidates is a powerful contact management application optimised for job recruiters; a brownfield project based on [Address Book Level-3](https://se-education.org/addressbook-level3/)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "While it has a Graphics User Interface (GUI). most of the user interactions happen using a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Job Recruiters can:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* Track candidates according to which job listing they are interested in"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* Centralised and categorised relevant contacts of all candidates"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* Reduce the hassle of having to look for applicants repeatedly on different platforms for each new job posting."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "#### Quick Links"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* [User Guide](https://ay2021s1-cs2103t-t17-3.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* [Developer Guide](https://ay2021s1-cs2103t-t17-3.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* [About Us](https://ay2021s1-cs2103t-t17-3.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "#### Acknowledgements"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 1,
      "raythx98": 21,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    implementation group: \u0027commons-validator\u0027, name: \u0027commons-validator\u0027, version:\u00271.7\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    archiveName \u003d \u0027Candidates.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": "run {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 1,
      "BreadPeanutButter": 2,
      "raythx98": 2,
      "-": 73
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "We are a CS2103T project team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Toh Hong Xian"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cimg src\u003d\"images/raythx98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "[[github](https://github.com/raythx98)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "[[portfolio](team/raythx98.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* Responsibilities: Deliverables and Deadlines"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Lee Joon Jie"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cimg src\u003d\"images/breadpeanutbutter.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "[[github](http://github.com/BreadPeanutButter)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "[[portfolio](team/breadpeanutbutter.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* Responsibilities: Code Quality"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Germaine Tan"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cimg src\u003d\"images/g-erm.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "[[github](http://github.com/g-erm)] [[portfolio](team/g-erm.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Nigel Ng"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cimg src\u003d\"images/vangoghhh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "[[github](http://github.com/vanGoghhh)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "[[portfolio](team/vangoghhh.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Amelia Tan"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cimg src\u003d\"images/ameliatjy.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "[[github](http://github.com/ameliatjy)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "[[portfolio](team/ameliatjy.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* Responsibilities: Scheduling and Tracking"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 27,
      "-": 32
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": "CANdidates is an open source, brownfield project on the existing [Address book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": " Level-3](https://se-education.org/addressbook-level3/). If you are ready to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": " contribute to this [project](https://github.com/AY2021S1-CS2103T-T17-3/tp),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": " create a pull request [here](https://github.com/AY2021S1-CS2103T-T17-3/tp/pulls)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "## CANdidates User Guide"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "1. [Setting up, getting started](#setting-up-getting-started)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "1. [Design](#design)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Architecture](#architecture)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [User Interface](#ui-component)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Logic](#logic-component)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Model](#model-component)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Storage](#storage-component)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Common Classes](#common-classes)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "1. [Implementation](#implementation)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Add feature](#implemented-add-feature)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Edit feature](#implemented-edit-feature)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [List feature](#implemented-list-feature)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Sort feature](#implemented-sort-feature)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Find feature](#implemented-find-feature)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "1. [Proposed features](#proposed-features)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Undo/Redo feature](#proposed-undoredo-feature)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "         1. [Proposed Implementation](#proposed-implementation)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "         1. [Design Consideration](#design-consideration)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "             1. [How it executes](#aspect-how-undo--redo-executes)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Data Archiving](#proposed-data-archiving)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "1. [Documentation, Logging, Testing, Configuration, Dev-Ops](#documentation-logging-testing-configuration-dev-ops)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "1. [Appendix: Requirements](#appendix-requirements)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Product Scope](#product-scope)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [User Stories](#user-stories)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Use Cases](#use-cases)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "         1. [Delete a Candidate](#use-case-delete-a-candidate)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "         1. [Add a Candidate](#use-case-add-a-candidate)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "         1. [Edit a Candidate](#use-case-edit-a-candidate)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "         1. [Clear all Candidates](#use-case-clear-all-entries)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Non-Functional Requirements](#non-functional-requirements)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Glossary](#glossary)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": "1. [Appendix: Instructions for Manual Testing](#appendix-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Launch and Shutdown](#launch-and-shutdown)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Deleting a Person](#deleting-a-person)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-erm"
        },
        "content": "\u003cimg src\u003d\"images/Architecture.png\" width\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-erm"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete can 1`."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "g-erm"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"600\" /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` and an unmodifiable `ObservableList\u003cJob\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to these lists so that the UI automatically updates when the data in the lists change."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* does not depend on any of the other three components. \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The Model class diagram shown above omits certain details due to space constraints, namely the classes in the Information Package "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                                                                             that Person and Job hold reference to. Instead, the omitted details have been extracted and are shown here: \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "![InformationClassDiagram](images/InformationClassDiagram.png)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* Implements both `PersonAddressBookStorage` and `JobAddressBookStorage`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* can save `PersonAddressBook` data and `JobAddressBook` data in json format and read it back."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* `JsonPersonAddressBookStorage` and `JsonJobAddressBookStorage` is reponsible for saving the datas in json format."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raythx98"
        },
        "content": "### \\[Implemented] Add feature"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raythx98"
        },
        "content": "The Add feature exists for editing candidates, using `add can`, and jobs by using `add job`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Both implemented add mechanisms are facilitated by `ModelManager`. They both implement `Model` and contain `FilteredList` of filtered `Person` and filtered `Job`. `FilteredList` is a subclass of `ObservableList`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* `ModelManager#hasPerson(Person person)` —  Check whether the same person exist in the FilteredList of persons using the `equals` method of `Persons`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* `ModelManager#addPerson(Person person)` —  Adds the person into the FilteredList of persons."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* `ModelManager#hasJob(Job job)` —  Check whether the same job exist in the FilteredList of jobs using the `equals` method of `Jobs`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* `ModelManager#addJob(Job job)` —  Adds the job into the FilteredList of jobs."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Given below is an example usage scenario and how the add mechanism behaves at each step. We will show the example for person, but the scenario for jobs are mostly similar"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Step 1. The user launches the application for the first time. The `FilteredList` will be initialised with the `UniquePersonList` from `personAddressBook` which contains a list of candidates."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Step 2. The user executes `add can n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 exp/5 doa/15-10-20` to add a candidate with `Name` John, `Phone` 98765432, `Email` johnd@example.com, `Address` John street, block 123, #01-01, `Experience` 5 and `Date` 15-10-20."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Step 3. The method `AddressBookParser#parseCommand` is invoked to determine the command type. Since this is an `add can` command, the `AddPersonCommandParser#parse` is then invoked to parse the arguments. If the input command has an invalid format, `AddPersonCommandParser` throws a `ParseException`, if not, a `AddPersonCommand` object is created."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Step 4. `ModelManager#hasJob(Person person)` is invoked to check whether the same person exist in the FilteredList of persons using the `equals` method of `Persons`. If a duplicate person exists, a `CommandException` is thrown. Otherwise, the method `ModelManager#addPerson(Person person)` is invoked to adds the person into the FilteredList of persons."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Step 5. The `savePersonAddressBook` method of `StorageManager`, which is a subclass of `Storage` is invoked to update the new person addition in the `personAddressBook` and saved. "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raythx98"
        },
        "content": "The following sequence diagram shows how the `add can` operation works in the scenario described above:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raythx98"
        },
        "content": "![AddSequenceDiagram](images/AddSequenceDiagram.png)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raythx98"
        },
        "content": "The sequence diagram for a `add job` operation is mostly similar, with `AddJobCommandParser`, `AddJobCommand`, `hasJob`, `addJob`, `saveJobAddressBook` and `JobAddressBook`."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raythx98"
        },
        "content": "### \\[Implemented] Edit feature"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "raythx98"
        },
        "content": "The Edit feature has two variants, one for editing candidates (`edit can`) and one for editing jobs (`edit job`) . We will illustrate this feature using only the candidates variant here"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raythx98"
        },
        "content": "as the job variant works analogously. "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raythx98"
        },
        "content": "The implemented edit mechanism is facilitated by `ModelManager`.  It implements `Model` and contains a `FilteredList`, which is a subclass of `ObservableList`. "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raythx98"
        },
        "content": "*`ModelManager#setPerson(Person target, Person editedPerson)` —  Replaces the Person target  with editedPerson."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "*`ModelManager#updateFilteredPersonList(Predicate\u003cPerson\u003e predicate)` —  Updates the FilteredList of persons using the supplied predicate."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Given below is an example usage scenario and how the edit mechanism behaves at each step."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Step 1. The user launches the application for the first time. The `FilteredList` will be initialised with the `UniquePersonList` from `personAddressBook` which contains a list of candidates."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Step 2. The user executes `edit can 2 n/Rob Mi` to change the `Name` of the candidate at `index` 2 to Rob Mi. "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Step 3. The method `AddressBookParser#parseCommand` is invoked to distinguish which type of command it is. After discerning it is an `edit can` command,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "raythx98"
        },
        "content": "the `EditPersonCommandParser#parse` is then invoked to parse the arguments."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "raythx98"
        },
        "content": "If the command format is invalid, `EditPersonCommandParser` throws an error."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Step 4. A `EditPersonDescriptor` object, which is an inner class of `EditPersonCommand`, is created from parsing the command and is used"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "to store the details to edit the candidate with. In this case, it stores the `Name` Rob Mi."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Step 5. A `EditPersonCommand` object is also created from parsing the comamand. In the `EditPersonCommand#execute` method, "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "if the candidate index provided by the user is invalid, an error is thrown. "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Otherwise, the method `ModelManager#setPerson()` is invoked to replace the old candidate with the newly edited candidate. "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " Then, `ModelManager#updateFilteredPersonList()` is invoked and the `FilteredList` and `personAddressBook` is updated and saved."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "raythx98"
        },
        "content": "The following sequence diagram shows how the edit operation works in the scenario described above:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "raythx98"
        },
        "content": "![EditSequenceDiagram](images/EditSequenceDiagram.png)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "raythx98"
        },
        "content": "A `edit job` command works similarly for Jobs but with the analogous EditJobDescriptor, EditJobCommand, JobAddressBook etc. classes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "raythx98"
        },
        "content": "### \\[Implemented] List feature"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "The implemented list mechanism is facilitated by `ModelManager`. It implements `Model` and contains a `FilteredList`, which is a subclass of `ObservableList`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "*`ModelManager#updateFilteredJobList(Predicate\u003cJob\u003e predicate)` —  Updates the FilteredList of jobs using the supplied predicate."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Given below is an example usage scenario and how the list mechanism behaves at each step."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Step 1. The user launches the application for the first time. The `FilteredList` will be initialised with the `UniqueJobList` from `jobAddressBook` which contains a list of jobs."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Step 2. The user executes `list job` to list all jobs."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Step 3. A `ListJobCommand` object is created from parsing the command. In the `ListJobCommand#execute` the method `ModelManager#updateFilteredJobList(PREDICATE_SHOW_ALL_JOBS)` is invoked "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "and the `FilteredList` shows all jobs in the list as indicated by the given predicate."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "The following sequence diagram shows how the find operation works in the scenario described above:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "![ListSequenceDiagram](images/ListSequenceDiagram.png)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "raythx98"
        },
        "content": "### \\[Implemented] Sort feature"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "raythx98"
        },
        "content": "The implemented sort mechanism is facilitated by `ModelManager`. It implements `Model` and contains a `SortedList`, which is a subclass of `ObservableList`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* `ModelManager#updateSortedPersonList(Comparator\u003cPerson\u003e comp)` —  Sorts the current SortedList of persons using the supplied comparator."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Given below is an example usage scenario and how the sort mechanism behaves at each step."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Step 1. The user launches the application for the first time. The `SortedList` will be initialised with the `UniquePersonList` from `personAddressBook` which contains a list of candidates."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Step 2. The user executes `sort can type/exp order/asc` to sort the candidates by their `Experience` in ascending order. If the `type` of comparator field e.g. `exp` or the `order` e.g `asc` is missing, `SortPersonCommandParser` throws an error message."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Step 3. A `PersonExperienceComparator` is created from parsing the command and a `SortPersonCommand` object is created. In the `SortPersonCommand#execute` the method `ModelManager#updateSortedPersonList(PersonExperienceComparator)` is invoked and the `SortedList` is sorted using the `PersonExperienceComparator`. The `UniquePersonList` in `personAddressBook` is then set to be the `SortedList`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "raythx98"
        },
        "content": "![SortPersonSequenceDiagram](images/SortSequenceDiagramC.png)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "raythx98"
        },
        "content": "### \\[Implemented] Find feature"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "raythx98"
        },
        "content": "The implemented find mechanism is facilitated by `ModelManager`. It implements `Model` and contains a `FilteredList`, which is a subclass of `ObservableList`."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "*`ModelManager#updateFilteredPersonList(Predicate\u003cPerson\u003e predicate)` —  Updates the FilteredList of persons using the supplied predicate."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Given below is an example usage scenario and how the find mechanism behaves at each step."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Step 1. The user launches the application for the first time. The `FilteredList` will be initialised with the `UniquePersonList` from `personAddressBook` which contains a list of candidates."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Step 2. The user executes `find can n/John` to find candidates with the `Name` John."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Step 3. A `PersonNameContainsKeywordsPredicate`, which is a subclass of `Predicate` is created from parsing the command and a `FindCommand` object is created. In the `FindCommand#execute` the method `ModelManager#updateFilteredPersonList(PersonNameContainsKeywordsPredicate)` is invoked and the `FilteredList` is filtered using the `PersonNameContainsKeywordsPredicate`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "raythx98"
        },
        "content": "The following sequence diagram shows how the find operation works in the scenario described above:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "raythx98"
        },
        "content": "![FindSequenceDiagram](images/FindSequenceDiagram.png)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "raythx98"
        },
        "content": "The find operation is subjected to improvements to be implemented in v1.3 where we will allow users to find candidates or jobs using other fields like address, tags, vacancy, etc."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "raythx98"
        },
        "content": "## Proposed Features"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "**Target user profile**: Job Recruiter"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* Has a need to manage a significant number of contacts, specifically job openings and job candidates"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* Has a need to store relevant additional information of job openings and job candidates other than contact details"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "**Value proposition**: "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* Manage contacts faster than a typical mouse/GUI driven app. "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* Convenient access to contact details of job candidates as well as job openings on one centralised platform."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* Store additional information for job openings such as priority and number of vacancies."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* Store additional information for job candidates such as years of experience and expected salary."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* Search for job candidates and job openings by various fields."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* Sort job candidates and job openings by various fields."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                 | I want to …​                                                                       | So that I can…​                                                                         |"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------ |"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* * *`  | job recruiter                              | have a platform to consolidate all _information_ of candidates                        |  avoid receiving applications from the same people repeatedly                              |"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* * *`  | job recruiter                              | have a way to filter candidates by the type of job they are applying for              |                                                                                            |"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* * *`  | job recruiter                              | have a way to be able to delete candidates when they are successfully hired           | optimise my search                                                                         |"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* * *`  | job recruiter                              | have a way to keep track of duplicate candidates                                      | avoid adding the same candidate multiple times                                             |"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* * *`  | job recruiter                              | keep the links to candidates\u0027 resumes (GitHub, LinkedIn, etc.)                        | review them conveniently                                                                   |"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* * *`  | job recruiter                              | be able to delete job listings when they are filled up                                |                                                                                            |"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* * *`  | job recruiter                              | be able to filter jobs by their vacancies                                             |                                                                                            |"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* * *`  | job recruiter                              | be able to tag jobs with different priorities                                         |                                                                                            |"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* * *`  | job recruiter                              | be able to filter jobs by their priorities                                            |                                                                                            |"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* * *`  | careless job recruiter                     | have a way to edit the contacts                                                       | rectify wrong entries                                                                      |"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* *`    | new user exploring the application         | see sample data stored in the App                                                     | see how the App would work when it is in use                                               |"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* *`    | technology inept person                    | have an App that is intuitive to use                                                  |                                                                                            |"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* *`    | aesthetic individual                       | have an App that is clean and aesthetically pleasing                                  |                                                                                            |"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* *`    | job recruiter                              | have a way to filter candidates by the date they applied for the job                  |                                                                                            |"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* *`    | job recruiter                              | have a way to filter candidates by their years of experience                          |                                                                                            |"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* *`    | job recruiter                              | have a way to blacklist candidates that do not respond or have poor attitudes         | take note to not consider them again in the future                                         |"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* *`    | job recruiter                              | have a way to organise my contact information easily                                  |                                                                                            |"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* *`    | job recruiter                              | have a way to sort candidates based on their expected salary                          |                                                                                            |"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* *`    | job recruiter                              | be brought directly to the relevant pages to view the candidates’ further information |                                                                                            |"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "g-erm"
        },
        "content": "| `* *`    | job recruiter                              | be able to view the ranking of the candidates based on various _criteria_             | provide a list of candidates that best fulfil the recruitment criteria(s) to the companies |"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* *`    | job recruiter                              | be notified of duplicate job listings when adding a new entry to the list             |                                                                                            |"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* *`    | efficient job recruiter                    | be able to effectively search for candidates whenever there is a new job opening      | answer to hiring companies quickly                                                         |"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* *`    | veteran job recruiter                      | be able to store as many contacts as possible without lagging the software            |                                                                                            |"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `* *`    | user that is ready to start using the app  | have an easy way to clear all the sample data                                         | fill in my data                                                                            |"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `*`      | job recruiter                              | have a way to keep track of interview schedules                                       |                                                                                            |"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `*`      | single person                              | have a way to store the contacts of cute job applicants                               |                                                                                            |"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `*`      | long term user of the App                  | have a way to archive some of the unused data                                         | prevent cluttering                                                                         |"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `*`      | efficient person                           | be able to perform mass operations like deleting multiple entries at once             |                                                                                            |"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "| `*`      | job recruiter                              | have a way to filter job applicants by their gender                                   |                                                                                            |"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "g-erm"
        },
        "content": "(For all use cases below, the **System** is the `CANdidates` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "#### **Use case: UC01 - Add a candidate**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "1.  User adds a candidate"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "2.  CANdidates shows a list of candidates, containing the newly added candidate"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* 1a. Input format is invalid."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    * 1a1. CANdidates shows an error message."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* 1b. The given candidate already exists."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    * 1b1. CANdidates shows an error message."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "#### **Use case: UC02 - List candidates**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "1.  User requests to list candidates"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "2.  CANdidates shows a list of candidates"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* 1a. Input format is invalid."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    * 1a1. CANdidates shows an error message."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "#### **Use case: UC03 - Delete a candidate**"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "1.  User requests to _list candidates (UC01)_"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "2.  User requests to delete a specific candidate index in the list"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "3.  CANdidates deletes the candidate"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    * 2a1. CANdidates shows an error message."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "#### **Use case: UC04 - Edit a candidate**"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "1.  User requests to _list candidates (UC01)_"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "2.  User requests to edit the details of a specific candidate index in the list"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "3.  CANdidates edits the candidate"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    * 2a1. CANdidates shows an error message."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* 2b. The format of the given details are invalid."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    * 2b1. CANdidates shows an error message."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "#### **Use case: UC05 - Clear all candidates**"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "1.  User requests to _list candidates (UC01)_"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "2.  User requests to clear all candidates in the list"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "3.  CANdidates clears the list"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "#### **Use case: UC06 - Find candidates**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "1.  User requests to find candidates with keywords"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "2.  CANdidates shows a list of candidates matching keywords"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* 1a. Input format is invalid."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    * 1a1. CANdidates shows an error message."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "#### **Use case: UC07 - Sort candidates**"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "1.  User requests to _list candidates (UC01)_"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "2.  User requests to sort the list in an order based on a field type"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "3.  CANdidates displays the list of candidates in the specified order"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  "
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* 2a. The given field type is invalid."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    * 2a1. CANdidates shows an error message."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* 2b. The given order is invalid."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    * 2b1. CANdidates shows an error message."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "#### **Use case: UC08 - Add a job**"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Similar to UC01, except user will request to add a job instead."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "#### **Use case: UC09 - List jobs**"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Similar to UC02, except user will request to list jobs and CANdidates will show a list of jobs instead."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "#### **Use case: UC10 - Delete a job**"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Similar to UC03, except user will request to delete a specific job index."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "#### **Use case: UC11 - Edit a candidate**"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Similar to UC04, except user will request to edit details of a specific job index."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "#### **Use case: UC12 - Clear all jobs**"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Similar to UC05, except user will request to clear all jobs."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "#### **Use case: UC13 - Find candidates**"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Similar to UC06, except user will request to find jobs with keywords and CANdidates will show a list of jobs instead."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "#### **Use case: UC14 - Sort candidates**"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Similar to UC07, except user will request to sort jobs."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "#### **Use case: UC15 - Requesting for help**"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "1.  User requests for help"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "2.  CANdidates displays help window with link to User Guide"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "3.  User copies the link and closes the window"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "g-erm"
        },
        "content": "1.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "g-erm"
        },
        "content": "1.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands)"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "g-erm"
        },
        "content": " should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "g-erm"
        },
        "content": "1.  Should be a single user product."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "g-erm"
        },
        "content": "1.  The data should be stored locally in a human editable text file."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "g-erm"
        },
        "content": "1.  Should work without requiring an installer."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "g-erm"
        },
        "content": "1.  Should not include _hard-to-test features_."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "g-erm"
        },
        "content": "1.  The project is expected to adhere to a schedule that delivers a feature set every one to two weeks."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "g-erm"
        },
        "content": "1.  Should have an intuitive interface for new users to pick up the application easily."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "g-erm"
        },
        "content": "1.  Should be able to work without an internet connection."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "g-erm"
        },
        "content": "1.  Any reused code should be used with appropriate credit given."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "g-erm"
        },
        "content": "1.  Should not include copyrighted audio or graphics."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "g-erm"
        },
        "content": "* **Information**: Name, phone number, address, job type etc."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "g-erm"
        },
        "content": "* **Criteria**: Work experience, language and other skills."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "g-erm"
        },
        "content": "* **Hard-to-test features**: Features that heavily depend on remote APIs, audio-related features,"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "g-erm"
        },
        "content": "as well as features requiring creation of user accounts etc."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 1,
      "BreadPeanutButter": 60,
      "raythx98": 121,
      "g-erm": 22,
      "ameliatjy": 217,
      "-": 327
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "## CANdidates User Guide"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "1. [Introduction](#introduction)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Author](#authors)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "1. [Preface](#preface)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Understanding Symbols](#understanding-symbols)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Understanding Input Fields](#understanding-input-fields)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     1. [Understanding Command Format](#understanding-command-format)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": "2. [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "1. [Features for Candidates](#features-for-candidates)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    1. [Adding a candidate: **`add can`**](#adding-a-candidate-add-can)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    1. [Listing all candidates: **`list can`**](#listing-all-candidates-list-can)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    1. [Editing a candidate: **`edit can`**](#editing-a-candidate-edit-can)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    1. [Finding a candidate: **`find can`**](#finding-a-candidate-find-can)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    1. [Sorting all candidates: **`sort can`**](#sorting-all-candidates-sort-can)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    1. [Deleting a candidate: **`delete can`**](#deleting-a-candidate-delete-can)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    1. [Clearing all candidate entries: **`clear can`**](#clearing-all-candidate-entries-clear-can)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "1. [Features for Jobs](#features-for-jobs)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    1. [Adding a job listing: **`add job`**](#adding-a-job-listing-add-job)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     1. [Listing all jobs: **`list job`**](#listing-all-jobs-list-job)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     1. [Editing a job: **`edit job`**](#editing-a-job-edit-job)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     1. [Finding a job: **`find job`**](#finding-a-job-find-job)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     1. [Sorting all jobs: **`sort job`**](#sorting-all-jobs-sort-job)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     1. [Deleting a job: **`delete job`**](#deleting-a-job-delete-job)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     1. [Clearing all job entries: **`clear job`**](#clearing-all-job-entries-clear-job)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "1. [Other Features](#other-features)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     1. [Viewing help: **`help`**](#viewing-help-help)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     1. [Exiting the program : **`exit`**](#exiting-the-program--exit)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     1. [Detecting duplicate entries](#detecting-duplicate-entries)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     1. [Saving the data](#saving-the-data)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": "1. [FAQ](#faq)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "1. [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "1. [Glossary](#glossary)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Hello there! If you are reading this, you must be curious about *CANdidates*. "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "*CANdidates* is a powerful and optimized contact management app for job recruiters to manage job candidates and job listings. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "A key strength of *CANdidates* is its convenience and ease of managing all job-related contacts in a single application. "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": "If you find yourself having difficulty in managing job candidates and positions, then *CANdidates* is the perfect tool for you! "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Use this user guide to discover the amazing functions and features of *CANdidates*! "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Although *CANdidates* is simple and intuitive enough to use without having to read this user guide, "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "we still recommend that you read through in order to fully utilise *CANdidates*. "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-erm"
        },
        "content": "Before you get thrown off by some of the more technical terms used in this user guide, "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-erm"
        },
        "content": "you may be happy to know that a glossary is provided at the end of this document and may be of help to you!"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": "### Authors"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "*CANdidates* is developed as part of a NUS CS2103T Project by:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* [Amelia Tan Jin Yu](team/ameliatjy.md)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* [Lee Joon Jie](team/breadpeanutbutter.md)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* [Nigel Ng Yong Sheng](team/vangoghhh.md)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* [Tan Yu Ting, Germaine](team/g-erm.md)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* [Toh Hong Xian](team/raythx98.md)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": "## Preface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "For a smoother start to your usage of *CANdidates*, read this section to find out how this document is structured, "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "how to navigate the document and what all the symbols, special fonts and command formats mean."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "### Understanding Symbols"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-erm"
        },
        "content": "This section will explain all the symbols and fonts used in this document."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Symbols/Font  | Explanation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "--------------|------------------------------------"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "**`command`** | A grey highlight means that you can type the words into *CANdidates* and it will start performing tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib:   | This gives an example of how to use the feature."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo:        | This gives additional comments on the feature being explained."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":bulb:        | There are additional tips that you can make use of when using the explained feature."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":exclamation: | These are precautions you need to take note of when using the application."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raythx98"
        },
        "content": "### Understanding Input Fields"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-erm"
        },
        "content": "Input fields are fields that you have to specify in your commands. Still not sure what this means without context? "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Try getting a quick glance at the section [Quick Start](#quick-start) first!"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "g-erm"
        },
        "content": "You may refer back to this table whenever you need help understanding the input fields."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "g-erm"
        },
        "content": "Name of input field   | How you can use them"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-erm"
        },
        "content": "----------------------|------------------------------------"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "`NAME`                | Name of candidate being added or edited.\u003cbr/\u003e:memo: *Names should contain only alphanumerical values or spaces.*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "`PHONE_NUMBER`        | Contact number of candidate or job listing being added or edited\u003cbr/\u003e:memo: *Numbers should have at least 3 digits.*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "`EMAIL`               | Contact email address of candidate or job listing being added or edited.\u003cbr/\u003e:exclamation: *This field does not check whether the email is valid!.*\u003cbr/\u003e:bulb:*If you entered an erroneous email address, use the* [edit can](#editing-a-candidate-edit-can) *feature to correct it!*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "g-erm"
        },
        "content": "`ADDRESS`             | Residential address of candidate or address of workplace for the job listing."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "`YEARS_OF_EXPERIENCE` | Years of experience of the candidate in the relevant field one applied for.\u003cbr/\u003e:memo: *You can key up to 2 decimal points.*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "`DATE_OF_APPLICATION` | Date of job application submitted.\u003cbr/\u003e:memo: *Date should be in the format of DD-MM-YY*\u003cbr/\u003e:bulb: *Day and Month can be 1 or 2 digits as long as they are valid.*\u003cbr/\u003e:black_nib: *If the date of application is 31 September 2021, input* `doa/31-9-21`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "`EXPECTED_SALARY`     | If a candidate expects a certain amount of salary,  it can be specified using this field.\u003cbr/\u003e:memo: *This field only accepts whole numbers.*\u003cbr/\u003e:bulb: *You can round up your figure to the next whole number!*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "`IS_BLACKLISTED`      | You may use this to blacklist candidates that are unresponsive, have poor attitude, etc. You can use this to sort or filter candidates.\u003cbr/\u003e:memo: *This field only accepts 2 specific values: true or false.*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "g-erm"
        },
        "content": "`PROFILE_LINK`        | URL link to candidate profile or portfolio (e.g. LinkedIn or GitHub, etc.) to provide convenience for you to refer to their profile later on."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "`JOB_TYPE`            | You can include job type tags for candidates so that it will be easier to find candidates applying for similar jobs later on. For example, you can tag them according to the job industry.\u003cbr/\u003e:memo: *Job type is one word, made up of alphanumerical values with no spaces.*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "`JOB_TITLE`           | Title of a job position.\u003cbr/\u003e:exclamation: *Job titles should contain only alphanumerical values or spaces.*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "g-erm"
        },
        "content": "`COMPANY_NAME`        | Name of the company for the job listing you are adding or editing."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "`VACANCY`             | Vacancy of a job listing i.e. Number of available slots open for hiring.\u003cbr/\u003e:memo: *This field only accept whole numbers from 0 to 99.*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "`PRIORITY`            | Job listings may be of different urgency levels. For better categorisation, you may specify the priority of a job listing.\u003cbr/\u003e:memo: *This field only accepts 3 specific values: low, moderate or high.*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "`JOB_DESCRIPTION`     | You can include job description tags for job listings to specify additional description for it. For example, you may wish to specify restrictions on the listing such as age or gender.\u003cbr/\u003e:memo: *Job description is one word, made up of alphanumerical values with no spaces.*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "`FIELD_TO_SORT`       | Input field that is exclusive for [sort can](#sorting-all-candidates-sort-can) and [sort job](#sorting-all-jobs-sort-job) commands, to specify the field that the candidate or job list is being sorted by.\u003cbr/\u003e:exclamation: *This field only takes in specific values described in the respective feature sections.*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "`ORDER`               | Input field that is exclusive for [sort can](#sorting-all-candidates-sort-can) and [sort job](#sorting-all-jobs-sort-job) commands, to specify the sort order.\u003cbr/\u003e:memo: *This field only accepts 2 specific values: asc or desc.*"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "g-erm"
        },
        "content": "`INDEX`               | Index number of the candidate or job displayed in the list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Understanding Command Format"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "This section will explain how to interpret all the command formats which you will encounter in the sections [Features for Candidates](#features-for-candidates), [Features for Jobs](#features-for-jobs) and [Other Features](#other-features)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "This will help you to understand CANdidates\u0027 features better."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* Words in `UPPER_CASE` are the input fields which are supposed to be specified by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a input field which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  e.g `c/COMPANY_NAME [t/JOB_DESCRIPTION]` can be used as `c/Samsung t/ContractWorker` or just `c/Samsung`."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* Items with `…` after them can be used multiple times including zero times. You can put as much information as you want to!\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  e.g. `[t/JOB_TYPE]…` can be used as `t/accountant` (i.e. 1 time), `t/programmer t/technician` (i.e. 2 times) etc."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* Input fields can be in any order you want them to be.\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "*:bulb: If you are confused with the various input fields, refer to [Understanding Input Fields](#understanding-input-fields).*"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raythx98"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "g-erm"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Can’t wait to start using *CANdidates*? This section guides you through the starting up process, so that you can proceed on to use the application for your own needs!"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "1. Download the latest `Candidates.jar` from [here](https://github.com/AY2021S1-CS2103T-T17-3/tp/releases/tag/v1.3)."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raythx98"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your *CANdidates*."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "   * **`list can`** : Lists all candidates."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "   * **`add can`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 exp/5 doa/15-10-20` : "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "   Adds a candidate named _John Doe_ with phone number _98765432_, email _johnd\u003cspan\u003e@\u003c/span\u003eexample.com_, "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raythx98"
        },
        "content": "   address _John street, block 123, #01-01_, years of experience _5_ and date of application _15th October 2020_ to the candidates list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raythx98"
        },
        "content": "   * **`delete can`**`3` : Deletes the 3rd candidate shown in the current candidates list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "   * **`clear can`** : Deletes all candidates."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":exclamation: *Ensure you have Java 11 or above installed in your Computer.*"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":bulb: *If you are confused with the various input fields, refer to* [Understanding Input Fields](#understanding-input-fields)."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "## Features for Candidates"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "This section provides you with features to handle all information of candidates for your utmost convenience!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Refer to [Other Features](#other-features) for more general features."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Adding a candidate: `add can`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "If you have a new candidate who approached you and you would like to put him in *CANdidates*, you can add him into the list using the command below."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Format: `add can n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS exp/YEARS_OF_EXPERIENCE doa/DATE_OF_APPLICATION [t/JOB_TYPE]…​ [sal/EXPECTED_SALARY] [bl/IS_BLACKLISTED] [link/PROFILE_LINK]`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":bulb: *If you\u0027re unsure of what you are supposed to input in each field, refer to [Understanding Input Fields](#understanding-input-fields).*"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":bulb: *A candidate can have 0 or more job type(s).*"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *If the candidate is added successfully, *CANdidates* will automatically switch to the \"Candidates\" tab.*"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":exclamation: *If `IS_BLACKLISTED` is not specified, it will be set to false by default.*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib: To add a candidate with name _John Doe_, phone _98765432_, email _johnd\u003cspan\u003e@\u003c/span\u003eexample.com_, address _John street, block 123, #01-01_, job type _DogGroomer_, with _1_ year of experience who applied on _16 October 2020_,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    add can n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    t/DogGroomer exp/1 doa/16-10-20"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib: To add a candidate with name _Betsy Crowe_, email _betsycrowe\u003cspan\u003e@\u003c/span\u003eexample.com_, address _NUS Temasek Hall_, phone _92920033_,  job types _HR_ and _OfficeLady_, with _5_ years of experience who applied on _10 October 2020_, with profile link _BetsyCrowe.com_, who will _not be blacklisted_ with an expected salary of _3000_,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    add can n/Betsy Crowe e/betsycrowe@example.com a/NUS Temasek Hall p/92920033 "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    t/HR t/OfficeLady exp/5 doa/10-10-20 link/BetsyCrowe.com bl/false sal/3000"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Step by Step:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raythx98"
        },
        "content": "***Image to be added***"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Step 1. Type `add can n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 t/DogGroomer exp/1 doa/16-10-20` in the *command box* and press *Enter*."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raythx98"
        },
        "content": "***Image to be added***"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Step 2. The *CANdidates* application will automatically switch to \"Candidates\" tab and display the message “New person added: John Doe Phone: 98765432 Email: johnd@example.com Experience: 1.0 years Date of Application: 16-10-20 Address: John street, block 123, #01-01 Link:  Expected Salary:  Blacklisted: false Tags: [DogGroomer]”."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raythx98"
        },
        "content": "***Image to be added***"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Step 3. The application will show the updated list of candidates with the newly added candidate."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Listing all candidates: `list can`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "To accurately reflect the latest changes of candidates in the application, you can refresh the list of candidates using the format below."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Format: `list can`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":exclamation: *On the application, be sure to click on the “Candidates” tab to view the list of candidates.*"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":bulb: *This command is usually used after a* [sort can](#sorting-all-candidates-sort-can) *or* [find can](#finding-a-candidate-find-can) *command to show the full list of candidates again.*"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Editing a candidate: `edit can`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "If you would like to edit the details of a particular candidate, you can use the command below"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Format: `edit can INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [doa/DATE_OF_APPLICATION] [sal/EXPECTED_SALARY] [bl/IS_BLACKLISTED] [link/PROFILE_LINK] [t/JOB_TYPE]…`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *Edits the candidate at the specified* `INDEX`. *The* `INDEX` *refers to the index number shown in the displayed candidate list. The* `INDEX` *must be a positive integer 1, 2, 3, …​*"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *Existing values will be updated to the input values.*"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *At least one of the optional fields must be provided.*"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *The blacklist input can be specified as* `bl/true` *or* `bl/false`."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":exclamation: *When editing the job type, the existing job types will be cleared and replaced, i.e editing of job types is not cumulative even though there can be multiple job types.*"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":bulb: *Certain optional candidate fields can be cleared by typing their respective prefixes without specifying any value after them. "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "This works for the job type, address, expected salary and profile link fields. See the second example below for a demonstration.*"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib: To edit the 1st candidate’s phone number, email and blacklist status to be _91234567_, _johndoe\u003cspan\u003e@\u003c/span\u003eexample.com_ and _true_ respectively,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    edit can 1 p/91234567 e/johndoe@example.com bl/true"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib: To edit the 2nd candidate and clear existing job types, address, expected salary and profile link,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    edit can 2 t/ a/ sal/ link/ "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Finding a candidate: `find can`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Too many candidates with different information? *CANdidates* provide you with a simple and quick way for you to find candidates who fulfil certain criteria(s) or even a specific candidate from the long list. All you have to do is tell CANdidates the field you are interested in, along with the keyword you are looking for!"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Format: `find can [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [exp/YEARS_OF_EXPERIENCE] [doa/APPLICATION_DATE] [sal/EXPECTED_SALARY] [bl/IS_BLACKLISTED] [link/PROFILE_LINK] [t/JOB_TYPE]…`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *At least one of the optional fields must be provided.*"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *The search is case insensitive, e.g. john will match John*"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *The order of the keywords does not matter, e.g. Doe John will match John Doe*"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *For number fields (i.e. phone, years of experience and expected salary), only exact matching results will be displayed. For the remaining fields, results containing and exactly matching the keywords will be displayed.*"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":bulb: *If you do not want to see blacklisted candidates in the list, you can use the command find can bl/false, the resulting list will show only non-blacklisted candidates.*"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Sorting all candidates: `sort can`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "You can view all the candidates in the order you wish to by typing in your desired order. Upon execution of the command, the sorted list of candidates would be displayed on the app!"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Format: `sort can type/FIELD_TO_SORT order/ORDER`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":exclamation: *Sorting will only apply to the current viewable list. e.g. Using* `sort can` *command after a* `find can` *command will only sort the list of candidates that were listed after the* `find can` *command.*"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *The type input must be one of* `type/exp`, `type/sal`, `type/bl` *or* `type/doa` *depending on whether you wish to sort the candidates by their experience, expected salary, blacklist status or data of application respectively.*"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *The order input must be specified as either* `order/asc` *or* `order/desc` *depending on whether you wish the sorting to be done in an ascending or descending manner.*"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *If you provide more than one* `FIELD_TO_SORT` *or* `ORDER` *, only the last one will be taken in as input e.g.* `sort can type/exp order/asc type/sal order/desc` *will sort the candidates according to expected salary in descending order.* "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib: To sort the list of candidates starting from the lowest number of years of experience,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    sort can type/exp order/asc"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib: To sort the list of candidates starting from the most recent application date,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    sort can type/doa order/desc"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib: To view all blacklisted candidates followed by non-blacklisted candidates,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    sort can type/bl order/desc"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Deleting a candidate: `delete can`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Have you successfully found a job for a candidate and you no longer need to keep his/her details in *CANdidates*? "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "To delete a particular candidate from the list, you can use the command below."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Format: `delete can INDEX`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *Deletes the candidate at the specified* `INDEX`. *The* `INDEX` *refers to the index number shown in the displayed job list. The* `INDEX` *must be a positive integer 1, 2, 3, …​*"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":exclamation: *The specified candidate’s data will be cleared and this action is irreversible. "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Please ensure you do not require the candidate’s data anymore before performing this command.*"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib: To delete the candidate at index _1_,"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    delete can 1"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib: To delete the candidate at index _3_,"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    delete can 3"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Clearing all candidate entries: `clear can`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Want to clear all the candidates in the list quickly without having to delete one by one? Simply use the command below!"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Format: `clear can`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":exclamation: *All candidate data will be cleared and this action is irreversible. "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Please ensure you do not require the candidate list data anymore before performing this command.*"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":bulb: *This command can be used to clear the sample data on CANdidates when you first download it.*"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "## Features for Jobs"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "This section provides you with features to handle all information of job listings for your utmost convenience!"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Refer to [Other Features](#other-features) for more general features."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "       "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Adding a job listing: `add job`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "If you are informed of a job opening and you would like to add it in *CANdidates*, you can add it into the list using the command below."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Format: `add job n/JOB_TITLE c/COMPANY_NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS v/VACANCY [t/JOB_DESCRIPTION]… [pr/PRIORITY]`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":bulb: *If you\u0027re unsure of what you are supposed to input in each field, refer to [Understanding Input Fields](#understanding-input-fields).*"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":bulb: *A job can have 0 or more job description(s).*"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *If the job is added successfully, *CANdidates* will automatically switch to the \"Jobs\" tab*"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":exclamation: *If `PRIORITY` is not specified, it will be set to moderate by default.*"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib: To add a job with job title _Waiter_, company name _Amelia’s Eating House_, phone _98765432_, email _ameliatjy\u003cspan\u003e@\u003c/span\u003eexample.com_, address _Amelia Street, Block 123, #01-01_, priority _low_, job description _MultipleLocations_ and with _1_ vacancy,"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    add job n/Waiter c/Amelia’s Eating House p/98765432 e/ameliatjy@example.com "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    a/Amelia Street, Block 123, #01-01 pr/low t/MultipleLocations v/1"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib: To add a job with job title _Delivery Man_, company name _FedEx_, email _fedex\u003cspan\u003e@\u003c/span\u003eexample.com_, address _Joo Koon_,phone _93333222_, priority _high_, job descriptions _delivery_ and _west_, with _1_ vacancy,"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    add job n/Delivery Man c/FedEx e/fedex@example.com a/Joo Koon p/93333222 "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    pr/high t/delivery t/west v/10"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Step by Step:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "***Image to be added***"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Step 1. Type `add job n/Waiter c/Amelia’s Eating House p/98765432 e/ameliatjy@example.com a/Amelia Street, Block 123, #01-01 pr/low t/MultipleLocations v/1` in the *command box* and press *Enter*."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "***Image to be added***"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Step 2. The *CANdidates* application will automatically switch to \"Jobs\" tab and display the message “New job added: Waiter Company: Amelia’s Eating House Phone: 98765432 Email: ameliatjy@example.com Address: Amelia Street, Block 123, #01-01 Priority: low Vacancy: 1 Tags: [MultipleLocations]”."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "***Image to be added***"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Step 3. The application will show the updated job listings with the newly added job."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Listing all jobs: `list job`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "To accurately reflect the latest changes of jobs in the application, you can refresh the job listings using the format below."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Format: `list job`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":exclamation: *On the application, be sure to click on the “Jobs” tab to view the job listings.*"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":bulb: *This command is usually used after a* [sort job](#sorting-all-jobs-sort-job) *or* [find job](#finding-a-job-find-job) *command to show the full list of job listings again.*"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "### Editing a job: `edit job`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "If you would like to edit the details of a particular job, you can use the command below"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Format: `edit job INDEX [n/JOB_TITLE] [c/COMPANY_NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [v/VACANCY] [pr/PRIORITY] [t/JOB_DESCRIPTION]…`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":memo: *Edits the job at the specified* `INDEX`. *The* `INDEX` *refers to the index number shown in the displayed job list. The* `INDEX` *must be a positive integer 1, 2, 3, …​*"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":memo: *Existing values will be updated to the input values.*"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":memo: *At least one of the optional fields must be provided.*"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":memo: *The priority input can be specified as* `pr/low`, `pr/moderate` *or* `pr/moderate`."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":exclamation: *When editing the job description, the existing job descriptions will be cleared and replaced, "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "i.e editing of job descriptions is not cumulative even though there can be multiple job descriptions.*"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":bulb: *Existing job descriptions can be cleared by typing t/ without specifying any value after it. "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "See the second example below for a demonstration.*"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":black_nib: To edit the 2nd job’s company name, phone number, vacancy and priority to be _Dog Cafe_, _82827731_, _3_ and _high_ respectively,"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    edit job 2 c/Dog Cafe p/82827731 v/3 pr/high"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":black_nib: To edit the 3rd job and clear existing job descriptions, "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    edit job 3 t/"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib: To find candidates with tag(s) containing the word “_developer_” and an expected salary of exactly _$4000_,"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    find can t/developer sal/4000"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib: To find candidates who are _blacklisted_,"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    find can bl/true"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Finding a job: `find job`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Too many job listings with different information? Similar to the feature above, you can also find job listings by inserting keywords for the fields you are looking for!"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Format: `find job [n/JOB_TITLE] [c/COMPANY_NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [pr/PRIORITY] [v/VACANCY] [t/JOB_DESCRIPTION]…`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *At least one of the optional fields must be provided.*"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *The search is case insensitive, e.g. samsung will match Samsung*"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *The order of the keywords does not matter, e.g. King Burger will match Burger King*"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":memo: *For number fields (i.e. phone and vacancy), only exact matching results will be displayed. For the remaining fields, results containing and exactly matching the keywords will be displayed.*"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib: To find jobs with email containing “_@gmail.com_” and priority level _high_,"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    find job e/@gmail.com pr/high"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":black_nib: To find jobs with job titles containing the words “_Software Engineer_”,"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    find job n/Software Engineer"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "g-erm"
        },
        "content": "### Sorting all jobs: `sort job`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Have too many job listings and need a way to organise them? You can get *CANdidates* to help you do that by sorting them according to the priority or vacancies you have indicated for the job listings!"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "g-erm"
        },
        "content": "Format: `sort job type/FIELD_TO_SORT order/ORDER`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "g-erm"
        },
        "content": ":exclamation: *Sorting will only apply to the current viewable list. e.g. Using* `sort job` *command after a* `find job` *command will only sort the list of job listings that were listed after the* `find job` *command.*"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "g-erm"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "g-erm"
        },
        "content": ":memo: *The* `FIELD_TO_SORT` *can be either* `pr` *or* `v` *depending on whether you wish to sort the job listings by their priority level or number of vacancies.*"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "g-erm"
        },
        "content": ":memo: *If you provide more than one* `FIELD_TO_SORT` *or* `ORDER` *, only the last one will be taken in as input e.g.* `sort job type/pr order/asc type/v order/desc` *will sort the job listings according to vacancies in descending order.* "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "g-erm"
        },
        "content": ":memo: *The* `ORDER` *can be either* `asc` *or* `desc` *depending on whether you wish the sorting to be done in an ascending or descending manner.*"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "g-erm"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "g-erm"
        },
        "content": ":black_nib: To sort the list of jobs starting from lowest priority,"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    sort job type/pr order/asc"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "g-erm"
        },
        "content": ":black_nib: To sort the list of jobs starting from the highest number of vacancies,"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    sort job type/v order/desc"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "g-erm"
        },
        "content": "Step by Step:"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "g-erm"
        },
        "content": "Step 1. Type sort job type/pr order/asc in the command box and press Enter."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Step 2. The *CANdidates* application will display the message “Successfully sorted jobs by priority in ascending order.”"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "g-erm"
        },
        "content": "Step 3. The application will show the sorted job list based on the sort condition given."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "### Deleting a job: `delete job`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Deletes the specified job from the job listing."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Format: `delete job INDEX`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":memo: *Deletes the job at the specified* `INDEX`. *The* `INDEX` *refers to the index number shown in the displayed job list. The* `INDEX` *must be a positive integer 1, 2, 3, …​*"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":exclamation: *The specified job’s data will be cleared and this action is irreversible. "
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Please ensure you do not require the job’s data anymore before performing this command.*"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":black_nib: To delete the job at index _1_,"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    delete job 1"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":black_nib: To delete the job at index _3_,"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    delete job 3"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    "
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Clearing all job entries: `clear job`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Want to clear all the jobs in the list quickly without having to delete one by one? Simply use the command below!"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Format: `clear job`"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ":exclamation: *All job data will be cleared and this action is irreversible. "
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Please ensure you do not require the job list data anymore before performing this command.*"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":bulb: *This command can be used to clear the sample data on* *CANdidates* *when you first download it.*"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "## Other Features"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "This section explores other general features that CANdidates has to offer!"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "If you are unsure of how to use the application, we have a help function that will direct you to our user guide! You might also find it helpful to refer to the summary of all the available commands [here](#command-summary)."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "***Image to be changed***"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Step by Step:"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "***Image to be added***"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Step 1. Type `help` in the *command box* and press *Enter*."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "***Image to be added***"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Step 2. The *CANdidates* application will display the message \"Opened help window\" to indicate that the help window has been opened."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "***Image to be added***"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Step 3. The help window will appear as a pop-up and you may click on the \"copy URL\" button. This URL (link) will direct you to *CANdidates*\u0027s user guide, which is this document!"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Done with updating your information with *CANdidates*? Use this command to exit the program!"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "### Detecting duplicate entries"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Worried that you might accidentally create duplicate entries of the same candidate or job? No need to worry, "
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "CANdidates has you covered! Duplicate entries are automatically detected and prevented from being created. "
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "You will be notified by an error message when this happens. No command is needed."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":memo: *For candidates, duplicates are defined as entries with the same name and phone number or same name and email.*"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":memo: *For jobs, duplicates are defined as entries with the same job title and company name.*"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":memo: *Detection and prevention of duplicates apply when adding entries as well as editing entries. "
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "This means you will not be able to edit an entry to match another entry.*"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":black_nib: Creating candidates with the same name and phone is not allowed"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    add can n/Rob p/12345 e/rob@mail.com exp/4 doa/08-08-22"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    "
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    add can n/Rob p/12345 e/robby@gmail.com exp/3.5 doa/09-08-22"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ":black_nib: Creating jobs with the same job title and company name is not allowed"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    add job n/Actor c/Hollywood Pte Ltd  p/8888 e/h@mail.com a/Serangoon v/3"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     "
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    add job n/Actor c/Hollywood Pte Ltd p/1234 e/g@mail.com a/Nex v/3"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "g-erm"
        },
        "content": "All data is saved in the hard disk automatically after any command that changes the data. No need worry about having to save manually!"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous CANdidates home folder."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "raythx98"
        },
        "content": "**Q**: How do I report a bug I encountered?\u003cbr\u003e"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "g-erm"
        },
        "content": "**A**: Send an email to *developers@CANdidates.com* with a description and screenshot (if relevant) of the bug. We will make sure to get back to you promptly!"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "raythx98"
        },
        "content": "**Q**: How can I contribute to this project?\u003cbr\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "g-erm"
        },
        "content": "**A**: You may create a pull request to this [repository](https://github.com/AY2021S1-CS2103T-T17-3/tp). Here is our [developer\u0027s guide](https://ay2021s1-cs2103t-t17-3.github.io/tp/DeveloperGuide.html) for your reference."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "g-erm"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "raythx98"
        },
        "content": "This handy command summary table provides you with all the possible commands for *CANdidates* at one glance."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Action | Candidate Format | Job Format"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "--------|------------------|------------------"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Add** | `add can n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS exp/YEARS_OF_EXPERIENCE doa/DATE_OF_APPLICATION [t/JOB_TYPE]… [sal/EXPECTED_SALARY] [bl/IS_BLACKLISTED] [link/PROFILE_LINK]` | `add job n/JOB_TITLE c/COMPANY_NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS v/VACANCY [t/JOB_DESCRIPTION]… [pr/PRIORITY]`"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**List** | `list can` | `list job`"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Edit** | `edit can INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [doa/DATE_OF_APPLICATION] [sal/EXPECTED_SALARY] [bl/IS_BLACKLISTED] [link/PROFILE_LINK] [t/JOB_TYPE]…` | `edit job INDEX [n/JOB_TITLE] [c/COMPANY_NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [v/VACANCY] [pr/PRIORITY] [t/JOB_DESCRIPTION]…`"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "g-erm"
        },
        "content": "**Find** | `find can [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [exp/EXPERIENCE] [doa/APPLICATION_DATE] [sal/EXPECTED_SALARY] [bl/IS_BLACKLISTED] [link/PROFILE_LINK] [t/JOB_TYPE]…` | `find job [n/JOB_TITLE] [c/COMPANY_NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [pr/PRIORITY] [v/VACANCY] [t/JOB_DESCRIPTION]…`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "**Sort** | `sort can type/FIELD_TO_SORT order/ORDER` | `sort job type/FIELD_TO_SORT order/ORDER`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Delete** | `delete can INDEX` | `delete job INDEX`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Clear** | `clear can` | `clear job`"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Help** | `help` | `help`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "**Exit** | `exit` | `exit`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "raythx98"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Terms | Explanation"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "raythx98"
        },
        "content": "--------|------------------------------------"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "raythx98"
        },
        "content": "**Java** | Java is a widely-used programming language that developers use to create applications on computers."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "raythx98"
        },
        "content": "**GUI** | A GUI (Graphical User Interface) is a system of interactive visual components for computer software. It is the visible component of the software."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "g-erm"
        },
        "content": "**Input field** | Input to the command that the user specifies."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "**Cumulative** | Increasing in quantity by successive additions."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "raythx98"
        },
        "content": "**Hard disk** | Storage of information in a computer."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "raythx98"
        },
        "content": "**Repository** | Online container where your code can be stored, contributed to and managed over time."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "raythx98"
        },
        "content": "**Pull Request** | Formal request to merge one’s code into a larger codebase."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Bug** | A software bug is an error, flaw or fault in a computer program or system that causes it to produce an incorrect or unexpected result, or to behave in unintended ways."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "**Developer\u0027s Guide** | A guide that includes extensive guidance and reference materials to aid the developer in creating applications and extensions "
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 141,
      "raythx98": 115,
      "g-erm": 44,
      "ameliatjy": 310,
      "-": 122
    }
  },
  {
    "path": "docs/diagrams/AddCommand.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027The `FilteredList` will be initialised with the `UniquePersonList` from"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027`personAddressBook` which contains a list of candidates."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027Step 2. The user executes `add can n/John` to add a candidate with `Name` John."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027Step 3. The method `AddressBookParser#parseCommand` is invoked to determine the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027command type. Since this is an `add can` command,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027the `AddPersonCommandParser#parse` is then invoked to parse the arguments."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027If the input command has an invalid format, `AddPersonCommandParser` throws"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027a `ParseException`, if not, a `AddPersonCommand` object is created."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027Step 4. `ModelManager#hasJob(Person person)` is invoked to check whether the same"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027person exist in the FilteredList of persons using the `equals` method of `Persons`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027If a duplicate person exists, a `CommandException` is thrown. Otherwise, the method"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027`ModelManager#addPerson(Person person)` is invoked to adds the person into the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027FilteredList of persons."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027Step 5. The `savePersonAddressBook` method of `StorageManager`, which is a"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027subclass of `Storage` is invoked to update the new person addition in the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027`personAddressBook` and saved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u0027`add can n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 exp/5 doa/15-10-20`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "participant \":AddPersonCommandParser\" as AddPersonCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "participant \"a: AddPersonCommand\" as AddPersonCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "box Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": "participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": "[-\u003e LogicManager : execute(\"add can \\nn/John Doe p/98765432\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"add can \\nn/John Doe p/98765432\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "create AddPersonCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "AddressBookParser -\u003e AddPersonCommandParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": "activate AddPersonCommandParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "AddPersonCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "deactivate AddPersonCommandParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "AddressBookParser -\u003e AddPersonCommandParser : parse(\"n/John Doe \\np/98765432\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": "activate AddPersonCommandParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "create AddPersonCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "AddPersonCommandParser -\u003e AddPersonCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": "activate AddPersonCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": "AddPersonCommand --\u003e AddPersonCommandParser : \"a\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": "deactivate AddPersonCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "AddPersonCommandParser --\u003e AddressBookParser : \"a\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "destroy AddPersonCommandParser"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": "AddressBookParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raythx98"
        },
        "content": "LogicManager -\u003e AddPersonCommand : \"execute()\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raythx98"
        },
        "content": "activate AddPersonCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "AddPersonCommand -\u003e Model : \"hasPerson(Person)\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Model --\u003e AddPersonCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raythx98"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raythx98"
        },
        "content": "AddPersonCommand -\u003e Model : \"addPerson(Person)\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raythx98"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Model --\u003e AddPersonCommand"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raythx98"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raythx98"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raythx98"
        },
        "content": "AddPersonCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raythx98"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raythx98"
        },
        "content": "CommandResult --\u003e AddPersonCommand"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raythx98"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raythx98"
        },
        "content": "AddPersonCommand --\u003e LogicManager : \"Added candidate: John Doe Phone: 98765432\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raythx98"
        },
        "content": "deactivate AddPersonCommand"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raythx98"
        },
        "content": "LogicManager -\u003e Storage : \"savePersonAddressBook(PersonAddressBook)\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raythx98"
        },
        "content": "activate Storage"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Storage -\u003e Storage: \"Save \\nto file\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raythx98"
        },
        "content": "activate Storage"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Storage --\u003e Storage"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raythx98"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Storage --\u003e LogicManager"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raythx98"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raythx98"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raythx98"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raythx98"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "raythx98": 116
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": "participant \":DeletePersonCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": "participant \"d:DeletePersonCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "[-\u003e LogicManager : execute(\"delete can 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"delete can 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "g-erm": 4,
      "-": 65
    }
  },
  {
    "path": "docs/diagrams/EditCommand.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "participant \":EditPersonCommandParser\" as EditPersonCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "participant \"p: EditPersonDescriptor\" as EditPersonDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "participant \"e : EditPersonCommand\" as EditPersonCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "[-\u003e LogicManager : execute(\\n\"edit can 2 n/Rob Mi\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\\n\"edit can 2 n/Rob Mi\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "create EditPersonCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "AddressBookParser -\u003e EditPersonCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "activate EditPersonCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "EditPersonCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "deactivate EditPersonCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "AddressBookParser -\u003e EditPersonCommandParser : parse(\\n\"edit can 2 n/Rob Mi\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "activate EditPersonCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "create EditPersonDescriptor"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "EditPersonCommandParser -\u003e EditPersonDescriptor : EditPersonDescriptor()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "activate EditPersonDescriptor"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "create EditPersonCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "EditPersonCommandParser -\u003e EditPersonCommand : EditPersonCommand(index, p)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "activate EditPersonCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "EditPersonCommand --\u003e EditPersonCommandParser : e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "deactivate EditPersonCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "EditPersonCommandParser --\u003e AddressBookParser : e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "deactivate EditPersonCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "EditPersonCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "destroy EditPersonCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "AddressBookParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "LogicManager -\u003e EditPersonCommand : execute()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "activate EditPersonCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "EditPersonCommand -\u003e Model : setPerson(personToEdit, editedPerson)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "EditPersonCommand -\u003e Model : updateFilteredPersonList()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "destroy EditPersonDescriptor"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "EditPersonCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "CommandResult --\u003e EditPersonCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "EditPersonCommand --\u003e LogicManager : \"Edited candidate: Rob Mi\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "deactivate EditPersonCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 77
    }
  },
  {
    "path": "docs/diagrams/FindCommand.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "participant \"p: PersonNameContainsKeywordsPredicate\" as PersonNameContainsKeywordsPredicate LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "participant \"f : FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "[-\u003e LogicManager : execute(\"find can n/John\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"find can n/John\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "create FindCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "AddressBookParser -\u003e FindCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "FindCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "AddressBookParser -\u003e FindCommandParser : parse(\"find can n/John\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "create PersonNameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "FindCommandParser -\u003e PersonNameContainsKeywordsPredicate : PersonNameContainsKeywordsPredicate()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "activate PersonNameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "create FindCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "FindCommandParser -\u003e FindCommand : FindCommand(p)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "FindCommand --\u003e FindCommandParser : f"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "FindCommandParser --\u003e AddressBookParser : f"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "FindCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "destroy FindCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "AddressBookParser --\u003e LogicManager : f"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "LogicManager -\u003e FindCommand : execute()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "FindCommand -\u003e Model : updateFilteredPersonList(p)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Model --\u003e FindCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "destroy PersonNameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "FindCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "CommandResult --\u003e FindCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "FindCommand --\u003e LogicManager : \"10 persons listed!\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 77
    }
  },
  {
    "path": "docs/diagrams/InformationClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "skinparam arrowColor MODEL_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Package Information {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class Job"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class Salary"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class Date"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class Experience"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class BlacklistStatus"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class UrlLink"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class Vacancy"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class Priority"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Person *----\u003e \"1\" Name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Person *----\u003e \"1\" Phone"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Person *----\u003e \"1\" Email"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Person *----\u003e \"0..1\" Address"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Person *----\u003e \"1\" Experience"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Person *----\u003e \"0..1\" Salary"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Person *----\u003e \"1\" Date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Person *----\u003e \"0..1\" UrlLink"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Person *----\u003e \"1\" BlacklistStatus"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Person *----\u003e \"*\" Tag"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Job *-up---\u003e \"2\" Name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Job *-up---\u003e \"1\" Phone"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Job *-up---\u003e \"1\" Email"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Job *-up---\u003e \"1\" Address"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Job *--right---\u003e \"1\" Vacancy : \"                        \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Job *--left---\u003e \"  1\" Priority : \"                      \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Job *-up---\u003e \"*\" Tag"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "BlacklistStatus -right[hidden]- Address"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Date -right[hidden]- Address"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Experience -right[hidden]- Address"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 52
    }
  },
  {
    "path": "docs/diagrams/ListSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": "participant \"c:ListJobCommand\" as ListCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": "[-\u003e LogicManager : execute(\"list job\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"list job\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": "create ListCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "AddressBookParser -\u003e ListCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "ListCommand --\u003e AddressBookParser : c"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "AddressBookParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "LogicManager -\u003e ListCommand : execute()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": "ListCommand -\u003e Model : updateFilteredJobList(PREDICATE_SHOW_ALL_JOBS)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "Model --\u003e ListCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-erm"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": "ListCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-erm"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-erm"
        },
        "content": "CommandResult --\u003e ListCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-erm"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-erm"
        },
        "content": "ListCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-erm"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-erm"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-erm"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-erm"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "g-erm": 52
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e\"1\" AddressBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-erm"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddJobCommand, \\nSortPersonCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "g-erm": 1,
      "-": 61
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": "skinparam arrowColor MODEL_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Interface ReadOnlyPersonAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Interface ReadOnlyJobAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class PersonAddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class JobAddressBook"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class ReadOnlyPersonAddressBook"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Class ReadOnlyJobAddressBook"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Package Information {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Class UniqueJobList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Class Job"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "HiddenOutside ...\u003e Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "PersonAddressBook .up.|\u003e ReadOnlyPersonAddressBook"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "JobAddressBook .up.|\u003e ReadOnlyJobAddressBook"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "PersonAddressBook *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "JobAddressBook *--\u003e \"1\" UniqueJobList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "ModelManager o-right-\u003e \"1\" PersonAddressBook"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "ModelManager o-left-\u003e \"1\" JobAddressBook"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "UniqueJobList o--\u003e \"*\" Job"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "ModelManager --\u003e Job : filtered list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "ModelManager --\u003e Job : sorted list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "ModelManager --\u003e Person : filtered list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "ModelManager --\u003e Person : sorted list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "ModelManager o-up-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Job *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 10,
      "g-erm": 1,
      "ameliatjy": 17,
      "-": 32
    }
  },
  {
    "path": "docs/diagrams/SortSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "participant \":SortPersonCommandParser\" as SortPersonCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "participant \"expComparator: PersonExperienceComparator\" as PersonExperienceComparator LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "participant \"s : SortPersonCommand\" as SortPersonCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "[-\u003e LogicManager : execute(\"sort can exp/desc\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"sort can exp/desc\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "create SortPersonCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "AddressBookParser -\u003e SortPersonCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "activate SortPersonCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "SortPersonCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "deactivate SortPersonCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "AddressBookParser -\u003e SortPersonCommandParser : parse(\"sort can exp/desc\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "activate SortPersonCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "SortPersonCommandParser -\u003e SortPersonCommandParser : selectComparator(\"exp\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "activate SortPersonCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "create PersonExperienceComparator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "SortPersonCommandParser -\u003e PersonExperienceComparator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "activate PersonExperienceComparator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "deactivate SortPersonCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "create SortPersonCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "SortPersonCommandParser -\u003e SortPersonCommand : SortPersonCommand(expComparator)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "activate SortPersonCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "SortPersonCommand --\u003e SortPersonCommandParser : s"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "deactivate SortPersonCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "SortPersonCommandParser --\u003e AddressBookParser : s"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "deactivate SortPersonCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "SortPersonCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "destroy SortPersonCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "AddressBookParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "LogicManager -\u003e SortPersonCommand : execute()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "activate SortPersonCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "SortPersonCommand -\u003e Model : updateSortedPersonList(expComparator)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "Model --\u003e SortPersonCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "destroy PersonExperienceComparator"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "SortPersonCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "CommandResult --\u003e SortPersonCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "SortPersonCommand --\u003e LogicManager : \"Successfully sorted people\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "deactivate SortPersonCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 80
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": "skinparam arrowColor STORAGE_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Interface PersonAddressBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Interface JobAddressBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Class JsonAdaptedTag"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Class JsonPersonAddressBookStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Class JsonJobAddressBookStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Class JsonSerializablePersonAddressBookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Class JsonSerializableJobAddressBookStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "StorageManager o-right-\u003e \"1\" UserPrefsStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "StorageManager o--\u003e \"1\" PersonAddressBookStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "StorageManager o--\u003e \"1\" JobAddressBookStorage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "JsonPersonAddressBookStorage .right.|\u003e PersonAddressBookStorage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "JsonPersonAddressBookStorage .down.\u003e JsonSerializablePersonAddressBookStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "JsonSerializablePersonAddressBookStorage .down.\u003e JsonSerializablePerson"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "JsonSerializablePerson .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "JsonSerializablePerson .down.\u003e JsonAdaptedPerson"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "JsonJobAddressBookStorage .left.|\u003e JobAddressBookStorage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "JsonJobAddressBookStorage .down.\u003e JsonSerializableJobAddressBookStorage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "JsonSerializableJobAddressBookStorage .down.\u003e JsonSerializableJob"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": "JsonSerializableJob .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "JsonSerializableJob .down.\u003e JsonAdaptedJob"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "raythx98": 23,
      "g-erm": 1,
      "-": 14
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "skinparam classFontColor #000000"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "skinparam interfaceFontColor #000000"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "Class JobListPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "Class PersonAndJobTabPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "Class JobCard"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": "Class PersonTab"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "Class JobTab"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "MainWindow *-down--\u003e PersonAndJobTabPane"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "PersonAndJobTabPane *-down-\u003e PersonTab"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "PersonAndJobTabPane *-down-\u003e JobTab"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "PersonTab *-down-\u003e PersonListPanel"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "JobTab *-down-\u003e JobListPanel"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "PersonListPanel --\u003e PersonCard"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "JobListPanel --\u003e JobCard"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard --|\u003e UiPart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "JobCard -down-|\u003e UiPart"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "JobCard .down..\u003eModel"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "PersonCard .down..\u003eModel"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 15,
      "g-erm": 5,
      "-": 57
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define UI_COLOR #DABCEB"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define UI_COLOR_T1 #E1D5E7"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define UI_COLOR_T2 #AB68D1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define UI_COLOR_T3 #8233B0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define UI_COLOR_T4 #3E0C59"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define LOGIC_COLOR #7AD1D6"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define LOGIC_COLOR_T1 #B0E3E6"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define LOGIC_COLOR_T2 #50C0C6"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define LOGIC_COLOR_T3 #2AA2A9"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define LOGIC_COLOR_T4 #0E858B"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define MODEL_COLOR #F7E2A4"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define MODEL_COLOR_T1 #FFF2CC"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define MODEL_COLOR_T2 #F8D879"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define MODEL_COLOR_T3 #EDC345"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define MODEL_COLOR_T4 #E5AF0E"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define STORAGE_COLOR #F8C2BB"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define STORAGE_COLOR_T1 #FAD9D5"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define STORAGE_COLOR_T2 #EEABA3"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define STORAGE_COLOR_T3 #E9948A"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "!define STORAGE_COLOR_T4 #E46F62"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    FontColor #000000"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    StereotypeFontColor #000000"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    BoxFontColor #000000"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    FontColor #000000"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "skinparam MinClassWidth 100"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 1,
      "g-erm": 24,
      "-": 50
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "title: CANdidates"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T17-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T17-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T17-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T17-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "![Ui](https://i.imgur.com/ERqlm20.jpg)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "CANdidates is a powerful contact management application optimised for job recruiters; a brownfield project based on [Address Book Level-3](https://se-education.org/addressbook-level3/)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "While it has a Graphics User Interface (GUI). most of the user interactions happen using a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Job Recruiters can:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* Track candidates according to which job listing they are interested in"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* Centralised and categorised relevant contacts of all candidates"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* Reduce the hassle of having to look for applicants repeatedly on different platforms for each new job posting."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "#### Quick Links"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* [User Guide](https://ay2021s1-cs2103t-t17-3.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* [Developer Guide](https://ay2021s1-cs2103t-t17-3.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* [About Us](https://ay2021s1-cs2103t-t17-3.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "#### Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "raythx98": 17,
      "-": 11
    }
  },
  {
    "path": "docs/team/ameliatjy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "title: Amelia Tan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "## Project: CANdidates"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "CANdidates is a powerful contact management desktop App optimised for job recruiters to manage job applicants."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* **New Feature**: _{To be updated}_"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#search\u003dameliatjy\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByAuthors\u0026breakdown\u003dfalse\u0026tabOpen\u003dfalse)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* **Project management**: _{To be updated}_"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  * Managed releases `v1.1` - `v1.x` (x releases) on GitHub"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  * In charge of defining tasks for each release, assigning them to team members and tracking the completion."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* **Enhancements to existing features**: _{To be updated}_"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#](), [\\#]())"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#](), [\\#]())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  * About Us:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    * Update team\u0027s About Us page."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    * Documented user profile, value proposition and user stories."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    * Identified use cases."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* **Community**: _{To be updated}_"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#]()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  * Contributed to forum discussions (examples: []())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: []())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "* **Tools**: _{To be updated}_"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  * Integrated a new Github plugin () to the team repo"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 40
    }
  },
  {
    "path": "docs/team/breadpeanutbutter.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "title: Lee Joon Jie\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "## Project: CANdidates"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "CANdidates is a powerful contact management desktop App optimised for job recruiters to manage job applicants."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* **New Feature**: _{To be updated}_"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dbreadpeanutbutter\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dfalse)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* **Project management**: _{To be updated}_"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "  * Managed releases `v1.1` - `v1.x` (x releases) on GitHub"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "  * In charge of looking after code quality and ensuring adherence to coding standards."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* **Enhancements to existing features**: _{To be updated}_"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    * Update CANdidate User Guide"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* **Community**: _{To be updated}_"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#]()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "  * Contributed to forum discussions (examples: []())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: []())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "* **Tools**: _{To be updated}_"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "  * Integrated a third party library () to the project ([\\#]())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "  * Integrated a new Github plugin () to the team repo"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 32,
      "ameliatjy": 4
    }
  },
  {
    "path": "docs/team/g-erm.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": "title: Germaine Tan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": "## Project: CANdidates"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": "CANdidates is a powerful contact management desktop app optimised for job recruiters to manage job applicants."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": "* **New Feature**: Name _{To be updated}_"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": "  * What it does:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "  * Justification:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "  * Highlights:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#search\u003dg-erm\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByAuthors\u0026breakdown\u003dfalse\u0026tabOpen\u003dfalse)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "* **Project management**: _{To be updated}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": "  * Managed releases `v1.1` - `v1.x` (x releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "  * Ensured that the testing of the project is done properly and on time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": "* **Enhancements to existing features**: _{To be updated}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": "  * Enhancement (Pull requests [\\#](), [\\#]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": "* **Documentation**: _{To be updated}_"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    * Identified the non-functional requirements of the project."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    * Updated the glossary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": "* **Community**: _{To be updated}_"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#](), [\\#]()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": "  * Contributed to forum discussions (examples: [](), []())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [](), []())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": "* **Tools**: _{To be updated}_"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-erm"
        },
        "content": "  * Integrated a third party library to the project ([\\#]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": "  * Integrated a new Github plugin to the team repo"
      }
    ],
    "authorContributionMap": {
      "g-erm": 41
    }
  },
  {
    "path": "docs/team/raythx98.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "title: Toh Hong Xian (Ray)\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "## Project: CANdidates"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "CANdidates is a powerful contact management desktop app optimised for job recruiters to manage job applicants."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "\u003cimg src\u003d\"https://i.imgur.com/sfvvyn3.jpg\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "[[github](https://github.com/raythx98)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* Responsibilities: Deliverables and Deadlines"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* **New Feature**: find can"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * What it does: Searches the candidate list for all candidates with fields containing all the specified keywords."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * Justification: This feature improves the product significantly because a typical job recruiter has many candidates to handle, this feature will provide a convenient way for them to look for suitable candidates and streamline their search."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * Highlights: This enhancement was challenging as it requires chaining of various predicates to achieve the desired outcome. An in-depth understanding of the code base is required it involves numerous other classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* **New Feature**: find job"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * What it does: Searches the job list for all jobs with fields containing all the specified keywords."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * Justification: This feature improves the product significantly because a typical job recruiter has many job listings to handle, this feature will provide a convenient way for them to look for suitable jobs and streamline their search."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * Highlights: This enhancement was challenging as it requires chaining of various predicates to achieve the desired outcome. An in-depth understanding of the code base is required it involves numerous other classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#search\u003draythx98\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByAuthors\u0026breakdown\u003dfalse\u0026tabOpen\u003dfalse)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * Managed release `v1.2` (1 release) on GitHub."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * Ensured that project deliverables are done on time and in the right format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * In charge of versioning of the code, maintaining the code repository, integrating various parts of the software to create a whole."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * Implemented adding of candidates and jobs (Pull requests [\\#85](https://github.com/AY2021S1-CS2103T-T17-3/tp/pull/85))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * Implemented listing of candidates and jobs [\\#87](https://github.com/AY2021S1-CS2103T-T17-3/tp/pull/87)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * Wrote numerous utility classes for the purpose of testing ([\\#85](https://github.com/AY2021S1-CS2103T-T17-3/tp/pull/85), [\\#87](https://github.com/AY2021S1-CS2103T-T17-3/tp/pull/87))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * Wrote additional tests for existing features to increase code coverage by 4.43% ([\\#93](https://github.com/AY2021S1-CS2103T-T17-3/tp/pull/93), [\\#]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * Readme:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    * Maintained the readme regularly to match the project [\\#36](https://github.com/AY2021S1-CS2103T-T17-3/tp/pull/36)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    * Added documentation for the features `add` and `list` [\\#118](https://github.com/AY2021S1-CS2103T-T17-3/tp/pull/118)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    * Updated the help window image for feature `help` [\\#118](https://github.com/AY2021S1-CS2103T-T17-3/tp/pull/118)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#]()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * Contributed to forum discussions (examples: [#68](https://github.com/AY2021S1-CS2103T-T17-3/tp/issues/68))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [#]())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  * Integrated the code coverage badge to the team repo [\\#93](https://github.com/AY2021S1-CS2103T-T17-3/tp/pull/93)"
      }
    ],
    "authorContributionMap": {
      "raythx98": 58
    }
  },
  {
    "path": "docs/team/vangoghhh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "title: Nigel Ng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "## Project: CANdidates"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "CANdidates is a powerful contact management desktop App optimised for job recruiters to manage job applicants."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "* **New Feature**:  _{To be updated}_"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dvangoghhh\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dfalse)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "* **Project management**: _{To be updated}_"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "* Managed releases `v1.1` - `v1.x` (x releases) on GitHub"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "* In charge of designing and implementing the UI for each release."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "* **Enhancements to existing features**: _{To be updated}_"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "* readME:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    * Designed a UI mock up of our application and included in the readME document"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "* **Community**: _{To be updated}_"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#]()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "  * Contributed to forum discussions (examples: []())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: []())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "* **Tools**: _{To be updated}_"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "  * Integrated a third party library () to the project ([\\#]())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "  * Integrated a new Github plugin () to the team repo"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 31,
      "ameliatjy": 4
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "Create a new `Remark` in `seedu.address.model.information`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 1,
      "-": 393
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.information.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 1,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.JobAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.PersonAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.ReadOnlyJobAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyPersonAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.storage.JobAddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.storage.JsonJobAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.storage.JsonPersonAddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.storage.PersonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new JsonPersonAddressBookStorage(userPrefs.getPersonAddressBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobAddressBookStorage jobAddressBookStorage \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new JsonJobAddressBookStorage(userPrefs.getJobAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, jobAddressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}s\u0027 address books and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * The data from the sample address books will be used instead if {@code storage}s\u0027 address books are not found,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * or empty address books will be used instead if errors occur when reading {@code storage}s\u0027 address books."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Optional\u003cReadOnlyPersonAddressBook\u003e personAddressBookOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        ReadOnlyPersonAddressBook initialPersonData;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Optional\u003cReadOnlyJobAddressBook\u003e jobAddressBookOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        ReadOnlyJobAddressBook initialJobData;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            personAddressBookOptional \u003d storage.readPersonAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            if (!personAddressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                logger.info(\"Person data file not found. Will be starting with a sample PersonAddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            initialPersonData \u003d personAddressBookOptional.orElseGet(SampleDataUtil::getSamplePersonAddressBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                    + \"Will be starting with an empty PersonAddressBook\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            initialPersonData \u003d new PersonAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                    + \"Will be starting with an empty PersonAddressBook\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            initialPersonData \u003d new PersonAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            jobAddressBookOptional \u003d storage.readJobAddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            if (!jobAddressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                logger.info(\"Job data file not found. Will be starting with a sample JobAddressBook\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            initialJobData \u003d jobAddressBookOptional.orElseGet(SampleDataUtil::getSampleJobAddressBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                    + \"Will be starting with an empty JobAddressBook\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            initialJobData \u003d new JobAddressBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                    + \"Will be starting with an empty JobAddressBook\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            initialJobData \u003d new JobAddressBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return new ModelManager(initialPersonData, initialJobData, userPrefs);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 42,
      "ameliatjy": 5,
      "-": 163
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 700;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1280;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 2,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The candidate index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d candidates listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public static final String MESSAGE_JOBS_LISTED_OVERVIEW \u003d \"%1$d jobs listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_INVALID_JOB_DISPLAYED_INDEX \u003d \"The job index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 3,
      "ameliatjy": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code phrase}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *   Ignores case and does not require a full word match."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *       containsPhraseIgnoreCase(\"Joanna wong\", \"joan\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *       containsWordIgnoreCase(\"facebook@recruitment.com\", \"@REcRuiTMent.com\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *       containsWordIgnoreCase(\"google@recruitment.com\", \"@recruitment.sg\") \u003d\u003d false //does not contain the phrase"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param phrase cannot be null, cannot be empty, must be a single phrase"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public static boolean containsPhraseIgnoreCase(String sentence, String phrase) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        requireNonNull(phrase);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String preppedWord \u003d phrase.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String lowerCasePhrase \u003d phrase.toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String lowerCaseSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return lowerCaseSentence.contains(lowerCasePhrase);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 24,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyPersonAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Returns the PersonAddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @see seedu.address.model.Model#getPersonAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    ReadOnlyPersonAddressBook getPersonAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    ObservableList\u003cJob\u003e getFilteredJobList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /** Returns an unmodifiable view of the sorted list of persons */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    ObservableList\u003cPerson\u003e getSortedPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /** Returns an unmodifiable view of the sorted list of jobs */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    ObservableList\u003cJob\u003e getSortedJobList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Path getPersonAddressBookFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 8,
      "g-erm": 2,
      "ameliatjy": 6,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyPersonAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            storage.savePersonAddressBook(model.getPersonAddressBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            storage.saveJobAddressBook(model.getJobAddressBook());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public ReadOnlyPersonAddressBook getPersonAddressBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return model.getPersonAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public ObservableList\u003cJob\u003e getFilteredJobList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return model.getFilteredJobList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public ObservableList\u003cPerson\u003e getSortedPersonList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return model.getSortedPersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public ObservableList\u003cJob\u003e getSortedJobList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return model.getSortedJobList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Path getPersonAddressBookFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return model.getPersonAddressBookFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 10,
      "BreadPeanutButter": 2,
      "g-erm": 5,
      "ameliatjy": 7,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddJobCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOB_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VACANCY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Adds a job to the job address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class AddJobCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add job\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a job to the job address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            + PREFIX_JOB_TITLE + \"JOB TITLE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            + PREFIX_COMPANY_NAME + \"COMPANY NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            + PREFIX_VACANCY + \"VACANCY \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            + PREFIX_JOB_TITLE + \"Cashier \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            + PREFIX_COMPANY_NAME + \"Walmart \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            + PREFIX_PHONE + \"68765432 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            + PREFIX_EMAIL + \"recruitment@walmart.com \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            + PREFIX_ADDRESS + \"1, Manhatten Street 2, #01-25 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            + PREFIX_VACANCY + \"2 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            + PREFIX_PRIORITY + \"low \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            + PREFIX_TAG + \"fulltime \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New job added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_JOB \u003d \"This job already exists in the job address book\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private final Job toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Creates an AddJobCommand to add the specified {@code Job}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public AddJobCommand(Job job) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        requireNonNull(job);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        toAdd \u003d job;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (model.hasJob(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_JOB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        model.addJob(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), \"Jobs\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                || (other instanceof AddJobCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddJobCommand) other).toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 2,
      "raythx98": 66,
      "g-erm": 5,
      "ameliatjy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddPersonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLACKLIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_APPLICATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPERIENCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL_LINK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class AddPersonCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add can\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the person address book. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_EXPERIENCE + \"EXPERIENCE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_DATE_OF_APPLICATION + \"DATE OF APPLICATION \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_URL_LINK + \"URL LINK] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_SALARY + \"EXPECTED SALARY] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_BLACKLIST + \"IS BLACKLISTED] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_EXPERIENCE + \"3.0 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_DATE_OF_APPLICATION + \"31-12-20 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_URL_LINK + \"linkedin.com/in/johndoe \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_SALARY + \"5500 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_BLACKLIST + \"false \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New candidate added: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This candidate already exists in the address book.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Creates an AddPersonCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public AddPersonCommand(Person person) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), \"Candidates\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                || (other instanceof AddPersonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPersonCommand) other).toAdd));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 18,
      "raythx98": 7,
      "ameliatjy": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearJobCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.JobAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Clears the job list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class ClearJobCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear job\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"job list has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        model.setJobAddressBook(new JobAddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearPersonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.PersonAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Clears the candidate list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class ClearPersonCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear can\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Candidate list has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        model.setPersonAddressBook(new PersonAddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 4,
      "ameliatjy": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private final Optional\u003cString\u003e tabName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.tabName \u003d Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, String tabName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.tabName \u003d Optional.of(tabName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public CommandResult(String feedbackToUser, String tabName) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this(feedbackToUser, false, false, tabName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public Optional\u003cString\u003e getTabName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return tabName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 24,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteJobCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Deletes a job identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class DeleteJobCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete job\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \": Deletes the job identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public static final String MESSAGE_DELETE_JOB_SUCCESS \u003d \"Deleted Job: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public DeleteJobCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        List\u003cJob\u003e lastShownList \u003d model.getFilteredJobList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_JOB_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Job jobToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        model.deleteJob(jobToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_JOB_SUCCESS, jobToDelete), \"Jobs\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                || (other instanceof DeleteJobCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteJobCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 1,
      "BreadPeanutButter": 51,
      "ameliatjy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeletePersonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Deletes a candidate identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class DeletePersonCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete can\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Candidate: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public DeletePersonCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete), \"Candidates\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                || (other instanceof DeletePersonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeletePersonCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 1,
      "BreadPeanutButter": 7,
      "ameliatjy": 1,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditJobCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOB_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VACANCY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_JOBS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.CompanyName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Priority;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Vacancy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Edits the details of an existing job in the address book."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class EditJobCommand extends Command {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit job\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the job identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"by the index number used in the displayed job list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_JOB_TITLE + \"JOB TITLE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_COMPANY_NAME + \"COMPANY NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            + \"[\" + PREFIX_VACANCY + \"VACANCY] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_JOB_TITLE + \"Zookeeper\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_EMAIL + \"goggle@example.com\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_PRIORITY + \"low \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_EDIT_JOB_SUCCESS \u003d \"Edited job: %1$s\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_JOB \u003d \"This job already exists in the address book.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final EditJobDescriptor editJobDescriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param index of the job in the filtered person list to edit"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param editJobDescriptor details to edit the person with"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditJobCommand(Index index, EditJobDescriptor editJobDescriptor) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(editJobDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.editJobDescriptor \u003d new EditJobDescriptor(editJobDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        List\u003cJob\u003e lastShownList \u003d model.getFilteredJobList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_JOB_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Job jobToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Job editedJob \u003d createEditedJob(jobToEdit, editJobDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (!jobToEdit.isSameJob(editedJob) \u0026\u0026 model.hasJob(editedJob)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_JOB);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        model.setJob(jobToEdit, editedJob);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        model.updateFilteredJobList(PREDICATE_SHOW_ALL_JOBS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_JOB_SUCCESS, editedJob), \"Jobs\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Creates and returns a {@code Job} with the details of {@code jobToEdit}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * edited with {@code editJobDescriptor}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static Job createEditedJob(Job jobToEdit, EditJobDescriptor editJobDescriptor) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assert jobToEdit !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Name updatedJobTitle \u003d editJobDescriptor.getJobTitle().orElse(jobToEdit.getJobTitle());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        CompanyName updatedCompanyName \u003d editJobDescriptor.getCompanyName().orElse(jobToEdit.getCompanyName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Phone updatedPhone \u003d editJobDescriptor.getPhone().orElse(jobToEdit.getPhone());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Email updatedEmail \u003d editJobDescriptor.getEmail().orElse(jobToEdit.getEmail());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Address updatedAddress \u003d editJobDescriptor.getAddress().orElse(jobToEdit.getAddress());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editJobDescriptor.getTags().orElse(jobToEdit.getTags());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Priority updatedPriority \u003d editJobDescriptor.getPriority().orElse(jobToEdit.getPriority());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Vacancy updatedVacancy \u003d editJobDescriptor.getVacancy().orElse(jobToEdit.getVacancy());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return new Job(updatedJobTitle, updatedCompanyName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                updatedTags, updatedPriority, updatedVacancy);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (!(other instanceof EditJobCommand)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand e \u003d (EditJobCommand) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u0026\u0026 editJobDescriptor.equals(e.editJobDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Stores the details to edit the job with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * corresponding field value of the job."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static class EditJobDescriptor {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        private Name jobTitle;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        private CompanyName companyName;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        private Vacancy vacancy;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public EditJobDescriptor() {}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public EditJobDescriptor(EditJobDescriptor toCopy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            setJobTitle(toCopy.jobTitle);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            setCompanyName(toCopy.companyName);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            setVacancy(toCopy.vacancy);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return CollectionUtil.isAnyNonNull(jobTitle, companyName, phone, email, address, tags, priority, vacancy);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public void setJobTitle(Name jobTitle) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            this.jobTitle \u003d jobTitle;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public Optional\u003cName\u003e getJobTitle() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return Optional.ofNullable(jobTitle);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void setCompanyName(CompanyName companyName) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            this.companyName \u003d companyName;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public Optional\u003cCompanyName\u003e getCompanyName() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return Optional.ofNullable(companyName);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        public void setVacancy(Vacancy vacancy) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            this.vacancy \u003d vacancy;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        public Optional\u003cVacancy\u003e getVacancy() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return Optional.ofNullable(vacancy);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            if (!(other instanceof EditJobDescriptor)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            EditJobDescriptor e \u003d (EditJobDescriptor) other;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return getJobTitle().equals(e.getJobTitle())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u0026\u0026 getCompanyName().equals(e.getCompanyName())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                    \u0026\u0026 getVacancy().equals(e.getVacancy());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 1,
      "BreadPeanutButter": 235,
      "raythx98": 5,
      "g-erm": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditPersonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLACKLIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_APPLICATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPERIENCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL_LINK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.BlacklistStatus;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Experience;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Salary;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.UrlLink;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Edits the details of an existing candidate in the address book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class EditPersonCommand extends Command {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit can\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the candidate identified \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_EXPERIENCE + \"EXPERIENCE] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_DATE_OF_APPLICATION + \"DATE OF APPLICATION] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_URL_LINK + \"PROFILE LINK] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_SALARY + \"EXPECTED SALARY] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[\" + PREFIX_BLACKLIST + \"IS BLACKLISTED] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_EXPERIENCE + \"2.5 \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_SALARY + \"6500 \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_URL_LINK + \"linkedin.com/in/johndoe \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + PREFIX_BLACKLIST + \"true \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited candidate: %1$s\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This candidate already exists in the address book.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditPersonCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), \"Candidates\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Experience updatedExperience \u003d editPersonDescriptor.getExperience()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .orElse(personToEdit.getExperience());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Date updatedDateOfApplication \u003d editPersonDescriptor.getDateOfApplication()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .orElse(personToEdit.getDateOfApplication());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        BlacklistStatus updatedBlacklistStatus \u003d editPersonDescriptor.getBlackListStatus()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .orElse(personToEdit.getBlacklistStatus());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Optional\u003cAddress\u003e updatedAddressOptional \u003d editPersonDescriptor.getAddressOptional()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .orElse(personToEdit.getAddressOptional());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Optional\u003cUrlLink\u003e updatedUrlLinkOptional \u003d editPersonDescriptor.getUrlLinkOptional()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .orElse(personToEdit.getUrlLinkOptional());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Optional\u003cSalary\u003e updatedSalaryOptional \u003d editPersonDescriptor.getSalaryOptional()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .orElse(personToEdit.getSalaryOptional());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedExperience,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                updatedDateOfApplication, updatedBlacklistStatus, updatedAddressOptional,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                updatedUrlLinkOptional, updatedSalaryOptional, updatedTags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (!(other instanceof EditPersonCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand e \u003d (EditPersonCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        private Experience experience;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        private Date dateOfApplication;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        private BlacklistStatus blacklistStatus;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        private Optional\u003cAddress\u003e addressOptional;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        private Optional\u003cUrlLink\u003e urlLinkOptional;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        private Optional\u003cSalary\u003e salaryOptional;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            setExperience(toCopy.experience);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            setDateOfApplication(toCopy.dateOfApplication);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            setBlackListStatus(toCopy.blacklistStatus);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            setAddressOptional(toCopy.addressOptional);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            setUrlLinkOptional(toCopy.urlLinkOptional);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            setSalaryOptional(toCopy.salaryOptional);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, experience, dateOfApplication,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    blacklistStatus, addressOptional, urlLinkOptional, salaryOptional, tags);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public void setExperience(Experience experience) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            this.experience \u003d experience;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public Optional\u003cExperience\u003e getExperience() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return Optional.ofNullable(experience);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public void setDateOfApplication(Date dateOfApplication) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            this.dateOfApplication \u003d dateOfApplication;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public Optional\u003cDate\u003e getDateOfApplication() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return Optional.ofNullable(dateOfApplication);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public void setBlackListStatus(BlacklistStatus blackListStatus) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            this.blacklistStatus \u003d blackListStatus;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public Optional\u003cBlacklistStatus\u003e getBlackListStatus() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return Optional.ofNullable(blacklistStatus);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public void setAddressOptional(Optional\u003cAddress\u003e addressOptional) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            this.addressOptional \u003d addressOptional;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public Optional\u003cOptional\u003cAddress\u003e\u003e getAddressOptional() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return Optional.ofNullable(addressOptional);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public void setUrlLinkOptional(Optional\u003cUrlLink\u003e urlLinkOptional) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            this.urlLinkOptional \u003d urlLinkOptional;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public Optional\u003cOptional\u003cUrlLink\u003e\u003e getUrlLinkOptional() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return Optional.ofNullable(urlLinkOptional);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public void setSalaryOptional(Optional\u003cSalary\u003e salaryOptional) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            this.salaryOptional \u003d salaryOptional;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public Optional\u003cOptional\u003cSalary\u003e\u003e getSalaryOptional() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return Optional.ofNullable(salaryOptional);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u0026\u0026 getExperience().equals(e.getExperience())"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u0026\u0026 getDateOfApplication().equals(e.getDateOfApplication())"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u0026\u0026 getBlackListStatus().equals(e.getBlackListStatus())"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u0026\u0026 getAddressOptional().equals(e.getAddressOptional())"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u0026\u0026 getUrlLinkOptional().equals(e.getUrlLinkOptional())"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u0026\u0026 getSalaryOptional().equals(e.getSalaryOptional())"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 1,
      "BreadPeanutButter": 110,
      "ameliatjy": 5,
      "-": 200
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindJobCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Finds and lists all jobs in job address book whose details contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class FindJobCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find job\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all jobs whose details contain all of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" c/samsung e/recruitment@samsung.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final List\u003cPredicate\u003cJob\u003e\u003e predicates;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Constructs a {@code FindJobCommand} from the given {@code predicate}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public FindJobCommand(Predicate\u003cJob\u003e predicate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cPredicate\u003cJob\u003e\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicateList.add(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.predicates \u003d predicateList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Constructs a {@code FindJobCommand} from the given list of predicates {@code predicates}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public FindJobCommand(List\u003cPredicate\u003cJob\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Returns a composed predicate that represents a short-circuiting logical AND of all predicates in the list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * {@code predicates}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public static Predicate\u003cJob\u003e composePredicatesList(List\u003cPredicate\u003cJob\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (predicates.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            return predicates.get(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Predicate\u003cJob\u003e composedPredicate \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        for (Predicate\u003cJob\u003e p : predicates) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            composedPredicate \u003d composedPredicate.and(p);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return composedPredicate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        model.updateFilteredJobList(composePredicatesList(predicates));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                String.format(Messages.MESSAGE_JOBS_LISTED_OVERVIEW, model.getFilteredJobList().size()),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \"Jobs\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                || (other instanceof FindJobCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 predicates.equals(((FindJobCommand) other).predicates)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 2,
      "raythx98": 12,
      "ameliatjy": 38,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindPersonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Finds and lists all persons in address book whose details contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class FindPersonCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find can\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose details contain all of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/alice p/90909090\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final List\u003cPredicate\u003cPerson\u003e\u003e predicates;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Constructs a {@code FindPersonCommand} from the given {@code predicate}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public FindPersonCommand(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicateList.add(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.predicates \u003d predicateList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Constructs a {@code FindPersonCommand} from the given list of predicate {@code predicates}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public FindPersonCommand(List\u003cPredicate\u003cPerson\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Returns a composed predicate that represents a short-circuiting logical AND of all predicates in the list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * {@code predicates}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public static Predicate\u003cPerson\u003e composePredicatesList(List\u003cPredicate\u003cPerson\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (predicates.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            return predicates.get(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Predicate\u003cPerson\u003e composedPredicate \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        for (Predicate\u003cPerson\u003e p : predicates) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            composedPredicate \u003d composedPredicate.and(p);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return composedPredicate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        model.updateFilteredPersonList(composePredicatesList(predicates));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \"Candidates\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                || (other instanceof FindPersonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 predicates.equals(((FindPersonCommand) other).predicates)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 2,
      "raythx98": 9,
      "ameliatjy": 38,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListJobCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_JOBS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Lists all jobs in the job address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class ListJobCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list job\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all jobs\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        model.updateFilteredJobList(PREDICATE_SHOW_ALL_JOBS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"Jobs\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 1,
      "raythx98": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListPersonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Lists all persons in the person address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class ListPersonCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list can\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"Candidates\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 1,
      "raythx98": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortJobCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_ORDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": " * Sorts the list of jobs using the specified comparator."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "public class SortJobCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort job\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the list of jobs in the address book\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            + \"according to the specified order given by user input.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            + PREFIX_SORT_TYPE + \"FIELD_TO_BE_SORTED \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            + PREFIX_SORT_ORDER + \"ORDER_TO_SORT\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            + PREFIX_SORT_TYPE + \"v \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            + PREFIX_SORT_ORDER + \"asc \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully sorted jobs \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String MESSAGE_SORT_JOB_TYPE_INVALID \u003d \"Only vacancy and priority can be sorted for jobs. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            + \"Input for field to be sorted must be either v or pr.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private final Comparator\u003cJob\u003e comparator;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private final String sortMessage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Constructor for SortJobCommand. Checks the order specified and forms the appropriate comparator."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public SortJobCommand(Comparator\u003cJob\u003e comparator, Boolean isAscending) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (!isAscending) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            this.sortMessage \u003d comparator.toString() + \"in descending order.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            this.comparator \u003d comparator.reversed();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            this.sortMessage \u003d comparator.toString() + \"in ascending order.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        model.updateSortedJobList(comparator);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + this.sortMessage, \"Jobs\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (!(other instanceof SortJobCommand)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        SortJobCommand s \u003d (SortJobCommand) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return comparator.equals(s.comparator);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-erm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 3,
      "g-erm": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortPersonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_ORDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Sorts the persons using the specified comparator."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class SortPersonCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort can\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the candidates in the address book\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            + \"according to the specified order given by the user input. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            + PREFIX_SORT_TYPE + \"FIELD_TO_BE_SORTED \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            + PREFIX_SORT_ORDER + \"ORDER_TO_SORT\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            + PREFIX_SORT_TYPE + \"exp \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            + PREFIX_SORT_ORDER + \"asc \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully sorted list of candidates \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static final String MESSAGE_SORT_TYPE_INVALID \u003d \"Invalid Sort Type.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            + \"Sort type must be one of exp, sal, bl or doa\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SortPersonCommand.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private final Comparator\u003cPerson\u003e comparator;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private final String sortMessage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructor for SortPersonCommand. Checks the order of sort required"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * and producers the appropriate comparator."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public SortPersonCommand(Comparator\u003cPerson\u003e comparator, Boolean isAscending) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assert (comparator !\u003d null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (!isAscending) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            this.sortMessage \u003d comparator.toString() + \"in descending order.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            this.comparator \u003d comparator.reversed();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            this.sortMessage \u003d comparator.toString() + \"in ascending order.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        model.updateSortedPersonList(comparator);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        logger.info(\"Sorting People\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + this.sortMessage, \"Candidates\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (!(other instanceof SortPersonCommand)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        SortPersonCommand s \u003d (SortPersonCommand) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return comparator.equals(s.comparator);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 79,
      "g-erm": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddJobCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOB_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VACANCY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.AddJobCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.CompanyName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Vacancy;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Parses input arguments and creates a new AddJobCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class AddJobCommandParser implements Parser\u003cAddJobCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddJobCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * and returns an AddJobommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public AddJobCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_JOB_TITLE, PREFIX_COMPANY_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                        PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG, PREFIX_PRIORITY, PREFIX_VACANCY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_JOB_TITLE, PREFIX_COMPANY_NAME, PREFIX_ADDRESS, PREFIX_PHONE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                PREFIX_EMAIL, PREFIX_VACANCY) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddJobCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Name jobTitle \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_JOB_TITLE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        CompanyName companyName \u003d ParserUtil.parseCompanyName(argMultimap.getValue(PREFIX_COMPANY_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getAllValues(PREFIX_PRIORITY));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Vacancy vacancy \u003d ParserUtil.parseVacancy(argMultimap.getValue(PREFIX_VACANCY).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Job job \u003d new Job(jobTitle, companyName, phone, email, address, tagList, priority, vacancy);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return new AddJobCommand(job);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 61,
      "g-erm": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddPersonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLACKLIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_APPLICATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPERIENCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL_LINK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.AddPersonCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.BlacklistStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Experience;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Salary;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.UrlLink;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Parses input arguments and creates a new AddPersonCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class AddPersonCommandParser implements Parser\u003cAddPersonCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPersonCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * and returns an AddPersonCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public AddPersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        PREFIX_DATE_OF_APPLICATION, PREFIX_BLACKLIST, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        PREFIX_EXPERIENCE, PREFIX_URL_LINK, PREFIX_SALARY, PREFIX_TAG);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                PREFIX_EMAIL, PREFIX_EXPERIENCE, PREFIX_DATE_OF_APPLICATION)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Experience experience \u003d ParserUtil.parseExperience(argMultimap.getValue(PREFIX_EXPERIENCE).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Date dateOfApplication \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE_OF_APPLICATION).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        BlacklistStatus blacklistStatus \u003d arePrefixesPresent(argMultimap, PREFIX_BLACKLIST)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                ? ParserUtil.parseBlacklistStatus(argMultimap.getValue(PREFIX_BLACKLIST).get())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                : new BlacklistStatus(\"false\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Optional\u003cAddress\u003e addressOptional \u003d arePrefixesPresent(argMultimap, PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                ? Optional.of(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Optional\u003cUrlLink\u003e urlLinkOptional \u003d arePrefixesPresent(argMultimap, PREFIX_URL_LINK)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                ? Optional.of(ParserUtil.parseUrlLink(argMultimap.getValue(PREFIX_URL_LINK).get()))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Optional\u003cSalary\u003e salaryOptional \u003d arePrefixesPresent(argMultimap, PREFIX_SALARY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                ? Optional.of(ParserUtil.parseSalary(argMultimap.getValue(PREFIX_SALARY).get()))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Person person \u003d new Person(name, phone, email, experience, dateOfApplication,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                blacklistStatus, addressOptional, urlLinkOptional, salaryOptional, tagList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return new AddPersonCommand(person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 32,
      "raythx98": 8,
      "ameliatjy": 5,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.AddJobCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.AddPersonCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.ClearJobCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.ClearPersonCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.DeleteJobCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.DeletePersonCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditJobCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.FindJobCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.FindPersonCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.ListJobCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.ListPersonCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.logic.commands.SortJobCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.logic.commands.SortPersonCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final Pattern COMPLEX_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            Pattern.compile(\"(?\u003cfirstCommandWord\u003e\\\\S+) (?\u003csecondCommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final Pattern SIMPLE_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final Matcher simpleMatcher \u003d SIMPLE_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final Matcher complexMatcher \u003d COMPLEX_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (simpleMatcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            // Simple command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return parseSimpleCommand(simpleMatcher);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } else if (complexMatcher.matches()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            // Complex command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return parseComplexCommand(complexMatcher);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Parses user input into complex command for execution."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * This is to be used for commands with more than 1 command word and possibly arguments."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param complexCommandMatcher Matcher that stores the complex command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Command parseComplexCommand(Matcher complexCommandMatcher) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final String firstCommandWord \u003d complexCommandMatcher.group(\"firstCommandWord\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final String secondCommandWord \u003d complexCommandMatcher.group(\"secondCommandWord\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final String fullCommandWord \u003d firstCommandWord + \" \" + secondCommandWord;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final String arguments \u003d complexCommandMatcher.group(\"arguments\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        switch (fullCommandWord) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        case AddPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            return new AddPersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        case AddJobCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            return new AddJobCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        case EditPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return new EditPersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        case EditJobCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return new EditJobCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        case DeletePersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return new DeletePersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        case DeleteJobCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return new DeleteJobCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        case ClearPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return new ClearPersonCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        case ClearJobCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return new ClearJobCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        case FindPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            return new FindPersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        case FindJobCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            return new FindJobCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        case SortPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return new SortPersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        case SortJobCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return new SortJobCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        case ListPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            return new ListPersonCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        case ListJobCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            return new ListJobCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Parses user input into simple command for execution."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * This is to be used for commands with only 1 command word and no arguments."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param simpleCommandMatcher Matcher that stores the complex command"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Command parseSimpleCommand(Matcher simpleCommandMatcher) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final String commandWord \u003d simpleCommandMatcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 4,
      "BreadPeanutButter": 62,
      "raythx98": 22,
      "g-erm": 4,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final Prefix PREFIX_JOB_TITLE \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final Prefix PREFIX_COMPANY_NAME \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"pr/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final Prefix PREFIX_VACANCY \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final Prefix PREFIX_EXPERIENCE \u003d new Prefix(\"exp/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final Prefix PREFIX_URL_LINK \u003d new Prefix(\"link/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final Prefix PREFIX_SALARY \u003d new Prefix(\"sal/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final Prefix PREFIX_DATE_OF_APPLICATION \u003d new Prefix(\"doa/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final Prefix PREFIX_BLACKLIST \u003d new Prefix(\"bl/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /* Sort Keywords */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static final Prefix PREFIX_SORT_ORDER \u003d new Prefix(\"order/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static final Prefix PREFIX_SORT_TYPE \u003d new Prefix(\"type/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 3,
      "BreadPeanutButter": 5,
      "raythx98": 2,
      "g-erm": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteJobCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.DeleteJobCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Parses input arguments and creates a new DeleteJobCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class DeleteJobCommandParser implements Parser\u003cDeleteJobCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteJobCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * and returns a DeleteJobCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public DeleteJobCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return new DeleteJobCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteJobCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeletePersonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.DeletePersonCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Parses input arguments and creates a new DeletePersonCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class DeletePersonCommandParser implements Parser\u003cDeletePersonCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public DeletePersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return new DeletePersonCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 6,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditJobCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOB_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VACANCY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditJobCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditJobCommand.EditJobDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": " * Parses input arguments and creates a new EditJobCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class EditJobCommandParser implements Parser\u003cEditJobCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditJobCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * and returns an EditJobCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditJobCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_JOB_TITLE, PREFIX_COMPANY_NAME,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG, PREFIX_PRIORITY, PREFIX_VACANCY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, EditJobCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobDescriptor editJobDescriptor \u003d new EditJobDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_JOB_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            editJobDescriptor.setJobTitle(ParserUtil.parseName(argMultimap.getValue(PREFIX_JOB_TITLE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMPANY_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            editJobDescriptor.setCompanyName(ParserUtil.parseCompanyName("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                    argMultimap.getValue(PREFIX_COMPANY_NAME).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            editJobDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            editJobDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            editJobDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            editJobDescriptor.setPriority(ParserUtil.parsePriorityString(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VACANCY).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            editJobDescriptor.setVacancy(ParserUtil.parseVacancy(argMultimap.getValue(PREFIX_VACANCY).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editJobDescriptor::setTags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (!editJobDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new ParseException(EditJobCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new EditJobCommand(index, editJobDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 85,
      "raythx98": 2,
      "g-erm": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditPersonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLACKLIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_APPLICATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPERIENCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL_LINK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": " * Parses input arguments and creates a new EditPersonCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class EditPersonCommandParser implements Parser\u003cEditPersonCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPersonCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * and returns an EditPersonCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditPersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        PREFIX_DATE_OF_APPLICATION, PREFIX_BLACKLIST, PREFIX_EXPERIENCE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_URL_LINK, PREFIX_SALARY, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EXPERIENCE).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            editPersonDescriptor.setExperience(ParserUtil"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    .parseExperience(argMultimap.getValue(PREFIX_EXPERIENCE).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_OF_APPLICATION).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            editPersonDescriptor.setDateOfApplication(ParserUtil"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    .parseDate(argMultimap.getValue(PREFIX_DATE_OF_APPLICATION).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BLACKLIST).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            editPersonDescriptor.setBlackListStatus(ParserUtil"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    .parseBlacklistStatus(argMultimap.getValue(PREFIX_BLACKLIST).get()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final boolean isAddressPrefixPresent \u003d argMultimap.getValue(PREFIX_ADDRESS).isPresent();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (isAddressPrefixPresent \u0026\u0026 argMultimap.getValue(PREFIX_ADDRESS).get().equals(\"\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            // reset address to nothing"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            editPersonDescriptor.setAddressOptional(Optional.empty());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } else if (isAddressPrefixPresent \u0026\u0026 !argMultimap.getValue(PREFIX_ADDRESS).get().equals(\"\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            editPersonDescriptor.setAddressOptional(Optional.of(ParserUtil"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    .parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get())));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final boolean isUrlLinkPrefixPresent \u003d argMultimap.getValue(PREFIX_URL_LINK).isPresent();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (isUrlLinkPrefixPresent \u0026\u0026 argMultimap.getValue(PREFIX_URL_LINK).get().equals(\"\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            // reset url link to nothing"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            editPersonDescriptor.setUrlLinkOptional(Optional.empty());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } else if (isUrlLinkPrefixPresent \u0026\u0026 !argMultimap.getValue(PREFIX_URL_LINK).get().equals(\"\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            editPersonDescriptor.setUrlLinkOptional(Optional.of(ParserUtil"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        .parseUrlLink(argMultimap.getValue(PREFIX_URL_LINK).get())));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final boolean isSalaryPrefixPresent \u003d argMultimap.getValue(PREFIX_SALARY).isPresent();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (isSalaryPrefixPresent \u0026\u0026 argMultimap.getValue(PREFIX_SALARY).get().equals(\"\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            // reset salary to nothing"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            editPersonDescriptor.setSalaryOptional(Optional.empty());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } else if (isSalaryPrefixPresent \u0026\u0026 !argMultimap.getValue(PREFIX_SALARY).get().equals(\"\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            editPersonDescriptor.setSalaryOptional(Optional.of(ParserUtil"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    .parseSalary(argMultimap.getValue(PREFIX_SALARY).get())));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new ParseException(EditPersonCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new EditPersonCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 60,
      "g-erm": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindJobCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOB_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VACANCY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.FindJobCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.JobAddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.JobCompanyNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.JobEmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.JobJobTitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.JobPhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.JobPriorityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.JobTagsContainKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.JobVacancyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Parses input arguments and creates a new FindJobCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class FindJobCommandParser implements Parser\u003cFindJobCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindJobCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * and returns a FindJobCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public FindJobCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cPredicate\u003cJob\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindJobCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_JOB_TITLE, PREFIX_COMPANY_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_PRIORITY, PREFIX_VACANCY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindJobCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_JOB_TITLE)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String jobTitle \u003d argMultimap.getValue(PREFIX_JOB_TITLE).orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(jobTitle);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(jobTitle);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new JobJobTitleContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_COMPANY_NAME)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String company \u003d argMultimap.getValue(PREFIX_COMPANY_NAME).orElse(\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(company);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(company);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new JobCompanyNameContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_PHONE)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String phone \u003d argMultimap.getValue(PREFIX_PHONE).orElse(\"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(phone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(phone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new JobPhoneContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_EMAIL)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String email \u003d argMultimap.getValue(PREFIX_EMAIL).orElse(\"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(email);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(email);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new JobEmailContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String address \u003d argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(address);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(address);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new JobAddressContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String tag \u003d argMultimap.getValue(PREFIX_TAG).orElse(\"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(tag);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(tag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new JobTagsContainKeywordsPredicate(words));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_PRIORITY)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String priority \u003d argMultimap.getValue(PREFIX_PRIORITY).orElse(\"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(priority);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(priority);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new JobPriorityContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_VACANCY)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String vacancy \u003d argMultimap.getValue(PREFIX_VACANCY).orElse(\"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(vacancy);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(vacancy);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new JobVacancyContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return new FindJobCommand(predicates);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Splits a String into words."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param userInput User specified keyword for a field."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @return a List containing the words."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public List\u003cString\u003e splitInput(String userInput) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String[] words \u003d userInput.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Collections.addAll(keywords, words);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Checks if userInput is empty."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param userInput User specified keyword for a field."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void checkInput(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (userInput.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindJobCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 71,
      "ameliatjy": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindPersonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLACKLIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_APPLICATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPERIENCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL_LINK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.FindPersonCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.PersonAddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.PersonApplicationContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.PersonBlacklistContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.PersonEmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.PersonExperienceContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.PersonNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.PersonPhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.PersonSalaryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.PersonTagsContainKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.predicate.PersonUrlLinkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Parses input arguments and creates a new FindPersonCommand object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class FindPersonCommandParser implements Parser\u003cFindPersonCommand\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindPersonCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * and returns a FindPersonCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public FindPersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                        PREFIX_EXPERIENCE, PREFIX_DATE_OF_APPLICATION, PREFIX_SALARY, PREFIX_BLACKLIST,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                        PREFIX_URL_LINK, PREFIX_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String name \u003d argMultimap.getValue(PREFIX_NAME).orElse(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new PersonNameContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_PHONE)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String phone \u003d argMultimap.getValue(PREFIX_PHONE).orElse(\"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(phone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(phone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new PersonPhoneContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_EMAIL)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String email \u003d argMultimap.getValue(PREFIX_EMAIL).orElse(\"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(email);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(email);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new PersonEmailContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String address \u003d argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(address);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(address);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new PersonAddressContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_EXPERIENCE)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String experience \u003d argMultimap.getValue(PREFIX_EXPERIENCE).orElse(\"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(experience);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(experience);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new PersonExperienceContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DATE_OF_APPLICATION)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String dateOfApplication \u003d argMultimap.getValue(PREFIX_DATE_OF_APPLICATION).orElse(\"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(dateOfApplication);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(dateOfApplication);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new PersonApplicationContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_SALARY)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String salary \u003d argMultimap.getValue(PREFIX_SALARY).orElse(\"\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(salary);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(salary);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new PersonSalaryContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_BLACKLIST)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String blacklist \u003d argMultimap.getValue(PREFIX_BLACKLIST).orElse(\"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(blacklist);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(blacklist);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new PersonBlacklistContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_URL_LINK)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String url \u003d argMultimap.getValue(PREFIX_URL_LINK).orElse(\"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(url);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(url);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new PersonUrlLinkContainsKeywordsPredicate(words));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String tag \u003d argMultimap.getValue(PREFIX_TAG).orElse(\"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            checkInput(tag);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            List\u003cString\u003e words \u003d splitInput(tag);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            predicates.add(new PersonTagsContainKeywordsPredicate(words));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return new FindPersonCommand(predicates);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Splits a String into words."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param userInput User specified keyword for a field."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @return a List containing the words."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public List\u003cString\u003e splitInput(String userInput) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String[] words \u003d userInput.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Collections.addAll(keywords, words);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Checks if userInput is empty."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param userInput User specified keyword for a field."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void checkInput(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (userInput.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 90,
      "ameliatjy": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.BlacklistStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.CompanyName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Experience;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Salary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.UrlLink;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Vacancy;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Parses a {@code String companyName} into a {@code CompanyName}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * @throws ParseException if the given {@code company name} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static CompanyName parseCompanyName(String companyName) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        requireNonNull(companyName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        String trimmedName \u003d companyName.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        if (!CompanyName.isValidCompanyName(trimmedName)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new ParseException(CompanyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return new CompanyName(trimmedName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Parses a {@code String experience} into a {@code Experience}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @throws ParseException if the given {@code experience} is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static Experience parseExperience(String experience) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(experience);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String trimmedExperience \u003d experience.trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (!Experience.isValidExperience(trimmedExperience)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new ParseException(Experience.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new Experience(trimmedExperience);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Parses a {@code String isBlacklisted} into a {@code BlacklistStatus}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @throws ParseException if the given {@code isBlacklisted} is invalid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static BlacklistStatus parseBlacklistStatus(String isBlacklisted) throws ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(isBlacklisted);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String trimmedIsBlacklisted \u003d isBlacklisted.trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (!BlacklistStatus.isValidBlacklistStatus(isBlacklisted)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new ParseException(BlacklistStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new BlacklistStatus(trimmedIsBlacklisted);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Parses a {@code String link} into a {@code UrlLink}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @throws ParseException if the given {@code link} is invalid."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static UrlLink parseUrlLink(String link) throws ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(link);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String trimmedLink \u003d link.trim();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (!UrlLink.isValidLink(trimmedLink)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new ParseException(UrlLink.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new UrlLink(trimmedLink);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Parses a {@code String salary} into a {@code Salary}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @throws ParseException if the given {@code salary} is invalid."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static Salary parseSalary(String salary) throws ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(salary);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String trimmedSalary \u003d salary.trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (!Salary.isValidSalary(trimmedSalary)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new ParseException(Salary.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new Salary(trimmedSalary);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Parses a {@code String vacancy} into a {@code Vacancy}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * @throws ParseException if the given {@code vacancy} is invalid."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static Vacancy parseVacancy(String vacancy) throws ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        requireNonNull(vacancy);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        String trimmedVacancy \u003d vacancy.trim();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (!Vacancy.isValidVacancy(trimmedVacancy)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            throw new ParseException(Vacancy.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return new Vacancy(trimmedVacancy);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Parses a {@code String priority} into a {@code Priority}."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static Priority parsePriorityString(String priority) throws ParseException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Parses {@code List\u003cString\u003e priorities} into a {@code Priority}."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static Priority parsePriority(List\u003cString\u003e priorities) throws ParseException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        requireNonNull(priorities);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // if no priority given, assign moderate"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        String priorityString \u003d priorities.isEmpty() ? \"moderate\" : priorities.get(priorities.size() - 1);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return parsePriorityString(priorityString);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Parses a {@code String order} into a boolean option."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * True is returned when order is ascending."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * False is returned when order is descending or null"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws ParseException if the given {@code order} is invalid."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static Boolean parseOrder(String order) throws ParseException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (order \u003d\u003d null || order.trim().equalsIgnoreCase(\"desc\")) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else if (order.trim().equalsIgnoreCase(\"asc\")) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            throw new ParseException(\"Order can only be \u0027asc\u0027 or \u0027desc\u0027\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 15,
      "BreadPeanutButter": 75,
      "raythx98": 16,
      "g-erm": 43,
      "ameliatjy": 4,
      "-": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortJobCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_ORDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.logic.commands.SortJobCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.comparator.JobComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.comparator.JobPriorityComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.comparator.JobVacancyComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": "public class SortJobCommandParser implements Parser\u003cSortJobCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortJobCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * and returns a SortJobCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public SortJobCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SORT_ORDER, PREFIX_SORT_TYPE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SORT_ORDER, PREFIX_SORT_TYPE)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortJobCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        JobComparator comparator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Boolean isAscending \u003d ParserUtil.parseOrder(argMultimap.getValue(PREFIX_SORT_ORDER).orElse(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        String sortType \u003d argMultimap.getValue(PREFIX_SORT_TYPE).orElse(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        switch (sortType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        case JobVacancyComparator.SORT_CRITERIA:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            comparator \u003d new JobVacancyComparator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return new SortJobCommand(comparator, isAscending);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        case JobPriorityComparator.SORT_CRITERIA:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            comparator \u003d new JobPriorityComparator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return new SortJobCommand(comparator, isAscending);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            throw new ParseException(SortJobCommand.MESSAGE_SORT_JOB_TYPE_INVALID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-erm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-erm": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortPersonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_ORDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.logic.commands.SortPersonCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.comparator.PersonBlackListComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.comparator.PersonComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.comparator.PersonDateOfApplicationComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.comparator.PersonExpectedSalaryComparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.comparator.PersonExperienceComparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": " * Parses input arguments and creates a new SortPersonCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class SortPersonCommandParser implements Parser\u003cSortPersonCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortPersonCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * and returns a SortPersonCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public SortPersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SORT_ORDER, PREFIX_SORT_TYPE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SORT_ORDER, PREFIX_SORT_TYPE)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Boolean isAscending \u003d ParserUtil.parseOrder(argMultimap.getValue(PREFIX_SORT_ORDER).orElse(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String sortType \u003d argMultimap.getValue(PREFIX_SORT_TYPE).orElse(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonComparator comparator;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        switch (sortType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        case PersonExperienceComparator.SORT_CRITERIA:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            comparator \u003d new PersonExperienceComparator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return new SortPersonCommand(comparator, isAscending);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        case PersonExpectedSalaryComparator.SORT_CRITERIA:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            comparator \u003d new PersonExpectedSalaryComparator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return new SortPersonCommand(comparator, isAscending);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        case PersonDateOfApplicationComparator.SORT_CRITERIA:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            comparator \u003d new PersonDateOfApplicationComparator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return new SortPersonCommand(comparator, isAscending);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        case PersonBlackListComparator.SORT_CRITERIA:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            comparator \u003d new PersonBlackListComparator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return new SortPersonCommand(comparator, isAscending);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new ParseException(SortPersonCommand.MESSAGE_SORT_TYPE_INVALID);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 61,
      "g-erm": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/JobAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.UniqueJobList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Wraps all job data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Duplicates are not allowed (by .isSameJob comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JobAddressBook implements ReadOnlyJobAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final UniqueJobList jobs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        jobs \u003d new UniqueJobList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JobAddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Creates a JobAddressBook using the Jobs in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JobAddressBook(ReadOnlyJobAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Replaces the contents of the job list with {@code jobs}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * {@code jobs} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJobs(List\u003cJob\u003e jobs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.jobs.setJobs(jobs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Resets the existing job data of this {@code JobAddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void resetData(ReadOnlyJobAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        setJobs(newData.getJobList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    //// job-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Returns true if a job with the same identity as {@code job} exists in the job address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean hasJob(Job job) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        requireNonNull(job);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return jobs.contains(job);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Adds a job to the job address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * The job must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void addJob(Job j) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        jobs.add(j);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Replaces the given job {@code target} in the list with {@code editedJob}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * The job identity of {@code editedJob} must not be the same as another existing job in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJob(Job target, Job editedJob) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        requireNonNull(editedJob);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        jobs.setJob(target, editedJob);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Removes {@code key} from this {@code JobAddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * {@code key} must exist in the job address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void removeJob(Job key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        jobs.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return jobs.asUnmodifiableObservableList().size() + \" jobs\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public ObservableList\u003cJob\u003e getJobList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return jobs.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                || (other instanceof JobAddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 jobs.equals(((JobAddressBook) other).jobs));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return jobs.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 2,
      "raythx98": 4,
      "ameliatjy": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    Predicate\u003cJob\u003e PREDICATE_SHOW_ALL_JOBS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PersonAddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Returns the user prefs\u0027 person address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Path getPersonAddressBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Sets the user prefs\u0027 person address book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    void setPersonAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Replaces person address book data with the data in {@code personAddressBook}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    void setPersonAddressBook(ReadOnlyPersonAddressBook personAddressBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /** Returns the PersonAddressBook */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    ReadOnlyPersonAddressBook getPersonAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the person address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * The person must exist in the person address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * {@code person} must not already exist in the person address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * {@code target} must exist in the person address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the person"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /** Returns an unmodifiable view of the sorted person list */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    ObservableList\u003cPerson\u003e getSortedPersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Updates the comparator of the sorted person list to filter by the given {@code comparator}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws NullPointerException if {@code comparator} is null."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    void updateSortedPersonList(Comparator\u003cPerson\u003e comparator);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d JobAddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Returns the user prefs\u0027 job address book file path."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Path getJobAddressBookFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Sets the user prefs\u0027 job address book file path."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    void setJobAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Replaces job address book data with the data in {@code jobAddressBook}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    void setJobAddressBook(ReadOnlyJobAddressBook jobAddressBook);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /** Returns the JobAddressBook */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    ReadOnlyJobAddressBook getJobAddressBook();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Returns true if a job with the same identity as {@code job} exists in the job address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    boolean hasJob(Job job);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Deletes the given job."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * The job must exist in the job address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    void deleteJob(Job target);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Adds the given job."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * {@code job} must not already exist in the job address book."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    void addJob(Job job);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Replaces the given job {@code target} with {@code editedJob}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * {@code target} must exist in the job address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * The job identity of {@code editedJob} must not be the same as another existing job in the address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    void setJob(Job target, Job editedJob);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /** Returns an unmodifiable view of the filtered job list */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    ObservableList\u003cJob\u003e getFilteredJobList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Updates the filter of the filtered job list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    void updateFilteredJobList(Predicate\u003cJob\u003e predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /** Returns an unmodifiable view of the sorted job list */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    ObservableList\u003cJob\u003e getSortedJobList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Updates the order of the sorted job list to sort by the given {@code comparator}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * @throws NullPointerException if {@code comparator} is null."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    void updateSortedJobList(Comparator\u003cJob\u003e comparator);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 9,
      "raythx98": 27,
      "g-erm": 10,
      "ameliatjy": 48,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private final PersonAddressBook personAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private final JobAddressBook jobAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private final FilteredList\u003cJob\u003e filteredJobs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private final SortedList\u003cPerson\u003e sortedPersons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private final SortedList\u003cJob\u003e sortedJobs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, jobAddressBook and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public ModelManager(ReadOnlyPersonAddressBook personAddressBook, ReadOnlyJobAddressBook jobAddressBook,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        requireAllNonNull(personAddressBook, jobAddressBook, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        logger.fine(\"Initializing with person address book: \" + personAddressBook"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                + \"Initializing with job address book: \" + jobAddressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.personAddressBook \u003d new PersonAddressBook(personAddressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.jobAddressBook \u003d new JobAddressBook(jobAddressBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.personAddressBook.getPersonList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        filteredJobs \u003d new FilteredList\u003c\u003e(this.jobAddressBook.getJobList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        sortedPersons \u003d new SortedList\u003c\u003e(this.personAddressBook.getPersonList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        sortedJobs \u003d new SortedList\u003c\u003e(this.jobAddressBook.getJobList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this(new PersonAddressBook(), new JobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Path getPersonAddressBookFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return userPrefs.getPersonAddressBookFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void setPersonAddressBookFilePath(Path personAddressBookFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        requireNonNull(personAddressBookFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        userPrefs.setPersonAddressBookFilePath(personAddressBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public Path getJobAddressBookFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return userPrefs.getJobAddressBookFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void setJobAddressBookFilePath(Path jobAddressBookFilePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        requireNonNull(jobAddressBookFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        userPrefs.setJobAddressBookFilePath(jobAddressBookFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void setPersonAddressBook(ReadOnlyPersonAddressBook personAddressBook) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.personAddressBook.resetData(personAddressBook);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public ReadOnlyPersonAddressBook getPersonAddressBook() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return personAddressBook;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return personAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        personAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        personAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        personAddressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d JobAddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void setJobAddressBook(ReadOnlyJobAddressBook jobAddressBook) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.jobAddressBook.resetData(jobAddressBook);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void deleteJob(Job target) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        jobAddressBook.removeJob(target);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public ReadOnlyJobAddressBook getJobAddressBook() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return jobAddressBook;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean hasJob(Job job) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        requireNonNull(job);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return jobAddressBook.hasJob(job);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void addJob(Job job) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        jobAddressBook.addJob(job);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        updateFilteredJobList(PREDICATE_SHOW_ALL_JOBS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void setJob(Job target, Job editedJob) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireAllNonNull(target, editedJob);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        jobAddressBook.setJob(target, editedJob);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Job List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Job} backed by the internal list of"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public ObservableList\u003cJob\u003e getFilteredJobList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return filteredJobs;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        filteredJobs.setPredicate(predicate);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorted Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public ObservableList\u003cPerson\u003e getSortedPersonList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return sortedPersons;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void updateSortedPersonList(Comparator\u003cPerson\u003e comparator) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        requireAllNonNull(comparator);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        sortedPersons.setComparator(comparator);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        personAddressBook.setPersons(sortedPersons);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorted Job List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Job} backed by the internal list of"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public ObservableList\u003cJob\u003e getSortedJobList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return sortedJobs;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void updateSortedJobList(Comparator\u003cJob\u003e comparator) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        sortedJobs.setComparator(comparator);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        jobAddressBook.setJobs(sortedJobs);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Others \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return personAddressBook.equals(other.personAddressBook)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                \u0026\u0026 jobAddressBook.equals(other.jobAddressBook)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 22,
      "BreadPeanutButter": 10,
      "raythx98": 72,
      "g-erm": 21,
      "ameliatjy": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PersonAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class PersonAddressBook implements ReadOnlyPersonAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public PersonAddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Creates a PersonAddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public PersonAddressBook(ReadOnlyPersonAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Resets the existing data of this {@code PersonAddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void resetData(ReadOnlyPersonAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the person address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Adds a person to the person address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * The person must not already exist in the person address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * {@code target} must exist in the person address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the person"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Removes {@code key} from this {@code PersonAddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * {@code key} must exist in the person address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                || (other instanceof PersonAddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 persons.equals(((PersonAddressBook) other).persons));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 9,
      "ameliatjy": 9,
      "-": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyJobAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Unmodifiable view of a person address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public interface ReadOnlyJobAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    ObservableList\u003cJob\u003e getJobList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPersonAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Unmodifiable view of a person address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public interface ReadOnlyPersonAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    Path getPersonAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    Path getJobAddressBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private Path personAddressBookFilePath \u003d Paths.get(\"data\" , \"personaddressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private Path jobAddressBookFilePath \u003d Paths.get(\"data\" , \"jobaddressbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        setPersonAddressBookFilePath(newUserPrefs.getPersonAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        setJobAddressBookFilePath(newUserPrefs.getJobAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public Path getPersonAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return personAddressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public Path getJobAddressBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return jobAddressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void setPersonAddressBookFilePath(Path personAddressBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        requireNonNull(personAddressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.personAddressBookFilePath \u003d personAddressBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void setJobAddressBookFilePath(Path jobAddressBookFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        requireNonNull(jobAddressBookFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.jobAddressBookFilePath \u003d jobAddressBookFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                \u0026\u0026 personAddressBookFilePath.equals(o.personAddressBookFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                \u0026\u0026 jobAddressBookFilePath.equals(o.jobAddressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return Objects.hash(guiSettings, personAddressBookFilePath, jobAddressBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        sb.append(\"\\nLocal person data file location : \" + personAddressBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        sb.append(\"\\nLocal job data file location : \" + jobAddressBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 21,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Represents a Person\u0027s or Job\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"and it should be at least 3 characters long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \".{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Returns true if a given string is a valid address."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 3,
      "g-erm": 1,
      "ameliatjy": 2,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/BlacklistStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Represents a Person\u0027s blacklist status (whether they have been blacklisted)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBlacklistStatus(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class BlacklistStatus {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Blacklisted status must be either \\\u0027true\\\u0027 or \\\u0027false\\\u0027.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \" It is not case-sensitive.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public final boolean isBlacklisted;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Constructs an {@code Blacklist}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param isBlacklisted A string representing ."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public BlacklistStatus(String isBlacklisted) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(isBlacklisted);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        checkArgument(isValidBlacklistStatus(isBlacklisted), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.isBlacklisted \u003d Boolean.parseBoolean(isBlacklisted.trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Returns if a given String represents a valid Blacklist status."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static boolean isValidBlacklistStatus(String isBlacklisted) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        isBlacklisted \u003d isBlacklisted.trim().toLowerCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return isBlacklisted.equals(\"true\") || isBlacklisted.equals(\"false\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return Boolean.valueOf(isBlacklisted).toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                || (other instanceof BlacklistStatus // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u0026\u0026 isBlacklisted \u003d\u003d ((BlacklistStatus) other).isBlacklisted); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return Boolean.valueOf(isBlacklisted).hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/CompanyName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Represents a Person\u0027s company\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCompanyName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class CompanyName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"There are no restrictions on company name!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\S][\\\\S ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public final String fullCompanyName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Constructs a {@code Company Name}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * @param name A valid company name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public CompanyName(String name) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        checkArgument(isValidCompanyName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        fullCompanyName \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static boolean isValidCompanyName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return fullCompanyName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                || (other instanceof CompanyName // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                \u0026\u0026 fullCompanyName.equals(((CompanyName) other).fullCompanyName)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return fullCompanyName.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Represents a Person\u0027s date of application for a job."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"d-M-uu\"; // eg. 31-12-20"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates must be of the format DD-MM-YY where Day and Month can be \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"1 or more digits as long as they are valid, eg. 1-12-20\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMATTER \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            DateTimeFormatter.ofPattern(DATE_FORMAT).withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public final LocalDate date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public final String dateString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param dateString A valid date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public Date(String dateString) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(dateString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        checkArgument(isValidDate(dateString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        date \u003d LocalDate.parse(dateString, DATE_FORMATTER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.dateString \u003d date.format(DateTimeFormatter.ofPattern(\"dd-MM-yy\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String trimmedDate \u003d test.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            DATE_FORMATTER.parse(trimmedDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } catch (DateTimeException err) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return dateString;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Represents a Person\u0027s or Job\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/Experience.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Represents a Person\u0027s experience in years."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidExperience(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class Experience {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Experience in years has to be an unsigned (non-negative) number \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"that is less than or equals to 100.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public final double experienceInYears;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Constructs an {@code Experience}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param experience A string representing a valid number of years of experience."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public Experience(String experience) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(experience);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        checkArgument(isValidExperience(experience), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        experienceInYears \u003d Double.parseDouble(experience);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Returns if a given String represents valid number of years of experience."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static boolean isValidExperience(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        double experience;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        test \u003d test.strip();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            experience \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return experience \u003e\u003d 0 \u0026\u0026 experience \u003c\u003d 100;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return experienceInYears + \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                || (other instanceof Experience // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u0026\u0026 experienceInYears \u003d\u003d ((Experience) other).experienceInYears); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return Double.valueOf(experienceInYears).hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/Job.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Represents a Job in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class Job {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final Name jobTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private final CompanyName companyName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private final Vacancy vacancy;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public Job(Name jobTitle, CompanyName companyName, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": "               Set\u003cTag\u003e tags, Priority priority, Vacancy vacancy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        requireAllNonNull(jobTitle, companyName, phone, email, address, tags, priority, vacancy);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.jobTitle \u003d jobTitle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.companyName \u003d companyName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        this.vacancy \u003d vacancy;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Name getJobTitle() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return jobTitle;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public CompanyName getCompanyName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return companyName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public Vacancy getVacancy() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return vacancy;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Returns true if both jobs of the same job title are from the same company."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * This defines a weaker notion of equality between two jobs."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean isSameJob(Job otherJob) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (otherJob \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return otherJob !\u003d null"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 otherJob.getJobTitle().equals(getJobTitle())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 (otherJob.getCompanyName().equals(getCompanyName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Returns true if both jobs have the same identity and data fields."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * This defines a stronger notion of equality between two jobs."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (!(other instanceof Job)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Job otherJob \u003d (Job) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return otherJob.getJobTitle().equals(getJobTitle())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 otherJob.getCompanyName().equals(getCompanyName())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 otherJob.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 otherJob.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 otherJob.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                \u0026\u0026 otherJob.getTags().equals(getTags())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                \u0026\u0026 otherJob.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                \u0026\u0026 otherJob.getVacancy().equals(getVacancy());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return Objects.hash(jobTitle, companyName, phone, email, address, tags, priority, vacancy);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        builder.append(getJobTitle())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .append(\" Company: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .append(getCompanyName())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                .append(\" Vacancy: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                .append(getVacancy())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 3,
      "g-erm": 22,
      "ameliatjy": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Represents a Person\u0027s name or job title in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 1,
      "ameliatjy": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final Experience experience;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final Date dateOfApplication;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final BlacklistStatus blacklistStatus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final Optional\u003cAddress\u003e addressOptional;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final Optional\u003cUrlLink\u003e urlLinkOptional;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final Optional\u003cSalary\u003e salaryOptional;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Experience experience, Date dateOfApplication,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                  BlacklistStatus blacklistStatus, Optional\u003cAddress\u003e addressOptional,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                  Optional\u003cUrlLink\u003e urlLinkOptional, Optional\u003cSalary\u003e salaryOptional, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireAllNonNull(name, phone, email, addressOptional, experience, tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.experience \u003d experience;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.dateOfApplication \u003d dateOfApplication;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.blacklistStatus \u003d blacklistStatus;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.addressOptional \u003d addressOptional;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.urlLinkOptional \u003d urlLinkOptional;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.salaryOptional \u003d salaryOptional;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public Experience getExperience() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return experience;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public Date getDateOfApplication() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return dateOfApplication;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public BlacklistStatus getBlacklistStatus() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return blacklistStatus;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public Optional\u003cAddress\u003e getAddressOptional() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return addressOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public Optional\u003cUrlLink\u003e getUrlLinkOptional() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return urlLinkOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public Optional\u003cSalary\u003e getSalaryOptional() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return salaryOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u0026\u0026 otherPerson.getExperience().equals(getExperience())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u0026\u0026 otherPerson.getDateOfApplication().equals(getDateOfApplication())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u0026\u0026 otherPerson.getBlacklistStatus().equals(getBlacklistStatus())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u0026\u0026 otherPerson.getAddressOptional().equals(getAddressOptional())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u0026\u0026 otherPerson.getUrlLinkOptional().equals(getUrlLinkOptional())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u0026\u0026 otherPerson.getSalaryOptional().equals(getSalaryOptional())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return Objects.hash(name, phone, email, experience, dateOfApplication, blacklistStatus,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                addressOptional, urlLinkOptional, salaryOptional, tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .append(\" Experience: \")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .append(getExperience().toString() + \" years\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .append(\" Date of Application: \")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .append(getDateOfApplication());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        builder.append(\" Address: \");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        getAddressOptional().ifPresent(address -\u003e builder.append(address.value));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        builder.append(\" Link: \");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        getUrlLinkOptional().ifPresent(link -\u003e builder.append(link.value));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        builder.append(\" Expected Salary: \");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        getSalaryOptional().ifPresent(salary -\u003e builder.append(\"$\" + salary.toString()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        builder.append(\" Blacklisted: \").append(getBlacklistStatus());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 59,
      "ameliatjy": 1,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Represents a Person\u0027s or Job\u0027s contact phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be 3 to 20 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,20}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 2,
      "ameliatjy": 2,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": " * Represents a Job\u0027s priority in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            \"Priority can only take one of these three values: high, moderate, low\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * The priority must be one of the three types"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String PR_HIGH \u003d \"high\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String PR_MOD \u003d \"moderate\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String PR_LOW \u003d \"low\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Constructs an {@code Priority}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * @param priority A valid priority."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public Priority(String priority) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        value \u003d priority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Returns true if a given string is a valid priority."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return test.equals(PR_HIGH) || test.equals(PR_MOD) || test.equals(PR_LOW);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Parses the priority value into an integer."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * @return Integer value according to the priority."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * High will return 3, Moderate will return 2 and Low will return 1."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public int parsePriorityToInt() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        final int highPriority \u003d 3;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        final int modPriority \u003d 2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        final int lowPriority \u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        switch (this.value) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        case PR_HIGH:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return highPriority;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        case PR_MOD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return modPriority;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        case PR_LOW:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return lowPriority;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assert value !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                \u0026\u0026 value.equals(((Priority) other).value)); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-erm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-erm": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/Salary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Represents a Person\u0027s expected salary in dollars."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSalary(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class Salary {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Salary has to be an unsigned (non-negative) integer \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"that is less than 1 billion (max of 999,999,999).\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public final int salary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Constructs an {@code Salary}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param salary A string representing a valid amount of salary."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public Salary(String salary) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(salary);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        checkArgument(isValidSalary(salary), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.salary \u003d Integer.parseInt(salary);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Returns if a given String represents valid amount of salary."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static boolean isValidSalary(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        int salaryAmount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        test \u003d test.strip();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            salaryAmount \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return salaryAmount \u003e\u003d 0 \u0026\u0026 salaryAmount \u003c 1000000000;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return salary + \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                || (other instanceof Salary // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u0026\u0026 salary \u003d\u003d ((Salary) other).salary); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return Integer.valueOf(salary).hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/UniqueJobList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.exceptions.DuplicateJobException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.exceptions.JobNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * A list of jobs that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * A job is considered unique by comparing using {@code Job#isSameJob(Job)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * jobs uses Job#isSameJob(Job) for equality so as to ensure that the job being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * unique in terms of identity in the UniqueJobList. However, the removal of a job uses Job#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * as to ensure that the job with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @see Job#isSameJob(Job)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class UniqueJobList implements Iterable\u003cJob\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final ObservableList\u003cJob\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final ObservableList\u003cJob\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Returns true if the list contains an equivalent job as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean contains(Job toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameJob);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Adds a job to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * The job must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void add(Job toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new DuplicateJobException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Replaces the job {@code target} in the list with {@code editedJob}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * The job identity of {@code editedJob} must not be the same as another existing job in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJob(Job target, Job editedJob) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        requireAllNonNull(target, editedJob);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new JobNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (!target.isSameJob(editedJob) \u0026\u0026 contains(editedJob)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new DuplicateJobException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        internalList.set(index, editedJob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Removes the equivalent job from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * The job must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void remove(Job toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new JobNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJobs(UniqueJobList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Replaces the contents of this list with {@code jobs}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * {@code jobs} must not contain duplicate jobs."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJobs(List\u003cJob\u003e jobs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        requireAllNonNull(jobs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (!jobsAreUnique(jobs)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new DuplicateJobException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        internalList.setAll(jobs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public ObservableList\u003cJob\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Iterator\u003cJob\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                || (other instanceof UniqueJobList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueJobList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Returns true if {@code jobs} contains only unique jobs."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private boolean jobsAreUnique(List\u003cJob\u003e jobs) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        for (int i \u003d 0; i \u003c jobs.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c jobs.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                if (jobs.get(i).isSameJob(jobs.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 3,
      "-": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/UrlLink.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import org.apache.commons.validator.routines.UrlValidator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Represents a Person\u0027s url link to his/her personal profile page."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLink(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class UrlLink {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            \"Link should be a valid URL link.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * UrlValidator used to check if url format is valid;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final UrlValidator validator \u003d new UrlValidator() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public boolean isValid(String value) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            // override method so that links without a scheme will still be valid"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            // as long as the rest of the format is correct"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            // i.e link does not need to have http/https/ftp scheme in front"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return super.isValid(value) || super.isValid(\"http://\" + value);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    };"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Constructs a {@code UrlLink}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param link A valid url link."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public UrlLink(String link) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(link);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        checkArgument(isValidLink(link), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        value \u003d link;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Returns true if a given string is a valid link."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * A string is considered valid if it has the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * This method does not check if connection can be made with the link"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * since this app does not make use of internet."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static boolean isValidLink(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return validator.isValid(test);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                || (other instanceof UrlLink // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u0026\u0026 value.equals(((UrlLink) other).value)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/Vacancy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": " * Represents a Job\u0027s vacancy in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidVacancy(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": "public class Vacancy {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        \"Vacancy should only contain numbers, and it should be 1 to 2 digits long (max vacancy: 99)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,2}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public final int vacancyNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Constructs an {@code Vacancy}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * @param vacancy A valid vacancy."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public Vacancy(String vacancy) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        requireNonNull(vacancy);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        checkArgument(isValidVacancy(vacancy), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        value \u003d vacancy;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        vacancyNumber \u003d Integer.parseInt(vacancy);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Returns true if a given string is a valid vacancy."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static boolean isValidVacancy(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            || (other instanceof Vacancy // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            \u0026\u0026 value.equals(((Vacancy) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-erm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-erm": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/comparator/JobComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "package seedu.address.model.information.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": "public abstract class JobComparator implements Comparator\u003cJob\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-erm": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/comparator/JobPriorityComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "package seedu.address.model.information.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": " * Compares any two {@code Job}\u0027s {@code Priority} using the the supplied sorting criteria."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": "public class JobPriorityComparator extends JobComparator implements Comparator\u003cJob\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String SORT_CRITERIA \u003d \"pr\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public int compare(Job job1, Job job2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        int priority1 \u003d job1.getPriority().parsePriorityToInt();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        int priority2 \u003d job2.getPriority().parsePriorityToInt();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (priority1 \u003c priority2) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        } else if (priority1 \u003e priority2) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return \"by priority \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            || (other instanceof JobPriorityComparator); // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "g-erm": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/comparator/JobVacancyComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "package seedu.address.model.information.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": " * Compares any two {@code Job}\u0027s {@code Vacancy} using the the supplied sorting criteria."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": "public class JobVacancyComparator extends JobComparator implements Comparator\u003cJob\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String SORT_CRITERIA \u003d \"v\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public int compare(Job job1, Job job2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        int vacancy1 \u003d job1.getVacancy().vacancyNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        int vacancy2 \u003d job2.getVacancy().vacancyNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (vacancy1 \u003c vacancy2) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        } else if (vacancy1 \u003e vacancy2) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return \"by vacancy \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            || (other instanceof JobVacancyComparator); // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-erm": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/comparator/PersonBlackListComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.model.information.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Compares any two {@code Person\u0027s} {@code BlackListStatus} using the supplied sorting criteria."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class PersonBlackListComparator extends PersonComparator implements Comparator\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static final String SORT_CRITERIA \u003d \"bl\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public int compare(Person person1, Person person2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Boolean person1BlackListStatus \u003d person1.getBlacklistStatus().isBlacklisted;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Boolean person2BlackListStatus \u003d person2.getBlacklistStatus().isBlacklisted;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return Boolean.compare(person1BlackListStatus, person2BlackListStatus);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return \"by blacklist status \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return this \u003d\u003d other || other instanceof PersonBlackListComparator;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 25,
      "g-erm": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/comparator/PersonComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.model.information.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public abstract class PersonComparator implements Comparator\u003cPerson\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/comparator/PersonDateOfApplicationComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.model.information.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Compares any two {@code Person}\u0027s {@code Date} using the the supplied sorting criteria."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class PersonDateOfApplicationComparator extends PersonComparator implements Comparator\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static final String SORT_CRITERIA \u003d \"doa\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public int compare(Person person1, Person person2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return person1.getDateOfApplication().date.compareTo(person2.getDateOfApplication().date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return \"by date of application \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return this \u003d\u003d other || other instanceof PersonDateOfApplicationComparator;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 23,
      "g-erm": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/comparator/PersonExpectedSalaryComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.model.information.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Salary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Compares any two {@code Person\u0027s} {@code Salary} using the supplied sorting criteria"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class PersonExpectedSalaryComparator extends PersonComparator implements Comparator\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static final String SORT_CRITERIA \u003d \"sal\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public int compare(Person person1, Person person2) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Optional\u003cSalary\u003e person1Salary \u003d person1.getSalaryOptional();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Optional\u003cSalary\u003e person2Salary \u003d person2.getSalaryOptional();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (person1Salary.isPresent() \u0026\u0026 person2Salary.isPresent()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return Double.compare(person1Salary.get().salary, person2Salary.get().salary);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else if (person1Salary.isPresent()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else if (person2Salary.isPresent()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return \"by expected salary \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return this \u003d\u003d other || other instanceof PersonExpectedSalaryComparator;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 35,
      "g-erm": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/comparator/PersonExperienceComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.model.information.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Compares any two {@code Person}\u0027s {@code Experience} using the the supplied sorting criteria."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class PersonExperienceComparator extends PersonComparator implements Comparator\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static final String SORT_CRITERIA \u003d \"exp\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public int compare(Person person1, Person person2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        double person1Experience \u003d person1.getExperience().experienceInYears;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        double person2Experience \u003d person2.getExperience().experienceInYears;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (person1Experience \u003c person2Experience) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else if (person1Experience \u003e person2Experience) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return \"by years of experience \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return this \u003d\u003d other || other instanceof PersonExperienceComparator;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 33,
      "g-erm": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/exceptions/DuplicateJobException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Signals that the operation will result in duplicate Jobs (Jobs are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class DuplicateJobException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public DuplicateJobException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        super(\"Operation would result in duplicate jobs\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/exceptions/DuplicatePersonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/exceptions/JobNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Signals that the operation is unable to find the specified job."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JobNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/exceptions/PersonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/JobAddressContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Tests that a {@code Job}\u0027s {@code Address} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class JobAddressContainsKeywordsPredicate implements Predicate\u003cJob\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public JobAddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean test(Job job) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                // Address contains keyword"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsPhraseIgnoreCase(job.getAddress().value, keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                || (other instanceof JobAddressContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                \u0026\u0026 keywords.equals(((JobAddressContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/JobCompanyNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Tests that a {@code Job}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JobCompanyNameContainsKeywordsPredicate implements Predicate\u003cJob\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JobCompanyNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean test(Job job) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsPhraseIgnoreCase("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                        job.getCompanyName().fullCompanyName, keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                || (other instanceof JobCompanyNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 keywords.equals(((JobCompanyNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 2,
      "ameliatjy": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/JobEmailContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Tests that a {@code Job}\u0027s {@code Email} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JobEmailContainsKeywordsPredicate implements Predicate\u003cJob\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JobEmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean test(Job job) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsPhraseIgnoreCase(job.getEmail().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                || (other instanceof JobEmailContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 keywords.equals(((JobEmailContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/JobJobTitleContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Tests that a {@code Job}\u0027s {@code Job Title} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class JobJobTitleContainsKeywordsPredicate implements Predicate\u003cJob\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public JobJobTitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean test(Job job) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                // Job Title contains keyword"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsPhraseIgnoreCase(job.getJobTitle().fullName, keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                || (other instanceof JobJobTitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                \u0026\u0026 keywords.equals(((JobJobTitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/JobNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Tests that a {@code Job}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JobNameContainsKeywordsPredicate implements Predicate\u003cJob\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JobNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean test(Job job) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(job.getJobTitle().fullName, keyword)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(job.getCompanyName().fullCompanyName, keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                || (other instanceof JobNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 keywords.equals(((JobNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 1,
      "ameliatjy": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/JobPhoneContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Tests that a {@code Job}\u0027s {@code Phone} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JobPhoneContainsKeywordsPredicate implements Predicate\u003cJob\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JobPhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean test(Job job) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(job.getPhone().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                || (other instanceof JobPhoneContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 keywords.equals(((JobPhoneContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/JobPriorityContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Tests that a {@code Job}\u0027s {@code Priority} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JobPriorityContainsKeywordsPredicate implements Predicate\u003cJob\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JobPriorityContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean test(Job job) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsPhraseIgnoreCase(job.getPriority().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                || (other instanceof JobPriorityContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 keywords.equals(((JobPriorityContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/JobTagsContainKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Tests that any of a {@code Job}\u0027s {@code Tags} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class JobTagsContainKeywordsPredicate implements Predicate\u003cJob\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public JobTagsContainKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean test(Job job) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                // Any tags contain keyword"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .allMatch(keyword -\u003e job.getTags().stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                        .anyMatch(tag -\u003e StringUtil.containsPhraseIgnoreCase(tag.toString(), keyword)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                || (other instanceof JobTagsContainKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                \u0026\u0026 keywords.equals(((JobTagsContainKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/JobVacancyContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Tests that a {@code Job}\u0027s {@code Vacancy} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JobVacancyContainsKeywordsPredicate implements Predicate\u003cJob\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JobVacancyContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean test(Job job) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(job.getVacancy().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                || (other instanceof JobVacancyContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 keywords.equals(((JobVacancyContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/PersonAddressContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Address} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class PersonAddressContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public PersonAddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                // Address contains keyword"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .allMatch(keyword -\u003e person.getAddressOptional()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                        .filter(address -\u003e StringUtil.containsPhraseIgnoreCase(address.value, keyword))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                        .isPresent());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                || (other instanceof PersonAddressContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                \u0026\u0026 keywords.equals(((PersonAddressContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/PersonApplicationContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Date Of Application} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class PersonApplicationContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public PersonApplicationContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                // Date of Application contains keyword"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsPhraseIgnoreCase("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                        person.getDateOfApplication().toString(), keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                || (other instanceof PersonApplicationContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                \u0026\u0026 keywords.equals(((PersonApplicationContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/PersonBlacklistContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Blacklist Status} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class PersonBlacklistContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public PersonBlacklistContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                // Blacklist Status matches keyword"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsPhraseIgnoreCase("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                        person.getBlacklistStatus().toString(), keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                || (other instanceof PersonBlacklistContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                \u0026\u0026 keywords.equals(((PersonBlacklistContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/PersonEmailContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Email} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class PersonEmailContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public PersonEmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsPhraseIgnoreCase(person.getEmail().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                || (other instanceof PersonEmailContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 keywords.equals(((PersonEmailContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/PersonExperienceContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Experience} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class PersonExperienceContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public PersonExperienceContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .allMatch(keyword -\u003e person.getExperience().experienceInYears \u003d\u003d Float.parseFloat(keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                || (other instanceof PersonExperienceContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 keywords.equals(((PersonExperienceContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/PersonNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class PersonNameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public PersonNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                // Name contains keyword"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsPhraseIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                || (other instanceof PersonNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 keywords.equals(((PersonNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 3,
      "ameliatjy": 6,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/PersonPhoneContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class PersonPhoneContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public PersonPhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assert keywords.stream().allMatch(x -\u003e Double.parseDouble(x) \u003e\u003d 0) : \"invalid phone number\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                || (other instanceof PersonPhoneContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 keywords.equals(((PersonPhoneContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/PersonSalaryContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Salary} matches all of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class PersonSalaryContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public PersonSalaryContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assert keywords.stream().allMatch(keyword -\u003e Double.parseDouble(keyword) \u003e\u003d 0) : \"invalid salary\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                // Salary value matches keyword"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .allMatch(keyword -\u003e person.getSalaryOptional()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                        .filter(salary -\u003e salary.salary \u003d\u003d Double.parseDouble(keyword))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                        .isPresent());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                || (other instanceof PersonSalaryContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                \u0026\u0026 keywords.equals(((PersonSalaryContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 33,
      "ameliatjy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/PersonTagsContainKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Tests that any of a {@code Person}\u0027s {@code Tags} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class PersonTagsContainKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public PersonTagsContainKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                // Any tags contain keyword"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .allMatch(keyword -\u003e person.getTags().stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                        .anyMatch(tag -\u003e StringUtil.containsPhraseIgnoreCase(tag.toString(), keyword)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                || (other instanceof PersonTagsContainKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                \u0026\u0026 keywords.equals(((PersonTagsContainKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/information/predicate/PersonUrlLinkContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code UrlLink} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class PersonUrlLinkContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public PersonUrlLinkContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (person.getUrlLinkOptional().isEmpty()) { //person does not have url stored"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            return keywords.isEmpty();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .allMatch(keyword -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                        StringUtil.containsPhraseIgnoreCase(person.getUrlLinkOptional().get().value, keyword));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                || (other instanceof PersonUrlLinkContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                \u0026\u0026 keywords.equals(((PersonUrlLinkContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.JobAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.PersonAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.ReadOnlyJobAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyPersonAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.BlacklistStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.CompanyName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Experience;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Salary;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.UrlLink;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Vacancy;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Contains utility methods for populating {@code PersonAddressBook}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * or {@code JobAddressBook} with sample data ."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new Experience(\"0\"), new Date(\"01-01-01\"), new BlacklistStatus(\"false\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    Optional.of(new Address(\"Blk 30 Geylang Street 29, #06-40\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    Optional.empty(), Optional.empty(), getTagSet(\"Hairdresser\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new Experience(\"0.5\"), new Date(\"02-02-02\"), new BlacklistStatus(\"false\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    Optional.of(new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    Optional.of(new UrlLink(\"Google.com\")), Optional.of(new Salary(\"8800\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    getTagSet(\"Developer\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new Experience(\"1.0\"), new Date(\"03-03-03\"), new BlacklistStatus(\"true\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    Optional.of(new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    Optional.of(new UrlLink(\"Github.com\")), Optional.of(new Salary(\"1800\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    getTagSet(\"OfficeLady\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new Experience(\"1.5\"), new Date(\"04-04-04\"), new BlacklistStatus(\"false\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    Optional.of(new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    Optional.of(new UrlLink(\"linkedin.com\")), Optional.empty(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    getTagSet(\"Tuition\", \"Teacher\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new Experience(\"2.0\"), new Date(\"05-05-05\"), new BlacklistStatus(\"true\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    Optional.of(new Address(\"Blk 47 Tampines Street 20, #17-35\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    Optional.of(new UrlLink(\"Tinder.com\")), Optional.of(new Salary(\"2800\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    getTagSet(\"DogGroomer\", \"CatGroomer\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new Experience(\"10\"), new Date(\"06-06-06\"), new BlacklistStatus(\"false\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    Optional.of(new Address(\"Blk 45 Aljunied Street 85, #11-31\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    Optional.of(new UrlLink(\"myprofile.com\")), Optional.of(new Salary(\"25000\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    getTagSet(\"Developer\"))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static Job[] getSampleJobs() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return new Job[] {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            new Job(new Name(\"Toilet Bowl Cleaner\"), new CompanyName(\"Facebook\"), new Phone(\"67438807\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new Email(\"recruitment@facebook.com\"), new Address(\"1 Hacker Way, Menlo Park, CA 94025\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                getTagSet(\"Cleaner\"), new Priority(\"low\"), new Vacancy(\"1\")),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            new Job(new Name(\"Wall Painter\"), new CompanyName(\"Apple\"), new Phone(\"69272758\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new Email(\"recruitment@apple.com\"), new Address(\"1 Apple Park Way, Cupertino, California\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                getTagSet(\"Cleaner\"), new Priority(\"moderate\"), new Vacancy(\"3\")),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            new Job(new Name(\"Plant Waterer\"), new CompanyName(\"Amazon\"), new Phone(\"63210283\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new Email(\"recruitment@amazon.com\"), new Address(\"16 Forest Way, Seattle, Washington\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                getTagSet(\"Cleaner\"), new Priority(\"moderate\"), new Vacancy(\"1\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            new Job(new Name(\"Glass Wiper\"), new CompanyName(\"Netflix\"), new Phone(\"61031282\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new Email(\"recruitment@netflix.com\"), new Address(\"19 Netflix Lane, Los Gatos, California\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                getTagSet(\"Cleaner\"), new Priority(\"moderate\"), new Vacancy(\"5\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            new Job(new Name(\"Software Engineer\"), new CompanyName(\"Google\"), new Phone(\"62492021\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new Email(\"recruitment@google.com\"), new Address(\"1600 Google Way, Mountain View, California\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                getTagSet(\"SE\"), new Priority(\"high\"), new Vacancy(\"2\")),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            new Job(new Name(\"CS2103T Lecturer\"), new CompanyName(\"NUS\"), new Phone(\"62624417\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new Email(\"recruitment@nus.edu.sg\"), new Address(\"21 Lower Kent Ridge Rd, Singapore 119077\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                getTagSet(\"Teaching\"), new Priority(\"high\"), new Vacancy(\"1\"))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        };"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public static ReadOnlyPersonAddressBook getSamplePersonAddressBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonAddressBook samplePAb \u003d new PersonAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            samplePAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return samplePAb;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static ReadOnlyJobAddressBook getSampleJobAddressBook() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobAddressBook sampleJAb \u003d new JobAddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        for (Job sampleJob : getSampleJobs()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            sampleJAb.addJob(sampleJob);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return sampleJAb;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 23,
      "raythx98": 31,
      "g-erm": 8,
      "ameliatjy": 14,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JobAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyJobAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Represents a storage for {@link seedu.address.model.JobAddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public interface JobAddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Path getJobAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyJobAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Optional\u003cReadOnlyJobAddressBook\u003e readJobAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @see #getJobAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Optional\u003cReadOnlyJobAddressBook\u003e readJobAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Saves the given {@link ReadOnlyJobAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    void saveJobAddressBook(ReadOnlyJobAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @see #saveJobAddressBook(ReadOnlyJobAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    void saveJobAddressBook(ReadOnlyJobAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedJob.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.CompanyName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Vacancy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Jackson-friendly version of {@link Job}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "class JsonAdaptedJob {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Job\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final String jobTitle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final String company;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private final String vacancy;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JsonAdaptedJob(@JsonProperty(\"jobtitle\") String jobTitle, @JsonProperty(\"company\") String company,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                          @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                          @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                          @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                          @JsonProperty(\"priority\") String priority, @JsonProperty(\"vacancy\") String vacancy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.jobTitle \u003d jobTitle;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        this.vacancy \u003d vacancy;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Converts a given {@code Job} into this class for Jackson use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JsonAdaptedJob(Job source) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        jobTitle \u003d source.getJobTitle().fullName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        company \u003d source.getCompanyName().fullCompanyName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        priority \u003d source.getPriority().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        vacancy \u003d source.getVacancy().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Converts this Jackson-friendly adapted job object into the model\u0027s {@code Job} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted job."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Job toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        final List\u003cTag\u003e jobTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            jobTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (jobTitle \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"title\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (!Name.isValidName(jobTitle)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        final Name modelTitle \u003d new Name(jobTitle);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (company \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"company name\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (!Name.isValidName(company)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        final CompanyName modelCompany \u003d new CompanyName(company);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(jobTags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                    Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (vacancy \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Vacancy.class.getSimpleName()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (!Vacancy.isValidVacancy(vacancy)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            throw new IllegalValueException(Vacancy.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        final Vacancy modelVacancy \u003d new Vacancy(vacancy);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return new Job(modelTitle, modelCompany, modelPhone, modelEmail, modelAddress,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            modelTags, modelPriority, modelVacancy);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 3,
      "g-erm": 30,
      "ameliatjy": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.BlacklistStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Experience;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Salary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.UrlLink;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final String experience;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final String dateOfApplication;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final String isBlacklisted;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final String urlLink;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final String salary;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"experience\") String experience,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                             @JsonProperty(\"dateOfApplication\") String dateOfApplication,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                             @JsonProperty(\"isBlacklisted\") String isBlacklisted,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                             @JsonProperty(\"address\") String address, @JsonProperty(\"urlLink\") String urlLink,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                             @JsonProperty(\"salary\") String salary,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.experience \u003d experience;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.dateOfApplication \u003d dateOfApplication;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.isBlacklisted \u003d isBlacklisted;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.urlLink \u003d urlLink;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.salary \u003d salary;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        experience \u003d source.getExperience().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        dateOfApplication \u003d source.getDateOfApplication().dateString;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        isBlacklisted \u003d source.getBlacklistStatus().toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        address \u003d source.getAddressOptional().map(address -\u003e address.value).orElse(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        urlLink \u003d source.getUrlLinkOptional().map(link -\u003e link.value).orElse(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        salary \u003d source.getSalaryOptional().map(Salary::toString).orElse(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (experience \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    Experience.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (!Experience.isValidExperience(experience)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new IllegalValueException(Experience.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final Experience modelExperience \u003d new Experience(experience);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (dateOfApplication \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \"Date of Application\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (!Date.isValidDate(dateOfApplication)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final Date modelDateOfApplication \u003d new Date(dateOfApplication);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (isBlacklisted \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \"Blacklist Status\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (!BlacklistStatus.isValidBlacklistStatus(isBlacklisted)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new IllegalValueException(BlacklistStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final BlacklistStatus modelBlacklistStatus \u003d new BlacklistStatus(isBlacklisted);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final Optional\u003cAddress\u003e modelAddressOptional;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            modelAddressOptional \u003d Optional.empty();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } else if (Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            modelAddressOptional \u003d Optional.of(new Address(address));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } else { // address not valid"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final Optional\u003cUrlLink\u003e modelUrlLinkOptional;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (urlLink \u003d\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            modelUrlLinkOptional \u003d Optional.empty();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } else if (UrlLink.isValidLink(urlLink)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            modelUrlLinkOptional \u003d Optional.of(new UrlLink(urlLink));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } else { // urlLink not valid"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new IllegalValueException(UrlLink.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final Optional\u003cSalary\u003e modelSalaryOptional;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (salary \u003d\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            modelSalaryOptional \u003d Optional.empty();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } else if (Salary.isValidSalary(salary)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            modelSalaryOptional \u003d Optional.of(new Salary(salary));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } else { // salary not valid"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new IllegalValueException(Salary.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelExperience, modelDateOfApplication,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                modelBlacklistStatus, modelAddressOptional, modelUrlLinkOptional, modelSalaryOptional, modelTags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 80,
      "ameliatjy": 5,
      "-": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonJobAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyJobAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * A class to access JobAddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JsonJobAddressBookStorage implements JobAddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonJobAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JsonJobAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Path getJobAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Optional\u003cReadOnlyJobAddressBook\u003e readJobAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return readJobAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Similar to {@link #readJobAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Optional\u003cReadOnlyJobAddressBook\u003e readJobAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Optional\u003cJsonSerializableJobAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                filePath, JsonSerializableJobAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void saveJobAddressBook(ReadOnlyJobAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        saveJobAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Similar to {@link #saveJobAddressBook(ReadOnlyJobAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void saveJobAddressBook(ReadOnlyJobAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableJobAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPersonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyPersonAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JsonPersonAddressBookStorage implements PersonAddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPersonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JsonPersonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Path getPersonAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Optional\u003cReadOnlyPersonAddressBook\u003e readPersonAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return readPersonAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Similar to {@link #readPersonAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Optional\u003cReadOnlyPersonAddressBook\u003e readPersonAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Optional\u003cJsonSerializablePersonAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                filePath, JsonSerializablePersonAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void savePersonAddressBook(ReadOnlyPersonAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        savePersonAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Similar to {@link #savePersonAddressBook(ReadOnlyPersonAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void savePersonAddressBook(ReadOnlyPersonAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePersonAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 16,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableJobAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.JobAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyJobAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * An Immutable JobAddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "class JsonSerializableJobAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_JOB \u003d \"Jobs list contains duplicate job(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final List\u003cJsonAdaptedJob\u003e jobs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Constructs a {@code JsonSerializableJobAddressBook} with the given jobs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JsonSerializableJobAddressBook(@JsonProperty(\"jobs\") List\u003cJsonAdaptedJob\u003e jobs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.jobs.addAll(jobs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Converts a given {@code ReadOnlyJobAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableJobAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JsonSerializableJobAddressBook(ReadOnlyJobAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        jobs.addAll(source.getJobList().stream().map(JsonAdaptedJob::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Converts this address book into the model\u0027s {@code JobAddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JobAddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobAddressBook addressBook \u003d new JobAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        for (JsonAdaptedJob jsonAdaptedJob : jobs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            Job job \u003d jsonAdaptedJob.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            if (addressBook.hasJob(job)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_JOB);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            addressBook.addJob(job);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePersonAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.PersonAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyPersonAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * An Immutable PersonAddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "class JsonSerializablePersonAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Constructs a {@code JsonSerializablePersonAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JsonSerializablePersonAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Converts a given {@code ReadOnlyPersonAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePersonAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public JsonSerializablePersonAddressBook(ReadOnlyPersonAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Converts this address book into the model\u0027s {@code PersonAddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public PersonAddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonAddressBook addressBook \u003d new PersonAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 13,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PersonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyPersonAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Represents a storage for {@link seedu.address.model.PersonAddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public interface PersonAddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Path getPersonAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyPersonAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Optional\u003cReadOnlyPersonAddressBook\u003e readPersonAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @see #getPersonAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Optional\u003cReadOnlyPersonAddressBook\u003e readPersonAddressBook(Path filePath)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Saves the given {@link ReadOnlyPersonAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    void savePersonAddressBook(ReadOnlyPersonAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @see #savePersonAddressBook(ReadOnlyPersonAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    void savePersonAddressBook(ReadOnlyPersonAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 13,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.ReadOnlyJobAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyPersonAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public interface Storage extends PersonAddressBookStorage, JobAddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PersonAddressBookStorage \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Path getPersonAddressBookFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Optional\u003cReadOnlyPersonAddressBook\u003e readPersonAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    void savePersonAddressBook(ReadOnlyPersonAddressBook personAddressBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d JobAddressBookStorage \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    Path getJobAddressBookFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    Optional\u003cReadOnlyJobAddressBook\u003e readJobAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    void saveJobAddressBook(ReadOnlyJobAddressBook jobAddressBook) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 10,
      "ameliatjy": 3,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.ReadOnlyJobAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyPersonAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Manages storage of PersonAddressBook and JobAddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private PersonAddressBookStorage personAddressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private JobAddressBookStorage jobAddressBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code PersonAddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public StorageManager(PersonAddressBookStorage personAddressBookStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                          JobAddressBookStorage jobAddressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.personAddressBookStorage \u003d personAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.jobAddressBookStorage \u003d jobAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PersonAddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Path getPersonAddressBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return personAddressBookStorage.getPersonAddressBookFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Optional\u003cReadOnlyPersonAddressBook\u003e readPersonAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return readPersonAddressBook(personAddressBookStorage.getPersonAddressBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Optional\u003cReadOnlyPersonAddressBook\u003e readPersonAddressBook(Path filePath)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        logger.fine(\"Attempting to read person data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return personAddressBookStorage.readPersonAddressBook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void savePersonAddressBook(ReadOnlyPersonAddressBook personAddressBook) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        savePersonAddressBook(personAddressBook, personAddressBookStorage.getPersonAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void savePersonAddressBook(ReadOnlyPersonAddressBook personAddressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        logger.fine(\"Attempting to write to person data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        personAddressBookStorage.savePersonAddressBook(personAddressBook, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d JobAddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public Path getJobAddressBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return jobAddressBookStorage.getJobAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public Optional\u003cReadOnlyJobAddressBook\u003e readJobAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return readJobAddressBook(jobAddressBookStorage.getJobAddressBookFilePath());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public Optional\u003cReadOnlyJobAddressBook\u003e readJobAddressBook(Path filePath)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        logger.fine(\"Attempting to read job data from file: \" + filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return jobAddressBookStorage.readJobAddressBook(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void saveJobAddressBook(ReadOnlyJobAddressBook jobAddressBook) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        saveJobAddressBook(jobAddressBook, jobAddressBookStorage.getJobAddressBookFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void saveJobAddressBook(ReadOnlyJobAddressBook jobAddressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        logger.fine(\"Attempting to write to job data file: \" + filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        jobAddressBookStorage.saveJobAddressBook(jobAddressBook, filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 46,
      "ameliatjy": 6,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://tinyurl.com/candidatesUG\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide for more information: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String TABLE_HEADER \u003d \"Command Summary\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String TABLE_FIRST_COLUMN \u003d \"Action\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String TABLE_SECOND_COLUMN \u003d \"Candidate Format\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String TABLE_THIRD_COLUMN \u003d \"Job Format\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String ADD_ACTION \u003d \"  Add\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String LIST_ACTION \u003d \"  List\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String EDIT_ACTION \u003d \"  Edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String FIND_ACTION \u003d \"  Find\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String SORT_ACTION \u003d \"  Sort\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String DELETE_ACTION \u003d \"  Delete\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String CLEAR_ACTION \u003d \"  Clear\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String HELP_ACTION \u003d \"  Help\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String EXIT_ACTION \u003d \"  Exit\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    // Candidate Formats"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String ADD_CANDIDATE_FORMAT \u003d \"   add can\\n   n/NAME\\n   p/PHONE_NUMBER\\n   e/EMAIL\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"   a/ADDRESS\\n   exp/YEARS_OF_EXPERIENCE\\n   doa/DATE_OF_APPLICATION\\n   [sal/EXPECTED_SALARY]\\n   \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[bl/IS_BLACKLISTED]\\n   [link/PROFILE_LINK]\\n   [t/JOB_TYPE]… \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String LIST_CANDIDATE_FORMAT \u003d \"   list can\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String EDIT_CANDIDATE_FORMAT \u003d \"   edit can INDEX\\n   \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[n/NAME]\\n   [p/PHONE_NUMBER]\\n   [e/EMAIL]\\n   [a/ADDRESS]\\n   [doa/DATE_OF_APPLICATION]\\n   \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[sal/EXPECTED_SALARY]\\n   [bl/IS_BLACKLISTED]\\n   [link/PROFILE_LINK]\\n   [t/JOB_TYPE]…\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String FIND_CANDIDATE_FORMAT \u003d \"   find can\\n   [n/NAME]\\n   [p/PHONE]\\n   \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[e/EMAIL]\\n   [a/ADDRESS]\\n   [exp/EXPERIENCE]\\n   [doa/APPLICATION_DATE]\\n   [sal/EXPECTED_SALARY]\\n   \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[bl/IS_BLACKLISTED]\\n   [link/PROFILE_LINK]\\n   [t/JOB_TYPE]…\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String SORT_CANDIDATE_FORMAT \u003d \"   sort can\\n   type/FIELD_TO_SORT\\n   order/ORDER\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String DELETE_CANDIDATE_FORMAT \u003d \"   delete can INDEX\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String CLEAR_CANDIDATE_FORMAT \u003d \"   clear can\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    //Job Formats"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String ADD_JOB_FORMAT \u003d \"   add job\\n   n/JOB_TITLE\\n   c/COMPANY_NAME\\n   \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"p/PHONE_NUMBER\\n   e/EMAIL\\n   a/ADDRESS\\n   v/VACANCY\\n   [pr/PRIORITY]\\n   [t/JOB_DESCRIPTION]…\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String LIST_JOB_FORMAT \u003d \"   list job\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String EDIT_JOB_FORMAT \u003d \"   edit job INDEX\\n   [n/JOB_TITLE]\\n   \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[c/COMPANY_NAME]\\n   [p/PHONE] [e/EMAIL]\\n   \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"[a/ADDRESS]\\n   [v/VACANCY]\\n   [pr/PRIORITY]\\n   [t/JOB_DESCRIPTION]…\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String FIND_JOB_FORMAT \u003d \"   find job\\n   [n/JOB_TITLE]\\n   [c/COMPANY_NAME]\\n   [p/PHONE]\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            + \"   [e/EMAIL]\\n   \" + \"[a/ADDRESS]\\n   [pr/PRIORITY]\\n   [v/VACANCY]\\n   [t/JOB_DESCRIPTION]…\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String SORT_JOB_FORMAT \u003d \"   sort job\\n   type/FIELD_TO_SORT\\n   order/ORDER\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String DELETE_JOB_FORMAT \u003d \"   delete job INDEX\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String CLEAR_JOB_FORMAT \u003d \"   clear job\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    //General Formats"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String HELP_FORMAT \u003d \"   help\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String EXIT_FORMAT \u003d \"   exit\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final ObservableList\u003cRow\u003e tableRows \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            FXCollections.observableArrayList("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new Row(ADD_ACTION, ADD_CANDIDATE_FORMAT, ADD_JOB_FORMAT),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new Row(LIST_ACTION, LIST_CANDIDATE_FORMAT, LIST_JOB_FORMAT),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new Row(EDIT_ACTION, EDIT_CANDIDATE_FORMAT, EDIT_JOB_FORMAT),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new Row(FIND_ACTION, FIND_CANDIDATE_FORMAT, FIND_JOB_FORMAT),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new Row(SORT_ACTION, SORT_CANDIDATE_FORMAT, SORT_JOB_FORMAT),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new Row(DELETE_ACTION, DELETE_CANDIDATE_FORMAT, DELETE_JOB_FORMAT),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new Row(CLEAR_ACTION, CLEAR_CANDIDATE_FORMAT, CLEAR_JOB_FORMAT),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new Row(HELP_ACTION, HELP_FORMAT, HELP_FORMAT),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new Row(EXIT_ACTION, EXIT_FORMAT, EXIT_FORMAT));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Label tableHeader;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private TableColumn\u003cRow, String\u003e action;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private TableColumn\u003cRow, String\u003e candidateFormat;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private TableColumn\u003cRow, String\u003e jobFormat;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private TableView\u003cRow\u003e table;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        helpMessage.setFont(new Font(\"Arial\", 15));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        tableHeader.setText(TABLE_HEADER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        tableHeader.setFont(new Font(\"Arial\", 20));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        action.setText(TABLE_FIRST_COLUMN);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        candidateFormat.setText(TABLE_SECOND_COLUMN);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        jobFormat.setText(TABLE_THIRD_COLUMN);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        action.setCellValueFactory(new PropertyValueFactory\u003cRow, String\u003e(\"action\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        candidateFormat.setCellValueFactory(new PropertyValueFactory\u003cRow, String\u003e(\"candidateFormat\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        jobFormat.setCellValueFactory(new PropertyValueFactory\u003cRow, String\u003e(\"jobFormat\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        table.setItems(tableRows);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static class Row {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        private String action;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        private String candidateFormat;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        private String jobFormat;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        private Row(String action, String candidateFormat, String jobFormat) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            this.action \u003d action;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            this.candidateFormat \u003d candidateFormat;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            this.jobFormat \u003d jobFormat;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public String getAction() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return action;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public String getCandidateFormat() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return candidateFormat;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public String getJobFormat() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return jobFormat;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 116,
      "raythx98": 1,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/JobCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * An UI component that displays information of a {@code Job}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class JobCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private static final String FXML \u003d \"JobListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public final Job job;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label jobName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label companyName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label companyId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label companyAddress;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private Label jobPriority;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private Label jobVacancy;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private FlowPane jobTags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public JobCard(Job job, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.job \u003d job;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        companyId.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        jobName.setText(job.getJobTitle().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        companyName.setText(job.getCompanyName().fullCompanyName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        companyAddress.setText(job.getAddress().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        jobPriority.setText(\"Priority: \" + job.getPriority().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        jobVacancy.setText(\"Vacancies: \" + job.getVacancy().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        job.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                .forEach(tag -\u003e jobTags.getChildren().add(new Label(tag.tagName + \" \")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (job.getPriority().value.equals(\"high\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            jobPriority.setStyle(\"-fx-background-color: #ff6961; -fx-text-fill:black;\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else if (job.getPriority().value.equals(\"moderate\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            jobPriority.setStyle(\"-fx-background-color: #fdfd96; -fx-text-fill:black;\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else if (job.getPriority().value.equals(\"low\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            jobPriority.setStyle(\"-fx-background-color: #b0ffad; -fx-text-fill:black;\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            jobPriority.setStyle(\"-fx-background-color:black;\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        companyName.setStyle(\"-fx-text-fill:#5f66b9;\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (!(other instanceof JobCard)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        JobCard card \u003d (JobCard) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return companyId.getText().equals(card.companyId.getText())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u0026\u0026 job.equals(card.job);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 82,
      "raythx98": 1,
      "g-erm": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/JobDetailedView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * UI component that displays the details of a {@code Job}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class JobDetailedView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private static final String FXML \u003d \"JobDetailedView.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private final Job job;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private StackPane detailPersonView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label detailedCompanyName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label detailedCompanyEmail;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label detailedCompanyPhone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Creates a detailed view of a {@code Job} with given Job."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public JobDetailedView(Job job) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.job \u003d job;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String companyName \u003d job.getCompanyName().fullCompanyName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String companyPhone \u003d job.getPhone().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String companyEmail \u003d job.getEmail().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        detailedCompanyName.setText(companyName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        detailedCompanyPhone.setText(companyPhone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        detailedCompanyEmail.setText(companyEmail);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/JobListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class JobListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static final String TAB_NAME \u003d \"Jobs\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private static final String FXML \u003d \"JobListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private ListView\u003cJob\u003e jobListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public JobListPanel(ObservableList\u003cJob\u003e jobList, MainWindow mainWindow) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        jobListView.setItems(jobList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        jobListView.setCellFactory(listView -\u003e new JobListPanel.JobListViewCell(mainWindow));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    class JobListViewCell extends ListCell\u003cJob\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        private MainWindow mainWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        public JobListViewCell(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        protected void updateItem(Job job, boolean empty) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            super.updateItem(job, empty);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            if (empty || job \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                setGraphic(new JobCard(job, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                setOnMouseClicked(event -\u003e mainWindow.updateDetailedJobPanel(job));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 54,
      "BreadPeanutButter": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private JobListPanel jobListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private StackPane jobListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private StackPane detailedView;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), this);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        JobListPanel jobListPanel \u003d new JobListPanel(logic.getFilteredJobList(), this);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        jobListPanelPlaceholder.getChildren().add(jobListPanel.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Updates the detailed view on the right panel with the supplied {@code Person}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void updateDetailedPersonPanel(Person person) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonDetailedView personDetailedView \u003d new PersonDetailedView(person);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        detailedView.getChildren().clear();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        detailedView.getChildren().add(personDetailedView.getRoot());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Updates the detailed view on the right panel with the supplied {@code Job}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void updateDetailedJobPanel(Job job) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        JobDetailedView jobDetailedView \u003d new JobDetailedView(job);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        detailedView.getChildren().clear();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        detailedView.getChildren().add(jobDetailedView.getRoot());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Switches tab to the desired tab."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private void switchTab(String tabName) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        switch (tabName) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        case PersonListPanel.TAB_NAME:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            tabPane.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        case JobListPanel.TAB_NAME:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            tabPane.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new AssertionError(\"No such tab name \" + tabName);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            Optional\u003cString\u003e tabNameToDisplay \u003d commandResult.getTabName();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            if (tabNameToDisplay.isPresent()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                System.out.println(tabNameToDisplay.get());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                switchTab(tabNameToDisplay.get());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 67,
      "-": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label personName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label personId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label personPhone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Label personExperience;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Label personDateOfApplication;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Label personBlacklistStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Label personSalary;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private FlowPane personTags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        personId.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        personName.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        personPhone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        personExperience.setText(String.format(\"%.1f years\", person.getExperience().experienceInYears));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        personDateOfApplication.setText(person.getDateOfApplication().dateString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        personBlacklistStatus.setText(person.getBlacklistStatus().isBlacklisted ? \"Blacklisted\" : \"Not Blacklisted\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        person.getSalaryOptional().ifPresent(sal -\u003e personSalary.setText(\"$\" + sal.toString()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                .forEach(tag -\u003e personTags.getChildren().add(new Label(tag.tagName + \" \")));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        personBlacklistStatus.setStyle(person.getBlacklistStatus().isBlacklisted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                ? \"-fx-background-color: black; -fx-text-fill: white;\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                : \"-fx-background-color: green; -fx-text-fill:white;\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return personId.getText().equals(card.personId.getText())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 12,
      "BreadPeanutButter": 10,
      "ameliatjy": 1,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonDetailedView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * UI component that displays the details of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class PersonDetailedView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private static final String FXML \u003d \"PersonDetailedView.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private StackPane detailPersonView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label detailedName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label detailedEmail;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label detailedExperience;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label detailedDateOfApplication;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label detailedAddress;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label detailedUrlLink;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label detailedSalary;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Creates a detailed view of a {@code Person} with given person."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public PersonDetailedView(Person person) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String name \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String email \u003d person.getEmail().value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String yearsOfExperience \u003d person.getExperience().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String dateOfApplication \u003d person.getDateOfApplication().dateString;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String address \u003d person.getAddressOptional().map(add -\u003e add.value).orElse(\"Empty!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String profileLink \u003d person.getUrlLinkOptional().map(url -\u003e url.value).orElse(\"Empty!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String salary \u003d person.getSalaryOptional().map(sal -\u003e String.valueOf(sal.salary)).orElse(\"Empty!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        detailedName.setText(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        detailedEmail.setText(email);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        detailedExperience.setText(yearsOfExperience);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        detailedAddress.setText(address);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        detailedUrlLink.setText(profileLink);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        detailedDateOfApplication.setText(dateOfApplication);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        detailedSalary.setText(salary);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static final String TAB_NAME \u003d \"Candidates\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private StackPane detailedView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList, MainWindow mainWindow) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListPanel.PersonListViewCell(mainWindow));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    };"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        private MainWindow mainWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        public PersonListViewCell(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                setOnMouseClicked(event -\u003e mainWindow.updateDetailedPersonPanel(person));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 17,
      "ameliatjy": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    font-family: Poppins Regular;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    src: url(\u0027PoppinsRegular.ttf\u0027);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    font-family: Poppins Thin;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    src: url(\u0027PoppinsThin.ttf\u0027);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".right-panel {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".left-panel {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".status {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #000000;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".detailed-background {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #fdfdfd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-effect: dropshadow(three-pass-box, rgba(0.5,0.5,0.5,0.5), 10, 0, 0, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".label-big {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-size: 40px ;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-family: \"Poppins Thin\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-translate-y: 50;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".label-details {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-padding: 1 1 1 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-family: \"Poppins Regular\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".label-side {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-family: \"Poppins Regular\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-padding: 3 3 3 3;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-pref-height: 30;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-pref-width: 170;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-weight: 20;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-translate-x: -50;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".label-label {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-family: \"Poppins Regular\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-text-fill: #5f66b9;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".label-detail {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-pref-width: 300;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #f6f6f6;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background{"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #ff605c;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #5f66b9;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-radius: 10 10 10 10;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-pref-height: 35;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-pref-width: 320;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-insets: 0 4 0 4,0,0,0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-pref-width: 140;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-family: sans-serif;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".list-view .list-background {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-padding: 3px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-effect: dropshadow(three-pass-box, rgba(0.5,0.5,0.5,0.5), 10, 0, 0, 0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-graphic-text-gap : 0px;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-insets: 0px, 2px ;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-border-insets: 5px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-insets: 12px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-border-radius: 10px;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #fdfdfd;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".list-cell:filled {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background: #fdfdfd;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-border-color: #ffffff;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".list-view .scroll-bar:vertical {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-scale-x: 0;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-family: \"Poppins Regular\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-size: 24px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-family: \"Poppins thin\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -font-weight:4;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-border-radius: 5;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #f0f0f0;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-family: \"Poppins Regular\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".result-display .background {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-family: sans-serif;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-border-color: #ffffff;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-family: sans-serif;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: transparent #ffffff transparent #ffffff;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-family: sans-serif;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-family: \"Poppins Regular\";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-insets: 10;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".tags {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".tags .label {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: #ff605c;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-padding: 3 3 3 3;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-size: 20;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".tab-down-button {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "-fx-padding: 0;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".tab-down-button .arrow {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "-fx-padding: 0;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".right-scroll {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ".attributes.label  {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 158,
      "-": 204
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c?import javafx.scene.control.cell.PropertyValueFactory?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "         \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u003cLabel fx:id\u003d\"tableHeader\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        \u003cInsets right\u003d\"5.0\" top\u003d\"10\" bottom\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u003cTableView fx:id\u003d\"table\" prefHeight\u003d\"500.0\" prefWidth\u003d\"650\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        \u003cInsets right\u003d\"8.0\" left\u003d\"8\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u003ccolumns\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        \u003cTableColumn prefWidth\u003d\"80.0\" fx:id\u003d\"action\" \u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                            \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                                \u003cPropertyValueFactory property\u003d\"action\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                            \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        \u003cTableColumn prefWidth\u003d\"280.0\" fx:id\u003d\"candidateFormat\" \u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                            \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                                \u003cPropertyValueFactory property\u003d\"candidateFormat\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                            \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        \u003cTableColumn prefWidth\u003d\"280.0\" fx:id\u003d\"jobFormat\" \u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                            \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                                \u003cPropertyValueFactory property\u003d\"jobFormat\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                            \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    \u003c/columns\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u003c/TableView\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" top\u003d\"15\" bottom\u003d\"8\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 36,
      "-": 34
    }
  },
  {
    "path": "src/main/resources/view/JobDetailedView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003cHBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"detailed-background\" minWidth\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003cGridPane prefWidth\u003d\"441.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cVBox prefWidth\u003d\"244.0\" GridPane.columnIndex\u003d\"0\" spacing\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\" spacing\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel fx:id\u003d\"detailedCompanyName\" styleClass\u003d\"label-big\" alignment\u003d\"CENTER\" translateY\u003d\"20\" wrapText\u003d\"true\" maxWidth\u003d\"490\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cGridPane  alignment\u003d\"CENTER_LEFT\" vgap\u003d\"60\" translateX\u003d\"15\" hgap\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003cLabel text\u003d\"Email\" styleClass\u003d\"label-label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003cLabel fx:id\u003d\"detailedCompanyEmail\" styleClass\u003d\"label-detail\" wrapText\u003d\"true\" maxWidth\u003d\"200\" GridPane.columnIndex\u003d\"10\" GridPane.rowIndex\u003d\"1\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003cLabel text\u003d\"Phone\" styleClass\u003d\"label-label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003cLabel fx:id\u003d\"detailedCompanyPhone\" styleClass\u003d\"label-detail\" wrapText\u003d\"true\" maxWidth\u003d\"200\" GridPane.columnIndex\u003d\"10\" GridPane.rowIndex\u003d\"2\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 28
    }
  },
  {
    "path": "src/main/resources/view/JobListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel fx:id\u003d\"companyId\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel fx:id\u003d\"jobName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cHBox spacing\u003d\"130\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        \u003cLabel fx:id\u003d\"companyName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        \u003cFlowPane fx:id\u003d\"jobTags\" styleClass\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        \u003cLabel fx:id\u003d\"companyAddress\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                        \u003cLabel fx:id\u003d\"jobVacancy\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$vacancy\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003cLabel fx:id\u003d\"jobPriority\" styleClass\u003d\"label-side\" text\u003d\"\\$priority\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 45,
      "g-erm": 1
    }
  },
  {
    "path": "src/main/resources/view/JobListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003cListView fx:id\u003d\"jobListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import java.net.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.stage.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003cfx:root maxHeight\u003d\"700\" maxWidth\u003d\"1280\" onCloseRequest\u003d\"#handleExit\" resizable\u003d\"false\"  title\u003d\"Candidates\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cHBox style\u003d\"-fx-background-color: white\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cVBox styleClass\u003d\"left-panel\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cTabPane fx:id\u003d\"tabPane\" maxWidth\u003d\"650\" prefHeight\u003d\"800.0\" styleClass\u003d\"tabs\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "              \u003ctabs\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cTab id\u003d\"personTab\" fx:id\u003d\"personTab\" text\u003d\"Candidates\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003cVBox fx:id\u003d\"personList\" maxWidth\u003d\"650\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cTab fx:id\u003d\"jobTab\" text\u003d\"Jobs\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003cVBox fx:id\u003d\"jobsList\" maxWidth\u003d\"650\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"jobListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "              \u003c/tabs\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "              \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" maxWidth\u003d\"650\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"status-panel\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "              \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" maxWidth\u003d\"650\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" pannable\u003d\"true\" style\u003d\"-fx-background-color: white;\" styleClass\u003d\"right-scroll\" vbarPolicy\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cVBox maxWidth\u003d\"630\" minHeight\u003d\"1300\"  minWidth\u003d\"500\" spacing\u003d\"10\" styleClass\u003d\"right-panel\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cStackPane fx:id\u003d\"detailedView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 46,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/PersonDetailedView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003cHBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"detailed-background\" minWidth\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003cGridPane prefWidth\u003d\"441.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cVBox prefWidth\u003d\"244.0\" GridPane.columnIndex\u003d\"0\" spacing\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\" spacing\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel fx:id\u003d\"detailedName\" styleClass\u003d\"label-big\" alignment\u003d\"CENTER\" translateY\u003d\"20\" wrapText\u003d\"true\" maxWidth\u003d\"490\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cGridPane alignment\u003d\"CENTER_LEFT\" vgap\u003d\"30\" translateX\u003d\"15\" hgap\u003d\"20\" VBox.vgrow\u003d\"ALWAYS\" maxHeight\u003d\"1000\" translateY\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel text\u003d\"Email\" styleClass\u003d\"label-label\"  GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"1\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel fx:id\u003d\"detailedEmail\" styleClass\u003d\"label-detail\"  wrapText\u003d\"true\" maxWidth\u003d\"200\"  GridPane.columnIndex\u003d\"8\" GridPane.rowIndex\u003d\"1\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel text\u003d\"Experience\" styleClass\u003d\"label-label\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"2\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel fx:id\u003d\"detailedExperience\" styleClass\u003d\"label-detail\"  GridPane.columnIndex\u003d\"8\" GridPane.rowIndex\u003d\"2\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel text\u003d\"Date of Application\" styleClass\u003d\"label-label\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"3\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel fx:id\u003d\"detailedDateOfApplication\" styleClass\u003d\"label-detail\" GridPane.columnIndex\u003d\"8\" GridPane.rowIndex\u003d\"3\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel text\u003d\"Address\" styleClass\u003d\"label-label\" wrapText\u003d\"true\" maxWidth\u003d\"200\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"4\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel fx:id\u003d\"detailedAddress\" styleClass\u003d\"label-detail\" wrapText\u003d\"true\" maxWidth\u003d\"200\"  GridPane.columnIndex\u003d\"8\" GridPane.rowIndex\u003d\"4\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel text\u003d\"Profile Link\" styleClass\u003d\"label-label\"  GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"5\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel fx:id\u003d\"detailedUrlLink\" styleClass\u003d\"label-detail\" wrapText\u003d\"true\"  maxWidth\u003d\"200\"  GridPane.columnIndex\u003d\"8\" GridPane.rowIndex\u003d\"5\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel text\u003d\"Salary\" styleClass\u003d\"label-label\"  GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"6\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cLabel fx:id\u003d\"detailedSalary\" styleClass\u003d\"label-detail\"  GridPane.columnIndex\u003d\"8\" GridPane.rowIndex\u003d\"6\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 33
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cLabel fx:id\u003d\"personId\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cLabel fx:id\u003d\"personName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "      \u003cHBox spacing\u003d\"115\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "          \u003cVBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"personTags\" styleClass\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cLabel fx:id\u003d\"personPhone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            \u003cLabel fx:id\u003d\"personExperience\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$experience\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            \u003cLabel fx:id\u003d\"personDateOfApplication\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            \u003cLabel fx:id\u003d\"personSalary\" styleClass\u003d\"cell_small_label\"  text\u003d\"no expected salary\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "          \u003cLabel fx:id\u003d\"personBlacklistStatus\" styleClass\u003d\"label-side\" textFill\u003d\"white\"  /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 12,
      "BreadPeanutButter": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" minWidth\u003d\"350\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" promptText\u003d\"Result Display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/TabBar.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003cTabPane  fx:id\u003d\"personAndJobTabBar\" styleClass\u003d\"tab-pane\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cTab fx:id\u003d\"personTab\" styleClass\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cTab fx:id\u003d\"jobTab\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003cVBox fx:id\u003d\"jobList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cStackPane fx:id\u003d\"jobListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 32
    }
  },
  {
    "path": "src/test/data/JsonJobAddressBookStorageTest/invalidAndValidJobAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  \"jobs\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"jobtitle\": \"Toilet Bowl Cleaner\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"company\": \"Facebook\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"phone\": \"67438807\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"email\": \"recruitment@facebook.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"address\": \"1 Hacker Way, Menlo Park, CA 94025\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"tagged\": [ \"Cleaner\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"priority\": \"low\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"jobtitle\": \"Human Resource\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"company\": \"Google\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"priority\": \"high\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 18
    }
  },
  {
    "path": "src/test/data/JsonJobAddressBookStorageTest/invalidJobAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  \"jobs\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"jobtitle\": \"Human Resource\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"company\": \"Google\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"priority\": \"high\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 10
    }
  },
  {
    "path": "src/test/data/JsonSerializableJobAddressBookTest/duplicateJobAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  \"jobs\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"jobtitle\": \"Software Engineer\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"company\": \"Facebook\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"tagged\": [ \"coding\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"priority\": \"low\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"vacancy\": \"1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"jobtitle\": \"Software Engineer\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"company\": \"Facebook\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"priority\": \"low\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"vacancy\": \"1\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-erm": 4,
      "ameliatjy": 16
    }
  },
  {
    "path": "src/test/data/JsonSerializableJobAddressBookTest/invalidJobAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  \"jobs\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"jobtitle\": \"Human Resource\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"company\": \"Google\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"priority\": \"high\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"vacancy\": \"1\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-erm": 2,
      "ameliatjy": 9
    }
  },
  {
    "path": "src/test/data/JsonSerializableJobAddressBookTest/typicalJobsAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Job values as in TypicalJobs#getTypicalJobAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  \"jobs\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"jobtitle\": \"Toilet Bowl Cleaner\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"company\": \"Facebook\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"phone\": \"67438807\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"email\": \"recruitment@facebook.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"address\": \"1 Hacker Way, Menlo Park, CA 94025\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"tagged\": [ \"Cleaner\" ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"priority\": \"low\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"vacancy\": \"1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"jobtitle\": \"Wall Painter\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"company\": \"Apple\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"phone\": \"69272758\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"email\": \"recruitment@apple.com\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"address\": \"1 Apple Park Way, Cupertino, California\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"tagged\": [ \"Cleaner\" ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"priority\": \"low\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"vacancy\": \"3\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"jobtitle\": \"Plant Waterer\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"company\": \"Amazon\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"phone\": \"63210283\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"email\": \"recruitment@amazon.com\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"address\": \"16 Forest Way, Seattle, Washington\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"tagged\": [ \"Cleaner\" ],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"priority\": \"low\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"vacancy\": \"2\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"jobtitle\": \"Glass Wiper\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"company\": \"Netflix\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"phone\": \"61031282\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"email\": \"recruitment@netflix.com\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"address\": \"19 Netflix Lane, Los Gatos, California\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"tagged\": [ \"Cleaner\" ],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"priority\": \"moderate\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"vacancy\": \"5\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"jobtitle\": \"Software Engineer\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"company\": \"Google\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"phone\": \"62492021\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"email\": \"recruitment@google.com\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"address\": \"1600 Google Way, Mountain View, California\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"tagged\": [ \"SE\" ],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"priority\": \"moderate\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"vacancy\": \"2\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"jobtitle\": \"CS2103T Lecturer\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"company\": \"NUS\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"phone\": \"62624417\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"email\": \"recruitment@nus.edu.sg\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"address\": \"21 Lower Kent Ridge Rd, Singapore 119077\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    \"tagged\": [ \"Teaching\" ],"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"priority\": \"high\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    \"vacancy\": \"1\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-erm": 12,
      "ameliatjy": 46
    }
  },
  {
    "path": "src/test/data/JsonSerializablePersonAddressBookTest/duplicatePersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"experience\" : \"3.0\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"dateOfApplication\" : \"01-01-15\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"isBlacklisted\" : \"true\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"urlLink\" : \"profile.com\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"experience\" : \"2.0\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"dateOfApplication\" : \"29-11-11\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"isBlacklisted\" : \"false\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"urlLink\" : \"portfolio.com\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 9,
      "-": 13
    }
  },
  {
    "path": "src/test/data/JsonSerializablePersonAddressBookTest/typicalPersonsAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"experience\" : \"3.5\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"dateOfApplication\" : \"02-10-19\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"isBlacklisted\" : \"false\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"address\" : null,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"urlLink\" : null,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"salary\" : null,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"experience\" : \"2.0\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"dateOfApplication\" : \"12-01-21\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"isBlacklisted\" : \"false\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"urlLink\" : \"linkedin.com\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"salary\" : \"13000\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"experience\" : \"0.5\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"dateOfApplication\" : \"02-01-19\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"isBlacklisted\" : \"true\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"urlLink\" : null,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"salary\" : \"4500\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"experience\" : \"0\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"dateOfApplication\" : \"01-10-20\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"isBlacklisted\" : \"false\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"urlLink\" : \"tinder.com\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"salary\" : \"3000\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"experience\" : \"1.5\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"dateOfApplication\" : \"20-12-20\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"isBlacklisted\" : \"false\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"urlLink\" : null,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"salary\" : null,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"experience\" : \"10\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"dateOfApplication\" : \"12-12-12\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"isBlacklisted\" : \"true\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"urlLink\" : null,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"salary\" : \"2900\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"experience\" : \"1\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"dateOfApplication\" : \"11-08-20\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"isBlacklisted\" : \"false\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"urlLink\" : \"github.com\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \"salary\" : \"8888\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 36,
      "-": 45
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  \"personAddressBookFilePath\" : \"personaddressbook.json\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  \"jobAddressBookFilePath\" : \"jobaddressbook.json\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  \"personAddressBookFilePath\" : \"personaddressbook.json\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "  \"jobAddressBookFilePath\" : \"jobaddressbook.json\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPERIENCE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.AddPersonCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.ListPersonCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.ReadOnlyJobAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyPersonAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.storage.JsonJobAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.storage.JsonPersonAddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonPersonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JsonPersonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JsonJobAddressBookStorage jobAddressBookStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new JsonJobAddressBookStorage(temporaryFolder.resolve(\"jobAddressBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, jobAddressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String deleteCommand \u003d \"delete can 99999\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        String listCommand \u003d ListPersonCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertCommandSuccess(listCommand, ListPersonCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Setup LogicManager with JsonPersonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonPersonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JsonPersonAddressBookIoExceptionThrowingStub(temporaryFolder"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                        .resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JsonJobAddressBookStorage jobAddressBookStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new JsonJobAddressBookIoExceptionThrowingStub(temporaryFolder"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                        .resolve(\"ioExceptionJobAddressBook.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, jobAddressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        String addCommand \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + EXPERIENCE_DESC_AMY + DATE_DESC_AMY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void getFilteredJobList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredJobList().remove(0));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonAddressBook(), model.getJobAddressBook(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method of Person Address Book is called."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static class JsonPersonAddressBookIoExceptionThrowingStub extends JsonPersonAddressBookStorage {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        private JsonPersonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        public void savePersonAddressBook(ReadOnlyPersonAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method of Job Address Book is called."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private static class JsonJobAddressBookIoExceptionThrowingStub extends JsonJobAddressBookStorage {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        private JsonJobAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void saveJobAddressBook(ReadOnlyJobAddressBook jobAddressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 5,
      "raythx98": 28,
      "ameliatjy": 12,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddJobCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddJobCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class AddJobCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        model \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void execute_newJob_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Job validJob \u003d new JobBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonAddressBook(), model.getJobAddressBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        expectedModel.addJob(validJob);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertCommandSuccess(new AddJobCommand(validJob), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                String.format(AddJobCommand.MESSAGE_SUCCESS, validJob), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Job jobInList \u003d model.getJobAddressBook().getJobList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertCommandFailure(new AddJobCommand(jobInList), model, AddJobCommand.MESSAGE_DUPLICATE_JOB);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 46,
      "ameliatjy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddJobCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.JobAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.ReadOnlyJobAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.ReadOnlyPersonAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class AddJobCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void constructor_nullJob_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddJobCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void execute_jobAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        ModelStubAcceptingJobAdded modelStub \u003d new ModelStubAcceptingJobAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Job validJob \u003d new JobBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        CommandResult commandResult \u003d new AddJobCommand(validJob).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(String.format(AddJobCommand.MESSAGE_SUCCESS, validJob), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertEquals(Arrays.asList(validJob), modelStub.jobsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void execute_duplicateJob_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Job validJob \u003d new JobBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        AddJobCommand addJobCommand \u003d new AddJobCommand(validJob);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithJob(validJob);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertThrows(CommandException.class, AddJobCommand.MESSAGE_DUPLICATE_JOB, ()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            -\u003e addJobCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Job iras \u003d new JobBuilder().withJobTitle(\"IRAS\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Job maybank \u003d new JobBuilder().withJobTitle(\"MAYBANK\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        AddJobCommand addIrasCommand \u003d new AddJobCommand(iras);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        AddJobCommand addMaybankCommand \u003d new AddJobCommand(maybank);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(addIrasCommand.equals(addIrasCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        AddJobCommand addIrasCommandCopy \u003d new AddJobCommand(iras);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(addIrasCommand.equals(addIrasCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(addIrasCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(addIrasCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(addIrasCommand.equals(addMaybankCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public Path getPersonAddressBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void setPersonAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void setPersonAddressBook(ReadOnlyPersonAddressBook newData) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public ReadOnlyPersonAddressBook getPersonAddressBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public Path getJobAddressBookFilePath() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void setJobAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void setJobAddressBook(ReadOnlyJobAddressBook addressBook) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public ReadOnlyJobAddressBook getJobAddressBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public boolean hasJob(Job job) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void deleteJob(Job target) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void addJob(Job job) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void setJob(Job target, Job editedJob) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public ObservableList\u003cJob\u003e getFilteredJobList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        public ObservableList\u003cJob\u003e getSortedJobList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        public ObservableList\u003cPerson\u003e getSortedPersonList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        public void updateSortedJobList(Comparator\u003cJob\u003e comparator) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        public void updateSortedPersonList(Comparator\u003cPerson\u003e comparator) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * A Model stub that contains a single job."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private class ModelStubWithJob extends ModelStub {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        private final Job job;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        ModelStubWithJob(Job job) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            requireNonNull(job);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            this.job \u003d job;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public boolean hasJob(Job job) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            requireNonNull(job);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            return this.job.isSameJob(job);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * A Model stub that always accept the job being added."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private class ModelStubAcceptingJobAdded extends ModelStub {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        final ArrayList\u003cJob\u003e jobsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public boolean hasJob(Job job) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            requireNonNull(job);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            return jobsAdded.stream().anyMatch(job::isSameJob);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void addJob(Job job) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            requireNonNull(job);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            jobsAdded.add(job);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public ReadOnlyJobAddressBook getJobAddressBook() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            return new JobAddressBook();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 11,
      "raythx98": 246,
      "g-erm": 10,
      "ameliatjy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddPersonCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddPersonCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class AddPersonCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        model \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonAddressBook(), model.getJobAddressBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertCommandSuccess(new AddPersonCommand(validPerson), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Person personInList \u003d model.getPersonAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertCommandFailure(new AddPersonCommand(personInList), model, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 9,
      "ameliatjy": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddPersonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.PersonAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.ReadOnlyJobAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyPersonAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class AddPersonCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddPersonCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        CommandResult commandResult \u003d new AddPersonCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        AddPersonCommand addPersonCommand \u003d new AddPersonCommand(validPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertThrows(CommandException.class, AddPersonCommand.MESSAGE_DUPLICATE_PERSON, ()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            -\u003e addPersonCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        AddPersonCommand addAliceCommand \u003d new AddPersonCommand(alice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        AddPersonCommand addBobCommand \u003d new AddPersonCommand(bob);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        AddPersonCommand addAliceCommandCopy \u003d new AddPersonCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        public Path getPersonAddressBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        public void setPersonAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        public void setPersonAddressBook(ReadOnlyPersonAddressBook newData) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        public ReadOnlyPersonAddressBook getPersonAddressBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public Path getJobAddressBookFilePath() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void setJobAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void setJobAddressBook(ReadOnlyJobAddressBook addressBook) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public ReadOnlyJobAddressBook getJobAddressBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public boolean hasJob(Job job) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public void deleteJob(Job target) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void addJob(Job job) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        public void setJob(Job target, Job editedJob) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public ObservableList\u003cJob\u003e getFilteredJobList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        public ObservableList\u003cJob\u003e getSortedJobList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        public ObservableList\u003cPerson\u003e getSortedPersonList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        public void updateSortedJobList(Comparator\u003cJob\u003e comparator) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        public void updateSortedPersonList(Comparator\u003cPerson\u003e comparator) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        public ReadOnlyPersonAddressBook getPersonAddressBook() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            return new PersonAddressBook();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 11,
      "BreadPeanutButter": 10,
      "raythx98": 51,
      "g-erm": 10,
      "ameliatjy": 10,
      "-": 176
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearJobCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.JobAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class ClearJobCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void execute_emptyJobAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(new ClearJobCommand(), model, ClearJobCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void execute_nonEmptyJobAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPersonAddressBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedModel.setJobAddressBook(new JobAddressBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(new ClearJobCommand(), model, ClearJobCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearPersonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.PersonAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class ClearPersonCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(new ClearPersonCommand(), model, ClearPersonCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPersonAddressBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        expectedModel.setPersonAddressBook(new PersonAddressBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(new ClearPersonCommand(), model, ClearPersonCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 3,
      "raythx98": 5,
      "ameliatjy": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLACKLIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_APPLICATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPERIENCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOB_TITLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_ORDER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_TYPE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL_LINK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VACANCY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.PersonAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.JobNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.PersonNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.testutil.EditJobDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    // Valid Person information"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String VALID_EXPERIENCE_AMY \u003d \"2.5\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String VALID_EXPERIENCE_BOB \u003d \"0.5\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String VALID_DATE_AMY \u003d \"29-05-18\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String VALID_DATE_BOB \u003d \"18-12-21\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String VALID_BLACKLIST_STATUS_AMY \u003d \"false\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String VALID_BLACKLIST_STATUS_BOB \u003d \"true\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String VALID_URL_LINK_AMY \u003d \"linkedin.com\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String VALID_URL_LINK_BOB \u003d \"facebok.com\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String VALID_SALARY_AMY \u003d \"16000\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String VALID_SALARY_BOB \u003d \"1800\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String EXPERIENCE_DESC_AMY \u003d \" \" + PREFIX_EXPERIENCE + VALID_EXPERIENCE_AMY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String EXPERIENCE_DESC_BOB \u003d \" \" + PREFIX_EXPERIENCE + VALID_EXPERIENCE_BOB;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String DATE_DESC_AMY \u003d \" \" + PREFIX_DATE_OF_APPLICATION + VALID_DATE_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String DATE_DESC_BOB \u003d \" \" + PREFIX_DATE_OF_APPLICATION + VALID_DATE_BOB;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String BLACKLIST_STATUS_DESC_AMY \u003d \" \" + PREFIX_BLACKLIST + VALID_BLACKLIST_STATUS_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String BLACKLIST_STATUS_DESC_BOB \u003d \" \" + PREFIX_BLACKLIST + VALID_BLACKLIST_STATUS_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String URL_LINK_DESC_AMY \u003d \" \" + PREFIX_URL_LINK + VALID_URL_LINK_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String URL_LINK_DESC_BOB \u003d \" \" + PREFIX_URL_LINK + VALID_URL_LINK_BOB;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String SALARY_DESC_AMY \u003d \" \" + PREFIX_SALARY + VALID_SALARY_AMY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String SALARY_DESC_BOB \u003d \" \" + PREFIX_SALARY + VALID_SALARY_BOB;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String EMPTY_COMPANY_NAME_DESC \u003d \" \" + PREFIX_COMPANY_NAME + \"\"; // Field cannot be empty"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    // Invalid information inputs"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String INVALID_JOB_TITLE_DESC \u003d \" \" + PREFIX_JOB_TITLE + \"James\u0026\"; // \u0027\u0026\u0027 not allowed"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS + \"12\"; // too short"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String INVALID_EXPERIENCE_DESC \u003d \" \" + PREFIX_EXPERIENCE + \"-8.0\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    // negative numbers not allowed"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE_OF_APPLICATION + \"11 Jun 2020\"; // wrong format"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String INVALID_BLACKLIST_STATUS_DESC \u003d \" \" + PREFIX_BLACKLIST + \"yes\"; // not true or false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String INVALID_URL_LINK_DESC \u003d \" \" + PREFIX_URL_LINK + \"rubbish\"; // not a url link"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String INVALID_SALARY_DESC \u003d \" \" + PREFIX_SALARY + \"-8000\"; // negative numbers not allowed"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String INVALID_JOB_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"nonsense\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    //only \u0027low\u0027, \u0027moderate\u0027, \u0027high\u0027 allowed for priority"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String INVALID_VACANCY_DESC \u003d \" \" + PREFIX_VACANCY + \"two\"; // characters not allowed"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    // Valid Job information"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String VALID_JOB_TITLE_IRAS \u003d \"Tax Officer\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String VALID_JOB_TITLE_MAYBANK \u003d \"Bank Teller\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String VALID_COMPANY_NAME_IRAS \u003d \"IRAS\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String VALID_COMPANY_NAME_MAYBANK \u003d \"Maybank\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String VALID_PHONE_IRAS \u003d \"63568300\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String VALID_PHONE_MAYBANK \u003d \"66292265\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String VALID_EMAIL_IRAS \u003d \"taxenquiry@iras.gov.sg\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String VALID_EMAIL_MAYBANK \u003d \"enquiries@maybank.com.sg\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String VALID_ADDRESS_IRAS \u003d \"55 Newton Rd, Revenue House, Singapore 307987\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String VALID_ADDRESS_MAYBANK \u003d \"23 Serangoon Central, # B2 - 27, Singapore 556083\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String VALID_PRIORITY_IRAS \u003d \"high\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String VALID_PRIORITY_MAYBANK \u003d \"low\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String VALID_VACANCY_IRAS \u003d \"1\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String VALID_VACANCY_MAYBANK \u003d \"2\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String VALID_TAG_IRAS \u003d \"Tax\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String VALID_TAG_MAYBANK \u003d \"Banking\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String JOB_TITLE_DESC_IRAS \u003d \" \" + PREFIX_JOB_TITLE + VALID_JOB_TITLE_IRAS;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String JOB_TITLE_DESC_MAYBANK \u003d \" \" + PREFIX_JOB_TITLE + VALID_JOB_TITLE_MAYBANK;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String COMPANY_NAME_DESC_IRAS \u003d \" \" + PREFIX_COMPANY_NAME + VALID_COMPANY_NAME_IRAS;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String COMPANY_NAME_DESC_MAYBANK \u003d \" \" + PREFIX_COMPANY_NAME + VALID_COMPANY_NAME_MAYBANK;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String PHONE_DESC_IRAS \u003d \" \" + PREFIX_PHONE + VALID_PHONE_IRAS;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String PHONE_DESC_MAYBANK \u003d \" \" + PREFIX_PHONE + VALID_PHONE_MAYBANK;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String EMAIL_DESC_IRAS \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_IRAS;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String EMAIL_DESC_MAYBANK \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_MAYBANK;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String ADDRESS_DESC_IRAS \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_IRAS;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String ADDRESS_DESC_MAYBANK \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_MAYBANK;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String PRIORITY_DESC_IRAS \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_IRAS;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String PRIORITY_DESC_MAYBANK \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_MAYBANK;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String VACANCY_DESC_IRAS \u003d \" \" + PREFIX_VACANCY + VALID_VACANCY_IRAS;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String VACANCY_DESC_MAYBANK \u003d \" \" + PREFIX_VACANCY + VALID_VACANCY_MAYBANK;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String TAG_DESC_IRAS \u003d \" \" + PREFIX_TAG + VALID_TAG_IRAS;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String TAG_DESC_MAYBANK \u003d \" \" + PREFIX_TAG + VALID_TAG_MAYBANK;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    // Valid sorting values"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String VALID_TYPE_PERSON_EXP \u003d \"exp\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String VALID_TYPE_PERSON_BLACKLIST \u003d \"bl\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static final String VALID_TYPE_PERSON_SAL \u003d \"sal\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static final String VALID_TYPE_PERSON_DOA \u003d \"doa\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String VALID_TYPE_JOB_VACANCY \u003d \"v\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String VALID_TYPE_JOB_PRIORITY \u003d \"pr\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String VALID_SORT_ORDER_ASCENDING \u003d \"asc\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String VALID_SORT_ORDER_DESCENDING \u003d \"desc\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String SORT_TYPE_PERSON_EXP \u003d \" \" + PREFIX_SORT_TYPE + VALID_TYPE_PERSON_EXP;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String SORT_TYPE_PERSON_BLACKLIST \u003d \" \" + PREFIX_SORT_TYPE + VALID_TYPE_PERSON_BLACKLIST;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static final String SORT_TYPE_PERSON_SAL \u003d \" \" + PREFIX_SORT_TYPE + VALID_TYPE_PERSON_SAL;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static final String SORT_TYPE_PERSON_DOA \u003d \" \" + PREFIX_SORT_TYPE + VALID_TYPE_PERSON_DOA;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String SORT_TYPE_JOB_VACANCY \u003d \" \" + PREFIX_SORT_TYPE + VALID_TYPE_JOB_VACANCY;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String SORT_TYPE_JOB_PRIORITY \u003d \" \" + PREFIX_SORT_TYPE + VALID_TYPE_JOB_PRIORITY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String SORT_ORDER_ASCENDING \u003d \" \" + PREFIX_SORT_ORDER + VALID_SORT_ORDER_ASCENDING;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String SORT_ORDER_DESCENDING \u003d \" \" + PREFIX_SORT_ORDER + VALID_SORT_ORDER_DESCENDING;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    // Invalid sorting inputs"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String INVALID_SORT_ORDER_DESC \u003d \" \" + PREFIX_SORT_ORDER + \"high to low\"; // only asc or desc"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final EditJobCommand.EditJobDescriptor DESC_IRAS;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final EditJobCommand.EditJobDescriptor DESC_MAYBANK;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final EditPersonCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final EditPersonCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withDateOfApplication(VALID_DATE_AMY)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withExperience(VALID_EXPERIENCE_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withBlacklistStatus(VALID_BLACKLIST_STATUS_AMY).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withDateOfApplication(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withExperience(VALID_EXPERIENCE_BOB).withUrlLink(VALID_URL_LINK_BOB).withSalary(VALID_SALARY_BOB)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withBlacklistStatus(VALID_BLACKLIST_STATUS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DESC_IRAS \u003d new EditJobDescriptorBuilder().withJobTitle(VALID_JOB_TITLE_IRAS)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withPhone(VALID_PHONE_IRAS).withEmail(VALID_EMAIL_IRAS).withAddress(VALID_ADDRESS_IRAS)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                .withPriority(VALID_PRIORITY_IRAS).withTags(VALID_TAG_IRAS).withVacancy(VALID_VACANCY_IRAS).build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DESC_MAYBANK \u003d new EditJobDescriptorBuilder().withJobTitle(VALID_JOB_TITLE_MAYBANK)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withPhone(VALID_PHONE_MAYBANK).withEmail(VALID_EMAIL_MAYBANK).withAddress(VALID_ADDRESS_MAYBANK)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                .withPriority(VALID_PRIORITY_MAYBANK).withTags(VALID_TAG_MAYBANK)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                .withVacancy(VALID_VACANCY_MAYBANK).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonAddressBook expectedAddressBook \u003d new PersonAddressBook(actualModel.getPersonAddressBook());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getPersonAddressBook());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * {@code model}\u0027s person address book."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        model.updateFilteredPersonList(new PersonNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the job at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * {@code model}\u0027s job address book."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static void showJobAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredJobList().size());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Job job \u003d model.getFilteredJobList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        final String[] splitName \u003d job.getJobTitle().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        model.updateFilteredJobList(new JobNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertEquals(1, model.getFilteredJobList().size());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 4,
      "BreadPeanutButter": 56,
      "raythx98": 47,
      "g-erm": 31,
      "ameliatjy": 7,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteJobCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showJobAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_JOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_JOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * {@code DeleteJobCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class DeleteJobCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Job jobToDelete \u003d model.getFilteredJobList().get(INDEX_FIRST_JOB.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DeleteJobCommand deleteJobCommand \u003d new DeleteJobCommand(INDEX_FIRST_JOB);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteJobCommand.MESSAGE_DELETE_JOB_SUCCESS, jobToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalPersonAddressBook(), model.getJobAddressBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedModel.deleteJob(jobToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(deleteJobCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredJobList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DeleteJobCommand deleteJobCommand \u003d new DeleteJobCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandFailure(deleteJobCommand, model, Messages.MESSAGE_INVALID_JOB_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        showJobAtIndex(model, INDEX_FIRST_JOB);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Job jobToDelete \u003d model.getFilteredJobList().get(INDEX_FIRST_JOB.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DeleteJobCommand deleteJobCommand \u003d new DeleteJobCommand(INDEX_FIRST_JOB);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteJobCommand.MESSAGE_DELETE_JOB_SUCCESS, jobToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonAddressBook(), model.getJobAddressBook(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedModel.deleteJob(jobToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        showNoJob(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(deleteJobCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        showJobAtIndex(model, INDEX_FIRST_JOB);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_JOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getJobAddressBook().getJobList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DeleteJobCommand deleteJobCommand \u003d new DeleteJobCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandFailure(deleteJobCommand, model, Messages.MESSAGE_INVALID_JOB_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DeleteJobCommand deleteFirstCommand \u003d new DeleteJobCommand(INDEX_FIRST_JOB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DeleteJobCommand deleteSecondCommand \u003d new DeleteJobCommand(INDEX_SECOND_JOB);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DeleteJobCommand deleteFirstCommandCopy \u003d new DeleteJobCommand(INDEX_FIRST_JOB);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no job."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private void showNoJob(Model model) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        model.updateFilteredJobList(p -\u003e false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(model.getFilteredJobList().isEmpty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeletePersonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * {@code DeletePersonCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class DeletePersonCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPersonAddressBook(), getTypicalJobAddressBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonAddressBook(), model.getJobAddressBook(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPersonAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DeletePersonCommand deleteFirstCommand \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DeletePersonCommand deleteSecondCommand \u003d new DeletePersonCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DeletePersonCommand deleteFirstCommandCopy \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 15,
      "raythx98": 7,
      "ameliatjy": 2,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditJobCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_IRAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_MAYBANK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAYBANK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOB_TITLE_IRAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOB_TITLE_MAYBANK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MAYBANK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_MAYBANK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MAYBANK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showJobAtIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_JOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_JOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditJobCommand.EditJobDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.JobAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.PersonAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.testutil.EditJobDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * and unit tests for EditJobCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class EditJobCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Job editedJob \u003d new JobBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder(editedJob).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand editJobCommand \u003d new EditJobCommand(INDEX_FIRST_JOB, descriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d String.format(EditJobCommand.MESSAGE_EDIT_JOB_SUCCESS, editedJob);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonAddressBook(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JobAddressBook(model.getJobAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedModel.setJob(model.getFilteredJobList().get(0), editedJob);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(editJobCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Index indexLastJob \u003d Index.fromOneBased(model.getFilteredJobList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Job lastJob \u003d model.getFilteredJobList().get(indexLastJob.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        JobBuilder jobInList \u003d new JobBuilder(lastJob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Job editedJob \u003d jobInList.withJobTitle(VALID_JOB_TITLE_MAYBANK).withPhone(VALID_PHONE_MAYBANK)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withAddress(VALID_ADDRESS_MAYBANK).withPriority(VALID_PRIORITY_MAYBANK)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withTags(VALID_TAG_MAYBANK).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder().withJobTitle(VALID_JOB_TITLE_MAYBANK)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withPhone(VALID_PHONE_MAYBANK).withAddress(VALID_ADDRESS_MAYBANK)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withPriority(VALID_PRIORITY_MAYBANK).withTags(VALID_TAG_MAYBANK).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand editJobCommand \u003d new EditJobCommand(indexLastJob, descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d String.format(EditJobCommand.MESSAGE_EDIT_JOB_SUCCESS, editedJob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonAddressBook(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JobAddressBook(model.getJobAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedModel.setJob(lastJob, editedJob);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(editJobCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand editJobCommand \u003d new EditJobCommand(INDEX_FIRST_JOB, new EditJobDescriptor());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Job editedJob \u003d model.getFilteredJobList().get(INDEX_FIRST_JOB.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d String.format(EditJobCommand.MESSAGE_EDIT_JOB_SUCCESS, editedJob);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonAddressBook(model.getPersonAddressBook()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JobAddressBook(model.getJobAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(editJobCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        showJobAtIndex(model, INDEX_FIRST_JOB);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Job jobInFilteredList \u003d model.getFilteredJobList().get(INDEX_FIRST_JOB.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Job editedJob \u003d new JobBuilder(jobInFilteredList).withJobTitle(VALID_JOB_TITLE_IRAS).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand editJobCommand \u003d new EditJobCommand(INDEX_FIRST_JOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new EditJobDescriptorBuilder().withJobTitle(VALID_JOB_TITLE_IRAS).build());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d String.format(EditJobCommand.MESSAGE_EDIT_JOB_SUCCESS, editedJob);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonAddressBook(model.getPersonAddressBook()),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JobAddressBook(model.getJobAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedModel.setJob(model.getFilteredJobList().get(0), editedJob);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(editJobCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void execute_duplicateJobUnfilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Job firstJob \u003d model.getFilteredJobList().get(INDEX_FIRST_JOB.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder(firstJob).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand editJobCommand \u003d new EditJobCommand(INDEX_SECOND_JOB, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandFailure(editJobCommand, model, EditJobCommand.MESSAGE_DUPLICATE_JOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void execute_duplicateJobFilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        showJobAtIndex(model, INDEX_FIRST_JOB);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // edit job in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Job jobInList \u003d model.getJobAddressBook().getJobList().get(INDEX_SECOND_JOB.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand editJobCommand \u003d new EditJobCommand(INDEX_FIRST_JOB,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new EditJobDescriptorBuilder(jobInList).build());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandFailure(editJobCommand, model, EditJobCommand.MESSAGE_DUPLICATE_JOB);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void execute_invalidJobIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredJobList().size() + 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder().withJobTitle(VALID_JOB_TITLE_MAYBANK).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand editJobCommand \u003d new EditJobCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandFailure(editJobCommand, model, Messages.MESSAGE_INVALID_JOB_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void execute_invalidJobIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        showJobAtIndex(model, INDEX_FIRST_JOB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_JOB;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getJobAddressBook().getJobList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand editJobCommand \u003d new EditJobCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new EditJobDescriptorBuilder().withJobTitle(VALID_JOB_TITLE_MAYBANK).build());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandFailure(editJobCommand, model, Messages.MESSAGE_INVALID_JOB_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final EditJobCommand standardCommand \u003d new EditJobCommand(INDEX_FIRST_JOB, DESC_IRAS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobDescriptor copyDescriptor \u003d new EditJobDescriptor(DESC_IRAS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand commandWithSameValues \u003d new EditJobCommand(INDEX_FIRST_JOB, copyDescriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearJobCommand()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(standardCommand.equals(new EditJobCommand(INDEX_SECOND_JOB, DESC_IRAS)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(standardCommand.equals(new EditJobCommand(INDEX_FIRST_JOB, DESC_MAYBANK)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditJobDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_IRAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_MAYBANK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAYBANK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MAYBANK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOB_TITLE_MAYBANK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MAYBANK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_MAYBANK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MAYBANK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VACANCY_MAYBANK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditJobCommand.EditJobDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.testutil.EditJobDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class EditJobDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobDescriptor descriptorWithSameValues \u003d new EditJobDescriptor(DESC_IRAS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(DESC_IRAS.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(DESC_IRAS.equals(DESC_IRAS));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(DESC_IRAS.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(DESC_IRAS.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(DESC_IRAS.equals(DESC_MAYBANK));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobDescriptor editedIras \u003d new EditJobDescriptorBuilder(DESC_IRAS)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withJobTitle(VALID_JOB_TITLE_MAYBANK).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(DESC_IRAS.equals(editedIras));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        editedIras \u003d new EditJobDescriptorBuilder(DESC_IRAS).withPhone(VALID_PHONE_MAYBANK).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(DESC_IRAS.equals(editedIras));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        editedIras \u003d new EditJobDescriptorBuilder(DESC_IRAS).withEmail(VALID_EMAIL_MAYBANK).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(DESC_IRAS.equals(editedIras));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        editedIras \u003d new EditJobDescriptorBuilder(DESC_IRAS).withAddress(VALID_ADDRESS_MAYBANK).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(DESC_IRAS.equals(editedIras));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        editedIras \u003d new EditJobDescriptorBuilder(DESC_IRAS).withPriority(VALID_PRIORITY_MAYBANK).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(DESC_IRAS.equals(editedIras));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // different vacancy -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        editedIras \u003d new EditJobDescriptorBuilder(DESC_IRAS).withVacancy(VALID_VACANCY_MAYBANK).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(DESC_IRAS.equals(editedIras));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        editedIras \u003d new EditJobDescriptorBuilder(DESC_IRAS).withTags(VALID_TAG_MAYBANK).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(DESC_IRAS.equals(editedIras));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 64,
      "g-erm": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPERIENCE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALARY_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_URL_LINK_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.JobAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.PersonAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * and unit tests for EditPersonCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class EditPersonCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonAddressBook(model.getPersonAddressBook()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                model.getJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withExperience(VALID_EXPERIENCE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withSalary(VALID_SALARY_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withExperience(VALID_EXPERIENCE_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withSalary(VALID_SALARY_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonAddressBook(model.getPersonAddressBook()),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                model.getJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonAddressBook(model.getPersonAddressBook()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new JobAddressBook(model.getJobAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withUrlLink(VALID_URL_LINK_BOB).withSalary(VALID_SALARY_BOB).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withUrlLink(VALID_URL_LINK_BOB)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        .withSalary(VALID_SALARY_BOB).build());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonAddressBook(model.getPersonAddressBook()),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new JobAddressBook(model.getJobAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Person personInList \u003d model.getPersonAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPersonAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        final EditPersonCommand standardCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand commandWithSameValues \u003d new EditPersonCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearPersonCommand()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 40,
      "raythx98": 12,
      "ameliatjy": 4,
      "-": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BLACKLIST_STATUS_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPERIENCE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALARY_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_URL_LINK_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different experience -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_EXPERIENCE_BOB).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withDateOfApplication(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withBlacklistStatus(VALID_BLACKLIST_STATUS_BOB).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different url link -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_URL_LINK_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // different salary -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withSalary(VALID_SALARY_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 27,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindJobCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_JOBS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.JobEmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.JobNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.JobPhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindJobCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class FindJobCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Predicate\u003cJob\u003e firstPredicate \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        firstPredicate.and(new JobNameContainsKeywordsPredicate(Collections.singletonList(\"Samsung\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Predicate\u003cJob\u003e secondPredicate \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        secondPredicate.and(new JobNameContainsKeywordsPredicate(Collections.singletonList(\"Apple\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        FindJobCommand findFirstCommand \u003d new FindJobCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        FindJobCommand findSecondCommand \u003d new FindJobCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        FindJobCommand findFirstCommandCopy \u003d new FindJobCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Predicate\u003cJob\u003e predicate \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate.and(new JobNameContainsKeywordsPredicate(Collections.singletonList(\"Samsung\")));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        FindJobCommand command \u003d new FindJobCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e command.execute(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void execute_predicateAcceptedByModel_findSuccessful() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // matching keyword found"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_JOBS_LISTED_OVERVIEW, 6);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Predicate\u003cJob\u003e firstPredicate \u003d new JobEmailContainsKeywordsPredicate(Collections.singletonList(\"@\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        FindJobCommand command \u003d new FindJobCommand(firstPredicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        expectedModel.updateFilteredJobList(firstPredicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(expectedModel.getFilteredJobList(), model.getFilteredJobList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // no matching keyword found"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_JOBS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Predicate\u003cJob\u003e secondPredicate \u003d new JobPhoneContainsKeywordsPredicate(Collections.singletonList(\"00000000\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        command \u003d new FindJobCommand(secondPredicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        expectedModel.updateFilteredJobList(secondPredicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(expectedModel.getFilteredPersonList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindPersonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.PersonEmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.PersonNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.PersonPhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindPersonCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class FindPersonCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e firstPredicate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        firstPredicate.add(new PersonNameContainsKeywordsPredicate(Collections.singletonList(\"Alice\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e secondPredicate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        secondPredicate.add(new PersonNameContainsKeywordsPredicate(Collections.singletonList(\"Bob\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        FindPersonCommand findFirstCommand \u003d new FindPersonCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        FindPersonCommand findSecondCommand \u003d new FindPersonCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        FindPersonCommand findFirstCommandCopy \u003d new FindPersonCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate.add(new PersonNameContainsKeywordsPredicate(Collections.singletonList(\"Alice\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        FindPersonCommand command \u003d new FindPersonCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e command.execute(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void execute_predicateAcceptedByModel_findSuccessful() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // matching keyword found"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e firstPredicate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        firstPredicate.add(new PersonEmailContainsKeywordsPredicate(Collections.singletonList(\"@\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        FindPersonCommand command \u003d new FindPersonCommand(firstPredicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        expectedModel.updateFilteredPersonList(FindPersonCommand.composePredicatesList(firstPredicate));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(expectedModel.getFilteredPersonList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // no matching keyword found"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e secondPredicate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        secondPredicate.add(new PersonPhoneContainsKeywordsPredicate(Collections.singletonList(\"00000000\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        command \u003d new FindPersonCommand(secondPredicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        expectedModel.updateFilteredPersonList(FindPersonCommand.composePredicatesList(secondPredicate));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(expectedModel.getFilteredPersonList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 13,
      "ameliatjy": 35,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListJobCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showJobAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_JOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListJobCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class ListJobCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        model \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPersonAddressBook(), model.getJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertCommandSuccess(new ListJobCommand(), model, ListJobCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        showJobAtIndex(model, INDEX_FIRST_JOB);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertCommandSuccess(new ListJobCommand(), model, ListJobCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListPersonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class ListPersonCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        model \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPersonAddressBook(), model.getJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertCommandSuccess(new ListPersonCommand(), model, ListPersonCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertCommandSuccess(new ListPersonCommand(), model, ListPersonCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 7,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortJobCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.SortJobCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.comparator.JobPriorityComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.comparator.JobVacancyComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for SortJobCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "public class SortJobCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void execute_ascendingVacancy_jobsSorted() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        JobVacancyComparator comparator \u003d new JobVacancyComparator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SUCCESS + comparator.toString() + \"in ascending order.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        SortJobCommand command \u003d new SortJobCommand(comparator, true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        expectedModel.updateSortedJobList(comparator);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(expectedModel.getSortedJobList(), model.getSortedJobList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void execute_descendingPriority_jobsSorted() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        JobPriorityComparator comparator \u003d new JobPriorityComparator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SUCCESS + comparator.toString() + \"in descending order.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        SortJobCommand command \u003d new SortJobCommand(comparator, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        expectedModel.updateSortedJobList(comparator.reversed());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(expectedModel.getSortedJobList(), model.getSortedJobList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        JobVacancyComparator vacancyComparator \u003d new JobVacancyComparator();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        JobPriorityComparator priorityComparator \u003d new JobPriorityComparator();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        SortJobCommand sortFirstCommand \u003d new SortJobCommand(vacancyComparator, true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        SortJobCommand sortSecondCommand \u003d new SortJobCommand(priorityComparator, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertTrue(sortFirstCommand.equals(sortFirstCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        SortJobCommand sortFirstCommandCopy \u003d new SortJobCommand(vacancyComparator, true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertTrue(sortFirstCommand.equals(sortFirstCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(sortFirstCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(sortFirstCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(sortFirstCommand.equals(sortSecondCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-erm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-erm": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortPersonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.commands.SortPersonCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.comparator.PersonBlackListComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.comparator.PersonDateOfApplicationComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.comparator.PersonExpectedSalaryComparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.comparator.PersonExperienceComparator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for SortJobCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class SortPersonCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPersonAddressBook(), getTypicalJobAddressBook(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void execute_ascendingExpectedSalary_sortedSuccess() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonExpectedSalaryComparator comparator \u003d new PersonExpectedSalaryComparator();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SUCCESS + comparator.toString() + \"in ascending order.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        SortPersonCommand command \u003d new SortPersonCommand(comparator, true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        expectedModel.updateSortedPersonList(comparator);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(expectedModel.getSortedPersonList(), model.getSortedPersonList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void execute_ascendingExperience_sortedSuccess() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonExperienceComparator comparator \u003d new PersonExperienceComparator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SUCCESS + comparator.toString() + \"in ascending order.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        SortPersonCommand command \u003d new SortPersonCommand(comparator, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        expectedModel.updateSortedPersonList(comparator);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(expectedModel.getSortedPersonList(), model.getSortedPersonList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void execute_descendingDateOfApplication_sortedSuccess() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonDateOfApplicationComparator comparator \u003d new PersonDateOfApplicationComparator();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SUCCESS + comparator.toString() + \"in descending order.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        SortPersonCommand command \u003d new SortPersonCommand(comparator, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        expectedModel.updateSortedPersonList(comparator.reversed());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(expectedModel.getSortedPersonList(), model.getSortedPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void execute_descendingBlacklist_sortedSuccess() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonBlackListComparator comparator \u003d new PersonBlackListComparator();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SUCCESS + comparator.toString() + \"in descending order.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        SortPersonCommand command \u003d new SortPersonCommand(comparator, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        expectedModel.updateSortedPersonList(comparator.reversed());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(expectedModel.getSortedPersonList(), model.getSortedPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonBlackListComparator blackListComparator \u003d new PersonBlackListComparator();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonDateOfApplicationComparator dateOfApplicationComparatorer \u003d new PersonDateOfApplicationComparator();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonExperienceComparator experienceComparator \u003d new PersonExperienceComparator();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonExpectedSalaryComparator expectedSalaryComparator \u003d new PersonExpectedSalaryComparator();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        SortPersonCommand sortFirstCommand \u003d new SortPersonCommand(blackListComparator, true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        SortPersonCommand sortSecondCommand \u003d new SortPersonCommand(dateOfApplicationComparatorer, false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        SortPersonCommand sortThirdCommand \u003d new SortPersonCommand(experienceComparator, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        SortPersonCommand sortFourthCommand \u003d new SortPersonCommand(expectedSalaryComparator, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertTrue(sortFirstCommand.equals(sortFirstCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        SortPersonCommand sortFirstCommandCopy \u003d new SortPersonCommand(blackListComparator, true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertTrue(sortFirstCommand.equals(sortFirstCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertFalse(sortFirstCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertFalse(sortFirstCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertFalse(sortFirstCommand.equals(sortSecondCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertFalse(sortFirstCommand.equals(sortThirdCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertFalse(sortFirstCommand.equals(sortFourthCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddJobCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_IRAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_MAYBANK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_NAME_DESC_IRAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_NAME_DESC_MAYBANK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_IRAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_MAYBANK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMPTY_COMPANY_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_JOB_PRIORITY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_JOB_TITLE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VACANCY_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.JOB_TITLE_DESC_IRAS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.JOB_TITLE_DESC_MAYBANK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_IRAS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_MAYBANK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_IRAS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_MAYBANK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_IRAS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MAYBANK;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VACANCY_DESC_IRAS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VACANCY_DESC_MAYBANK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAYBANK;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_NAME_MAYBANK;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MAYBANK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOB_TITLE_MAYBANK;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MAYBANK;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_IRAS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MAYBANK;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VACANCY_MAYBANK;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.IRAS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.MAYBANK;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.AddJobCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.CompanyName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Priority;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Vacancy;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class AddJobCommandParserTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private AddJobCommandParser parser \u003d new AddJobCommandParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Job expectedJob \u003d new JobBuilder(MAYBANK).withTags(VALID_TAG_MAYBANK).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PHONE_DESC_MAYBANK + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PRIORITY_DESC_MAYBANK + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new AddJobCommand(expectedJob));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // multiple job titles - last job title accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseSuccess(parser, JOB_TITLE_DESC_IRAS + JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PHONE_DESC_MAYBANK + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PRIORITY_DESC_MAYBANK + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new AddJobCommand(expectedJob));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // multiple company names - last company name accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseSuccess(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_IRAS + COMPANY_NAME_DESC_MAYBANK"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PHONE_DESC_MAYBANK + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PRIORITY_DESC_MAYBANK + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new AddJobCommand(expectedJob));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseSuccess(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_IRAS"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PHONE_DESC_MAYBANK + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PRIORITY_DESC_MAYBANK + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new AddJobCommand(expectedJob));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseSuccess(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_IRAS + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PRIORITY_DESC_MAYBANK + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new AddJobCommand(expectedJob));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseSuccess(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + ADDRESS_DESC_IRAS + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PRIORITY_DESC_MAYBANK + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new AddJobCommand(expectedJob));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        Job expectedJobMultipleTags \u003d new JobBuilder(MAYBANK).withTags(VALID_TAG_MAYBANK, VALID_TAG_IRAS).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseSuccess(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK + TAG_DESC_IRAS"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PRIORITY_DESC_MAYBANK + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new AddJobCommand(expectedJobMultipleTags));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // multiple priorities - last priority accepted"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseSuccess(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK + PRIORITY_DESC_IRAS"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PRIORITY_DESC_MAYBANK + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                new AddJobCommand(expectedJob));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // multiple vacancies - last vacancy accepted"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseSuccess(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK + PRIORITY_DESC_MAYBANK"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + VACANCY_DESC_IRAS + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                new AddJobCommand(expectedJob));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // zero tags, default moderate priority"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Job expectedJob \u003d new JobBuilder(IRAS).withTags().withPriority(\"moderate\").build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseSuccess(parser, JOB_TITLE_DESC_IRAS + COMPANY_NAME_DESC_IRAS + PHONE_DESC_IRAS"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_IRAS + ADDRESS_DESC_IRAS + VACANCY_DESC_IRAS, new AddJobCommand(expectedJob));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddJobCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // missing job title prefix"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, VALID_JOB_TITLE_MAYBANK + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + VACANCY_DESC_MAYBANK, expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // missing company name prefix"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, JOB_TITLE_DESC_MAYBANK + VALID_COMPANY_NAME_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + VACANCY_DESC_MAYBANK, expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + VALID_PHONE_MAYBANK"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + VACANCY_DESC_MAYBANK, expectedMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + VALID_EMAIL_MAYBANK + ADDRESS_DESC_MAYBANK + VACANCY_DESC_MAYBANK, expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + VALID_ADDRESS_MAYBANK + VACANCY_DESC_MAYBANK, expectedMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // missing vacancy prefix"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseFailure(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + VALID_VACANCY_MAYBANK, expectedMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, VALID_JOB_TITLE_MAYBANK + VALID_COMPANY_NAME_MAYBANK + VALID_PHONE_MAYBANK"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + VALID_EMAIL_MAYBANK + VALID_ADDRESS_MAYBANK + VALID_VACANCY_MAYBANK, expectedMessage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // invalid job title"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, INVALID_JOB_TITLE_DESC + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK + TAG_DESC_IRAS + PRIORITY_DESC_MAYBANK"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // invalid company name"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, JOB_TITLE_DESC_MAYBANK + EMPTY_COMPANY_NAME_DESC + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK + TAG_DESC_IRAS + PRIORITY_DESC_MAYBANK"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                CompanyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK + TAG_DESC_IRAS + PRIORITY_DESC_MAYBANK"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + INVALID_EMAIL_DESC + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK + TAG_DESC_IRAS + PRIORITY_DESC_MAYBANK"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + INVALID_ADDRESS_DESC + TAG_DESC_MAYBANK + TAG_DESC_IRAS + PRIORITY_DESC_MAYBANK"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + INVALID_TAG_DESC + TAG_DESC_MAYBANK"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PRIORITY_DESC_MAYBANK + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseFailure(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK + TAG_DESC_IRAS"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + INVALID_JOB_PRIORITY_DESC + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // invalid vacancy"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseFailure(parser, JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK + TAG_DESC_IRAS"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PRIORITY_DESC_MAYBANK + INVALID_VACANCY_DESC,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                Vacancy.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, INVALID_JOB_TITLE_DESC + COMPANY_NAME_DESC_MAYBANK + PHONE_DESC_MAYBANK"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + INVALID_ADDRESS_DESC + PRIORITY_DESC_MAYBANK + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + JOB_TITLE_DESC_MAYBANK + COMPANY_NAME_DESC_MAYBANK"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PHONE_DESC_MAYBANK + EMAIL_DESC_MAYBANK + ADDRESS_DESC_MAYBANK + TAG_DESC_MAYBANK + TAG_DESC_IRAS"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PRIORITY_DESC_MAYBANK + VACANCY_DESC_MAYBANK,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddJobCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 147,
      "g-erm": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddPersonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLACKLIST_STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLACKLIST_STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPERIENCE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPERIENCE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BLACKLIST_STATUS_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPERIENCE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SALARY_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_URL_LINK_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALARY_DESC_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALARY_DESC_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.URL_LINK_DESC_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.URL_LINK_DESC_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPERIENCE_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.AddPersonCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.BlacklistStatus;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Experience;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Salary;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.UrlLink;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class AddPersonCommandParserTest {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private AddPersonCommandParser parser \u003d new AddPersonCommandParser();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB + URL_LINK_DESC_BOB + SALARY_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + DATE_DESC_BOB + BLACKLIST_STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB + URL_LINK_DESC_BOB + SALARY_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + DATE_DESC_BOB + BLACKLIST_STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB + URL_LINK_DESC_BOB + SALARY_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + DATE_DESC_BOB + BLACKLIST_STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB + URL_LINK_DESC_BOB + SALARY_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + DATE_DESC_BOB + BLACKLIST_STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB + URL_LINK_DESC_BOB + SALARY_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + TAG_DESC_FRIEND + DATE_DESC_BOB + BLACKLIST_STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // multiple experiences - last experience accepted"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + EXPERIENCE_DESC_AMY + EXPERIENCE_DESC_BOB + URL_LINK_DESC_BOB + SALARY_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + DATE_DESC_BOB + BLACKLIST_STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + EXPERIENCE_DESC_AMY + DATE_DESC_AMY + DATE_DESC_BOB + URL_LINK_DESC_BOB + EXPERIENCE_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + SALARY_DESC_BOB + TAG_DESC_FRIEND + BLACKLIST_STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // multiple blacklist statuses - last blacklist status accepted"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + EXPERIENCE_DESC_AMY + DATE_DESC_BOB + URL_LINK_DESC_BOB + EXPERIENCE_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + SALARY_DESC_BOB + BLACKLIST_STATUS_DESC_AMY + BLACKLIST_STATUS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // multiple url links - last link accepted"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + EXPERIENCE_DESC_BOB + URL_LINK_DESC_AMY + URL_LINK_DESC_BOB + SALARY_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + TAG_DESC_FRIEND + DATE_DESC_BOB + BLACKLIST_STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // multiple salaries - last salary accepted"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + EXPERIENCE_DESC_BOB + URL_LINK_DESC_BOB + SALARY_DESC_AMY + SALARY_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + TAG_DESC_FRIEND + DATE_DESC_BOB + BLACKLIST_STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + EXPERIENCE_DESC_BOB + URL_LINK_DESC_BOB + SALARY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + DATE_DESC_BOB + BLACKLIST_STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new AddPersonCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // no tags, salary, urlLink, blacklistStatus"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + EMAIL_DESC_AMY + EXPERIENCE_DESC_AMY + DATE_DESC_AMY,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // missing experience prefix"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + ADDRESS_DESC_BOB + VALID_EXPERIENCE_BOB,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // missing experience prefix"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB + VALID_DATE_BOB,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + VALID_ADDRESS_BOB + VALID_EXPERIENCE_BOB + VALID_DATE_BOB,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB + URL_LINK_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB + URL_LINK_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB + URL_LINK_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + INVALID_ADDRESS_DESC + EXPERIENCE_DESC_BOB + URL_LINK_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // invalid experience"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_BOB + INVALID_EXPERIENCE_DESC + URL_LINK_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Experience.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // invalid Date"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB + INVALID_DATE_DESC + URL_LINK_DESC_BOB"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // invalid Blacklist Status"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB + DATE_DESC_BOB + INVALID_BLACKLIST_STATUS_DESC"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + URL_LINK_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, BlacklistStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // invalid url link"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB + INVALID_URL_LINK_DESC + DATE_DESC_BOB"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, UrlLink.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // invalid salary"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB + URL_LINK_DESC_BOB + INVALID_SALARY_DESC"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + DATE_DESC_BOB, Salary.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB + URL_LINK_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + INVALID_ADDRESS_DESC + EXPERIENCE_DESC_BOB + URL_LINK_DESC_BOB + DATE_DESC_BOB,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_BOB + EXPERIENCE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + URL_LINK_DESC_BOB + DATE_DESC_BOB,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 129,
      "raythx98": 6,
      "ameliatjy": 5,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_JOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.logic.commands.AddJobCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.AddPersonCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.logic.commands.ClearJobCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.ClearPersonCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.logic.commands.DeleteJobCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.DeletePersonCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.testutil.JobUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parseCommand_addPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        AddPersonCommand command \u003d (AddPersonCommand) parser.parseCommand(PersonUtil.getAddPersonCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertEquals(new AddPersonCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parseCommand_addJob() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Job job \u003d new JobBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        AddJobCommand command \u003d (AddJobCommand) parser.parseCommand(JobUtil.getAddJobCommand(job));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(new AddJobCommand(job), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parseCommand_clearPerson() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(parser.parseCommand(ClearPersonCommand.COMMAND_WORD) instanceof ClearPersonCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(parser.parseCommand(ClearPersonCommand.COMMAND_WORD + \"     \") instanceof ClearPersonCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parseCommand_clearJob() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertTrue(parser.parseCommand(ClearJobCommand.COMMAND_WORD) instanceof ClearJobCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertTrue(parser.parseCommand(ClearJobCommand.COMMAND_WORD + \"     \") instanceof ClearJobCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parseCommand_deletePerson() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DeletePersonCommand command \u003d (DeletePersonCommand) parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                DeletePersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(new DeletePersonCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parseCommand_deleteJob() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        DeleteJobCommand command \u003d (DeleteJobCommand) parser.parseCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                DeleteJobCommand.COMMAND_WORD + \" \" + INDEX_FIRST_JOB.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(new DeleteJobCommand(INDEX_FIRST_JOB), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parseCommand_editPerson() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand command \u003d (EditPersonCommand) parser.parseCommand(EditPersonCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(new EditPersonCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \"    \") instanceof ExitCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \"    \") instanceof HelpCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 13,
      "raythx98": 3,
      "g-erm": 25,
      "ameliatjy": 1,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteJobCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_JOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.DeleteJobCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * outside of the DeleteJobCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * same path through the DeleteJobCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class DeleteJobCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private DeleteJobCommandParser parser \u003d new DeleteJobCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteJobCommand(INDEX_FIRST_JOB));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, DeleteJobCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 9,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeletePersonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.DeletePersonCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * outside of the DeletePersonCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * same path through the DeletePersonCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class DeletePersonCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private DeletePersonCommandParser parser \u003d new DeletePersonCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeletePersonCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 8,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditJobCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_IRAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_MAYBANK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_NAME_DESC_IRAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_NAME_DESC_MAYBANK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_IRAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_MAYBANK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMPTY_COMPANY_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_JOB_PRIORITY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_JOB_TITLE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VACANCY_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.JOB_TITLE_DESC_MAYBANK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_IRAS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_MAYBANK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_IRAS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_MAYBANK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_IRAS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MAYBANK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VACANCY_DESC_IRAS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VACANCY_DESC_MAYBANK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_IRAS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAYBANK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_NAME_IRAS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_NAME_MAYBANK;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_IRAS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MAYBANK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOB_TITLE_IRAS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOB_TITLE_MAYBANK;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_IRAS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MAYBANK;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_IRAS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_MAYBANK;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_IRAS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MAYBANK;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VACANCY_IRAS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VACANCY_MAYBANK;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_JOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_JOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_JOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditJobCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditJobCommand.EditJobDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.CompanyName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Priority;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Vacancy;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.testutil.EditJobDescriptorBuilder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class EditJobCommandParserTest {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditJobCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private EditJobCommandParser parser \u003d new EditJobCommandParser();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, VALID_JOB_TITLE_IRAS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\", EditJobCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"-5\" + JOB_TITLE_DESC_MAYBANK, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"0\" + JOB_TITLE_DESC_MAYBANK, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_JOB_TITLE_DESC, Name.MESSAGE_CONSTRAINTS); // invalid title"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, \"1\" + EMPTY_COMPANY_NAME_DESC, CompanyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // empty company name"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_JOB_PRIORITY_DESC, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_VACANCY_DESC, Vacancy.MESSAGE_CONSTRAINTS); // invalid vacancy"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_IRAS, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_MAYBANK + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_IRAS + TAG_DESC_MAYBANK + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_IRAS + TAG_EMPTY + TAG_DESC_MAYBANK, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_IRAS + TAG_DESC_MAYBANK, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, \"1\" + EMPTY_COMPANY_NAME_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                        + VALID_ADDRESS_IRAS + VALID_PHONE_IRAS, CompanyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_JOB;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_MAYBANK + TAG_DESC_MAYBANK"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + COMPANY_NAME_DESC_MAYBANK + PRIORITY_DESC_MAYBANK + EMAIL_DESC_MAYBANK"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + ADDRESS_DESC_MAYBANK + JOB_TITLE_DESC_MAYBANK + TAG_DESC_IRAS + VACANCY_DESC_MAYBANK;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder().withJobTitle(VALID_JOB_TITLE_MAYBANK)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withCompanyName(VALID_COMPANY_NAME_MAYBANK).withPhone(VALID_PHONE_MAYBANK)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withEmail(VALID_EMAIL_MAYBANK).withAddress(VALID_ADDRESS_MAYBANK)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                .withTags(VALID_TAG_IRAS, VALID_TAG_MAYBANK).withPriority(VALID_PRIORITY_MAYBANK)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                .withVacancy(VALID_VACANCY_MAYBANK).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand expectedCommand \u003d new EditJobCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_JOB;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_IRAS + EMAIL_DESC_MAYBANK;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder().withPhone(VALID_PHONE_IRAS)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withEmail(VALID_EMAIL_MAYBANK).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand expectedCommand \u003d new EditJobCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Index targetIndex;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobDescriptor descriptor;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // job title"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        targetIndex \u003d INDEX_THIRD_JOB;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + JOB_TITLE_DESC_MAYBANK;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor \u003d new EditJobDescriptorBuilder().withJobTitle(VALID_JOB_TITLE_MAYBANK).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand expectedCommand \u003d new EditJobCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // company name"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        targetIndex \u003d INDEX_SECOND_JOB;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + COMPANY_NAME_DESC_IRAS;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor \u003d new EditJobDescriptorBuilder().withCompanyName(VALID_COMPANY_NAME_IRAS).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditJobCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        targetIndex \u003d INDEX_FIRST_JOB;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_MAYBANK;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor \u003d new EditJobDescriptorBuilder().withPhone(VALID_PHONE_MAYBANK).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditJobCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        targetIndex \u003d INDEX_SECOND_JOB;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_IRAS;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor \u003d new EditJobDescriptorBuilder().withEmail(VALID_EMAIL_IRAS).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditJobCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        targetIndex \u003d INDEX_THIRD_JOB;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_MAYBANK;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor \u003d new EditJobDescriptorBuilder().withAddress(VALID_ADDRESS_MAYBANK).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditJobCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // priority"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        targetIndex \u003d INDEX_FIRST_JOB;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_MAYBANK;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor \u003d new EditJobDescriptorBuilder().withPriority(VALID_PRIORITY_MAYBANK).build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditJobCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // vacancy"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        targetIndex \u003d INDEX_THIRD_JOB;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VACANCY_DESC_IRAS;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        descriptor \u003d new EditJobDescriptorBuilder().withVacancy(VALID_VACANCY_IRAS).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        expectedCommand \u003d new EditJobCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        targetIndex \u003d INDEX_SECOND_JOB;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_IRAS;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor \u003d new EditJobDescriptorBuilder().withTags(VALID_TAG_IRAS).build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditJobCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_JOB;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_MAYBANK + ADDRESS_DESC_MAYBANK"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + EMAIL_DESC_MAYBANK + TAG_DESC_MAYBANK + PHONE_DESC_MAYBANK + VACANCY_DESC_MAYBANK"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + ADDRESS_DESC_MAYBANK + EMAIL_DESC_MAYBANK + PRIORITY_DESC_MAYBANK"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + PHONE_DESC_IRAS + ADDRESS_DESC_IRAS + EMAIL_DESC_IRAS + PRIORITY_DESC_IRAS"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + VACANCY_DESC_IRAS + TAG_DESC_IRAS;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder().withPhone(VALID_PHONE_IRAS)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withEmail(VALID_EMAIL_IRAS).withAddress(VALID_ADDRESS_IRAS).withPriority(VALID_PRIORITY_IRAS)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                .withTags(VALID_TAG_IRAS, VALID_TAG_MAYBANK).withVacancy(VALID_VACANCY_IRAS).build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand expectedCommand \u003d new EditJobCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_JOB;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_IRAS;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder().withPhone(VALID_PHONE_IRAS).build();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand expectedCommand \u003d new EditJobCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_MAYBANK + INVALID_PHONE_DESC + ADDRESS_DESC_MAYBANK"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                + VACANCY_DESC_MAYBANK + PHONE_DESC_MAYBANK + PRIORITY_DESC_MAYBANK;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor \u003d new EditJobDescriptorBuilder().withPhone(VALID_PHONE_MAYBANK).withEmail(VALID_EMAIL_MAYBANK)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                .withAddress(VALID_ADDRESS_MAYBANK).withPriority(VALID_PRIORITY_MAYBANK)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                .withVacancy(VALID_VACANCY_MAYBANK).build();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditJobCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_JOB;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditJobCommand expectedCommand \u003d new EditJobCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 240,
      "raythx98": 6,
      "g-erm": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditPersonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLACKLIST_STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLACKLIST_STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPERIENCE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPERIENCE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BLACKLIST_STATUS_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPERIENCE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SALARY_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_URL_LINK_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALARY_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALARY_DESC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.URL_LINK_DESC_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.URL_LINK_DESC_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BLACKLIST_STATUS_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BLACKLIST_STATUS_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPERIENCE_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPERIENCE_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALARY_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALARY_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_URL_LINK_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_URL_LINK_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL_LINK;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.BlacklistStatus;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Date;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Experience;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Salary;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.UrlLink;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class EditPersonCommandParserTest {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String ADDRESS_EMPTY \u003d \" \" + PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String SALARY_EMPTY \u003d \" \" + PREFIX_SALARY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String URL_LINK_EMPTY \u003d \" \" + PREFIX_URL_LINK;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private EditPersonCommandParser parser \u003d new EditPersonCommandParser();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\", EditPersonCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EXPERIENCE_DESC, Experience.MESSAGE_CONSTRAINTS); // invalid exp"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_BLACKLIST_STATUS_DESC, BlacklistStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // invalid blacklist status"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_URL_LINK_DESC, UrlLink.MESSAGE_CONSTRAINTS); // invalid url"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SALARY_DESC, Salary.MESSAGE_CONSTRAINTS); // invalid salary"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        + VALID_PHONE_AMY + INVALID_EXPERIENCE_DESC + INVALID_URL_LINK_DESC,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + DATE_DESC_AMY"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + EXPERIENCE_DESC_AMY + URL_LINK_DESC_AMY + SALARY_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + BLACKLIST_STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withExperience(VALID_EXPERIENCE_AMY).withUrlLink(VALID_URL_LINK_AMY)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withDateOfApplication(VALID_DATE_AMY).withSalary(VALID_SALARY_AMY)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withBlacklistStatus(VALID_BLACKLIST_STATUS_AMY)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // experience"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EXPERIENCE_DESC_AMY;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withExperience(VALID_EXPERIENCE_AMY).build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_AMY;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withDateOfApplication(VALID_DATE_AMY).build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + BLACKLIST_STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withBlacklistStatus(VALID_BLACKLIST_STATUS_AMY).build();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // url link"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + URL_LINK_DESC_AMY;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withUrlLink(VALID_URL_LINK_AMY).build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // salary"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SALARY_DESC_AMY;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withSalary(VALID_SALARY_AMY).build();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + PHONE_DESC_BOB + EXPERIENCE_DESC_AMY + EXPERIENCE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + EMAIL_DESC_BOB + TAG_DESC_HUSBAND + URL_LINK_DESC_AMY + SALARY_DESC_AMY"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + SALARY_DESC_BOB + URL_LINK_DESC_BOB + DATE_DESC_AMY + DATE_DESC_BOB"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                + BLACKLIST_STATUS_DESC_AMY + BLACKLIST_STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withExperience(VALID_EXPERIENCE_BOB)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).withUrlLink(VALID_URL_LINK_BOB)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withSalary(VALID_SALARY_BOB).withDateOfApplication(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .withBlacklistStatus(VALID_BLACKLIST_STATUS_BOB).build();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parse_resetAddress_success() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ADDRESS_EMPTY;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setAddressOptional(Optional.empty());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parse_resetSalary_success() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + SALARY_EMPTY;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setSalaryOptional(Optional.empty());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parse_resetUrlLink_success() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + URL_LINK_EMPTY;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setUrlLinkOptional(Optional.empty());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 140,
      "ameliatjy": 4,
      "-": 190
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindJobCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_IRAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_NAME_DESC_IRAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.JOB_TITLE_DESC_IRAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_IRAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_IRAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_NAME_IRAS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOB_TITLE_IRAS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_IRAS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.logic.commands.FindJobCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.JobAddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.JobCompanyNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.JobJobTitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.JobPhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class FindJobCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private FindJobCommandParser parser \u003d new FindJobCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindJobCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void parse_emptyPreamble_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertParseFailure(parser, \"n/Software Engineer\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindJobCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void parse_validArgs_returnsFindPersonCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // one field"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cPredicate\u003cJob\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicates.add(new JobJobTitleContainsKeywordsPredicate(parser.splitInput(VALID_JOB_TITLE_IRAS)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Command expectedFindPersonCommand \u003d new FindJobCommand(predicates);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertParseSuccess(parser, JOB_TITLE_DESC_IRAS, expectedFindPersonCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // multiple fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicates.add(new JobJobTitleContainsKeywordsPredicate(parser.splitInput(VALID_JOB_TITLE_IRAS)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicates.add(new JobCompanyNameContainsKeywordsPredicate(parser.splitInput(VALID_COMPANY_NAME_IRAS)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicates.add(new JobPhoneContainsKeywordsPredicate(parser.splitInput(VALID_PHONE_IRAS)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicates.add(new JobAddressContainsKeywordsPredicate(parser.splitInput(VALID_ADDRESS_IRAS)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        expectedFindPersonCommand \u003d new FindJobCommand(predicates);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertParseSuccess(parser, JOB_TITLE_DESC_IRAS + COMPANY_NAME_DESC_IRAS + PHONE_DESC_IRAS + ADDRESS_DESC_IRAS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                expectedFindPersonCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindPersonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPERIENCE_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPERIENCE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.FindPersonCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.PersonEmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.PersonExperienceContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.PersonNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.PersonPhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class FindPersonCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private FindPersonCommandParser parser \u003d new FindPersonCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void parse_emptyPreamble_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertParseFailure(parser, \"n/Alice\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void parse_validArgs_returnsFindPersonCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // one field"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicates.add(new PersonNameContainsKeywordsPredicate(parser.splitInput(VALID_NAME_AMY)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Command expectedFindPersonCommand \u003d new FindPersonCommand(predicates);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY, expectedFindPersonCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // multiple fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicates.add(new PersonNameContainsKeywordsPredicate(parser.splitInput(VALID_NAME_AMY)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicates.add(new PersonPhoneContainsKeywordsPredicate(parser.splitInput(VALID_PHONE_AMY)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicates.add(new PersonEmailContainsKeywordsPredicate(parser.splitInput(VALID_EMAIL_AMY)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicates.add(new PersonExperienceContainsKeywordsPredicate(parser.splitInput(VALID_EXPERIENCE_AMY)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        expectedFindPersonCommand \u003d new FindPersonCommand(predicates);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + EXPERIENCE_DESC_AMY,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                expectedFindPersonCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 6,
      "ameliatjy": 40,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.BlacklistStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Experience;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Salary;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.UrlLink;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"urgent\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String INVALID_EXPERIENCE \u003d \"-3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String INVALID_URL \u003d \"linkedin\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String INVALID_SALARY \u003d \"-2000\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2 Dec 2121\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String INVALID_BLACKLIST_STATUS \u003d \"no\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"high\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private static final String VALID_MODERATE_PRIORITY \u003d \"moderate\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String VALID_EXPERIENCE \u003d \"3\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String VALID_URL_LINK \u003d \"linkedin.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String VALID_SALARY \u003d \"13000\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String VALID_DATE \u003d \"08-08-19\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String VALID_BLACKLIST_STATUS \u003d \"true\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parsePriorityString_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriorityString((String) null));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parsePriorityString_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriorityString(INVALID_PRIORITY));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parsePriorityString_validValueWithoutWhitespace_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriorityString(VALID_PRIORITY));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parsePriorityString_validValueWithWhitespace_returnsTrimmedPriority() throws Exception {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        String priorityWithWhitespace \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriorityString(priorityWithWhitespace));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parsePriority_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parsePriority_listWithInvalidPriority_throwsParseException() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(Arrays.asList(INVALID_PRIORITY)));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parsePriority_emptyList_returnsModeratePriority() throws Exception {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_MODERATE_PRIORITY);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(Collections.emptyList()));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parsePriority_listWithValidPriority_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Priority actualPriority \u003d ParserUtil.parsePriority(Arrays.asList(VALID_PRIORITY));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(expectedPriority, actualPriority);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseExperience_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseExperience((String) null));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseExperience_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseExperience(INVALID_EXPERIENCE));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseExperience_validValueWithoutWhitespace_returnsExperience() throws Exception {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Experience expectedExperience \u003d new Experience(VALID_EXPERIENCE);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(expectedExperience, ParserUtil.parseExperience(VALID_EXPERIENCE));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseExperience_validValueWithWhitespace_returnsTrimmedExperience() throws Exception {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String experienceWithWhitespace \u003d WHITESPACE + VALID_EXPERIENCE + WHITESPACE;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Experience expectedExperience \u003d new Experience(VALID_EXPERIENCE);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(expectedExperience, ParserUtil.parseExperience(experienceWithWhitespace));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseUrlLink_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUrlLink((String) null));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseUrlLink_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseUrlLink(INVALID_URL));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseUrlLink_validValueWithoutWhitespace_returnsExperience() throws Exception {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        UrlLink expectedUrlLink \u003d new UrlLink(VALID_URL_LINK);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(expectedUrlLink, ParserUtil.parseUrlLink(VALID_URL_LINK));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseUrlLink_validValueWithWhitespace_returnsTrimmedExperience() throws Exception {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String urlWithWhitespace \u003d WHITESPACE + VALID_URL_LINK + WHITESPACE;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        UrlLink expectedUrlLink \u003d new UrlLink(VALID_URL_LINK);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(expectedUrlLink, ParserUtil.parseUrlLink(urlWithWhitespace));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseSalary_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSalary(((String) null)));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseSalary_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSalary(INVALID_SALARY));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseSalary_validValueWithoutWhitespace_returnsExperience() throws Exception {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Salary expectedSalary \u003d new Salary(VALID_SALARY);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(expectedSalary, ParserUtil.parseSalary(VALID_SALARY));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseSalary_validValueWithWhitespace_returnsTrimmedExperience() throws Exception {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String salaryWithWhitespace \u003d WHITESPACE + VALID_SALARY + WHITESPACE;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Salary expectedSalary \u003d new Salary(VALID_SALARY);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(expectedSalary, ParserUtil.parseSalary(salaryWithWhitespace));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate(((String) null)));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsExperience() throws Exception {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedExperience() throws Exception {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseBlacklistStatus_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBlacklistStatus(((String) null)));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseBlacklistStatus_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBlacklistStatus(INVALID_BLACKLIST_STATUS));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseBlacklistStatus_validValueWithoutWhitespace_returnsExperience() throws Exception {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        BlacklistStatus expectedBlacklistStatus \u003d new BlacklistStatus(VALID_BLACKLIST_STATUS);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(expectedBlacklistStatus, ParserUtil.parseBlacklistStatus(VALID_BLACKLIST_STATUS));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void parseBlacklistStatus_validValueWithWhitespace_returnsTrimmedExperience() throws Exception {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String blacklistStatusWithWhitespace \u003d WHITESPACE + VALID_BLACKLIST_STATUS + WHITESPACE;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        BlacklistStatus expectedBlacklistStatus \u003d new BlacklistStatus(VALID_BLACKLIST_STATUS);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(expectedBlacklistStatus, ParserUtil.parseBlacklistStatus(blacklistStatusWithWhitespace));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 130,
      "g-erm": 51,
      "ameliatjy": 4,
      "-": 187
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SortJobCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SORT_ORDER_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_ORDER_ASCENDING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_ORDER_DESCENDING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_TYPE_JOB_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_TYPE_JOB_VACANCY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_TYPE_PERSON_BLACKLIST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_TYPE_PERSON_EXP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.SortJobCommand.MESSAGE_SORT_JOB_TYPE_INVALID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.logic.commands.SortJobCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.comparator.JobPriorityComparator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.comparator.JobVacancyComparator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "public class SortJobCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortJobCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private static final String MESSAGE_INVALID_ORDER \u003d \"Order can only be \u0027asc\u0027 or \u0027desc\u0027\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private SortJobCommandParser parser \u003d new SortJobCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // no sort order specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseFailure(parser, SORT_TYPE_JOB_VACANCY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // no sort type specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseFailure(parser, SORT_ORDER_ASCENDING, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // no sort type and order specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // invalid type followed by valid order"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseFailure(parser, SORT_TYPE_PERSON_BLACKLIST + SORT_ORDER_ASCENDING,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                MESSAGE_SORT_JOB_TYPE_INVALID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // valid type followed by invalid order"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseFailure(parser, SORT_TYPE_JOB_VACANCY + INVALID_SORT_ORDER_DESC, MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // valid type followed by invalid type. The test case for invalid type followed by valid type"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseFailure(parser, SORT_TYPE_JOB_VACANCY + SORT_TYPE_PERSON_BLACKLIST + SORT_ORDER_ASCENDING,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                MESSAGE_SORT_JOB_TYPE_INVALID);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // both invalid values, but only the invalid order description is captured"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseFailure(parser, SORT_TYPE_PERSON_EXP + INVALID_SORT_ORDER_DESC, MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parse_allFieldsSpecified_success() throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        String userInput \u003d SORT_TYPE_JOB_VACANCY + SORT_ORDER_ASCENDING;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        JobVacancyComparator comparator \u003d new JobVacancyComparator();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        SortJobCommand expectedCommand \u003d new SortJobCommand(comparator, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        String userInput \u003d SORT_TYPE_JOB_PRIORITY + SORT_ORDER_ASCENDING"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            + SORT_TYPE_JOB_VACANCY + SORT_ORDER_DESCENDING + SORT_TYPE_JOB_PRIORITY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        JobPriorityComparator comparator \u003d new JobPriorityComparator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        SortJobCommand expectedCommand \u003d new SortJobCommand(comparator, false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        String userInput \u003d SORT_TYPE_PERSON_EXP + SORT_ORDER_ASCENDING + SORT_TYPE_JOB_VACANCY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        JobVacancyComparator comparator \u003d new JobVacancyComparator();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        SortJobCommand expectedCommand \u003d new SortJobCommand(comparator, true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "g-erm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-erm": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SortPersonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SORT_ORDER_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_ORDER_ASCENDING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_ORDER_DESCENDING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_TYPE_JOB_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_TYPE_JOB_VACANCY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_TYPE_PERSON_BLACKLIST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_TYPE_PERSON_DOA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_TYPE_PERSON_EXP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_TYPE_PERSON_SAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.commands.SortPersonCommand.MESSAGE_SORT_TYPE_INVALID;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.logic.commands.SortPersonCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.comparator.PersonBlackListComparator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.comparator.PersonExpectedSalaryComparator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.comparator.PersonExperienceComparator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class SortPersonCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortPersonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private static final String MESSAGE_INVALID_ORDER \u003d \"Order can only be \u0027asc\u0027 or \u0027desc\u0027\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private SortPersonCommandParser parser \u003d new SortPersonCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // no sort order specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertParseFailure(parser, SORT_TYPE_PERSON_DOA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // no sort type specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertParseFailure(parser, SORT_ORDER_ASCENDING, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // no sort type and order specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // invalid type followed by valid order"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertParseFailure(parser, SORT_TYPE_JOB_VACANCY + SORT_ORDER_ASCENDING,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                MESSAGE_SORT_TYPE_INVALID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // valid type followed by invalid order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertParseFailure(parser, SORT_TYPE_PERSON_DOA + INVALID_SORT_ORDER_DESC, MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // valid type followed by invalid type. The test case for invalid type followed by valid type"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertParseFailure(parser, SORT_TYPE_PERSON_EXP + SORT_TYPE_JOB_PRIORITY + SORT_ORDER_ASCENDING,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                MESSAGE_SORT_TYPE_INVALID);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // both invalid values, but only the invalid order description is captured"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertParseFailure(parser, SORT_TYPE_JOB_VACANCY + INVALID_SORT_ORDER_DESC, MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void parse_allFieldsSpecified_success() throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String userInput \u003d SORT_TYPE_PERSON_BLACKLIST + SORT_ORDER_DESCENDING;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonBlackListComparator comparator \u003d new PersonBlackListComparator();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        SortPersonCommand expectedCommand \u003d new SortPersonCommand(comparator, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String userInput \u003d SORT_TYPE_PERSON_EXP + SORT_ORDER_ASCENDING"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                + SORT_TYPE_PERSON_SAL + SORT_ORDER_DESCENDING;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonExpectedSalaryComparator comparator \u003d new PersonExpectedSalaryComparator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        SortPersonCommand expectedCommand \u003d new SortPersonCommand(comparator, false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String userInput \u003d SORT_TYPE_JOB_VACANCY + SORT_ORDER_ASCENDING + SORT_TYPE_PERSON_EXP;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonExperienceComparator comparator \u003d new PersonExperienceComparator();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        SortPersonCommand expectedCommand \u003d new SortPersonCommand(comparator, true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/JobAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_IRAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MAYBANK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.GOOGLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.exceptions.DuplicateJobException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JobAddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final JobAddressBook jobAddressBook \u003d new JobAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(Collections.emptyList(), jobAddressBook.getJobList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e jobAddressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobAddressBook newData \u003d getTypicalJobAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        jobAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(newData, jobAddressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void resetData_withDuplicateJobs_throwsDuplicateJobException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Two jobs with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Job editedGoogle \u003d new JobBuilder(GOOGLE).withAddress(VALID_ADDRESS_IRAS).withTags(VALID_TAG_MAYBANK)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cJob\u003e newJobs \u003d Arrays.asList(GOOGLE, editedGoogle);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobAddressBookStub newData \u003d new JobAddressBookStub(newJobs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(DuplicateJobException.class, () -\u003e jobAddressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void hasJob_nullJob_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e jobAddressBook.hasJob(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void hasJob_jobNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(jobAddressBook.hasJob(GOOGLE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void hasJob_jobInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        jobAddressBook.addJob(GOOGLE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(jobAddressBook.hasJob(GOOGLE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void hasJob_jobWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        jobAddressBook.addJob(GOOGLE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Job editedGoogle \u003d new JobBuilder(GOOGLE).withAddress(VALID_ADDRESS_IRAS).withTags(VALID_TAG_MAYBANK)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(jobAddressBook.hasJob(editedGoogle));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void getJobList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e jobAddressBook.getJobList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * A stub ReadOnlyJobAddressBook whose jobs list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static class JobAddressBookStub implements ReadOnlyJobAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        private final ObservableList\u003cJob\u003e jobs \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobAddressBookStub(Collection\u003cJob\u003e jobs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            this.jobs.setAll(jobs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        public ObservableList\u003cJob\u003e getJobList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            return jobs;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.IRAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.MAYBANK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.predicate.PersonNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.testutil.JobAddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.testutil.PersonAddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(new PersonAddressBook(), new PersonAddressBook(modelManager.getPersonAddressBook()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertEquals(new JobAddressBook(), new JobAddressBook(modelManager.getJobAddressBook()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        userPrefs.setPersonAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        userPrefs.setPersonAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void setPersonAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPersonAddressBookFilePath(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void setPersonAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        modelManager.setPersonAddressBookFilePath(path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(path, modelManager.getPersonAddressBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void setJobAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setJobAddressBookFilePath(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void setJobAddressBookFilePath_validPath_setsJobAddressBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        modelManager.setJobAddressBookFilePath(path);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(path, modelManager.getJobAddressBookFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void hasJob_nullJob_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasJob(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void hasJob_jobNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(modelManager.hasJob(IRAS));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void hasJob_jobInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        modelManager.addJob(IRAS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(modelManager.hasJob(IRAS));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void getFilteredJobList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredJobList().remove(0));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonAddressBook addressBook \u003d new PersonAddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobAddressBook jobAddressBook \u003d new JobAddressBookBuilder().withJob(IRAS).withJob(MAYBANK).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonAddressBook differentAddressBook \u003d new PersonAddressBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobAddressBook differentJobAddressBook \u003d new JobAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, jobAddressBook, userPrefs);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, jobAddressBook, userPrefs);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, differentJobAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        modelManager.updateFilteredPersonList(new PersonNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, jobAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        differentUserPrefs.setPersonAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, jobAddressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 37,
      "g-erm": 12,
      "ameliatjy": 7,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/model/PersonAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class PersonAddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final PersonAddressBook personAddressBook \u003d new PersonAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(Collections.emptyList(), personAddressBook.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personAddressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonAddressBook newData \u003d getTypicalPersonAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        personAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(newData, personAddressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonAddressBookStub newData \u003d new PersonAddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e personAddressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personAddressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(personAddressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        personAddressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(personAddressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        personAddressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(personAddressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e personAddressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * A stub ReadOnlyPersonAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static class PersonAddressBookStub implements ReadOnlyPersonAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonAddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 2,
      "ameliatjy": 20,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void setPersonAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPersonAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void setJobAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setJobAddressBookFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 1,
      "g-erm": 6,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // one character"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Address.isValidAddress(\"12\")); // two character"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-*13\")); // three character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 4,
      "ameliatjy": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/BlacklistStatusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class BlacklistStatusTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void constructor_invalidBlacklistStatus_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String empty \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String word \u003d \"yes\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(empty));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(word));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void isValidBlacklistStatus() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // null status"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e BlacklistStatus.isValidBlacklistStatus(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // invalid status"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(BlacklistStatus.isValidBlacklistStatus(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(BlacklistStatus.isValidBlacklistStatus(\"  \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(BlacklistStatus.isValidBlacklistStatus(\"yes\")); // yes string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(BlacklistStatus.isValidBlacklistStatus(\"blacklist\")); // blacklist string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(BlacklistStatus.isValidBlacklistStatus(\"1\")); // 1 string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // valid status"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(BlacklistStatus.isValidBlacklistStatus(\"true\")); // true string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(BlacklistStatus.isValidBlacklistStatus(\"false\")); // false string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(BlacklistStatus.isValidBlacklistStatus(\"TrUe\")); // true string with some uppercase"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(BlacklistStatus.isValidBlacklistStatus(\"FALSE\")); // false string with all uppercase"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(BlacklistStatus.isValidBlacklistStatus(\"   true   \")); // true string with whitespace"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void isEquals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // same string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(new BlacklistStatus(\"true\"), new BlacklistStatus(\"true\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // strings with mix of uppercase and lowercase"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(new BlacklistStatus(\"tRUE\"), new BlacklistStatus(\"TRue\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(new BlacklistStatus(\"TRUE\"), new BlacklistStatus(\"true\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(new BlacklistStatus(\"FalsE\"), new BlacklistStatus(\"false\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(new BlacklistStatus(\"fALSe\"), new BlacklistStatus(\"FALSE\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/CompanyNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class CompanyNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CompanyName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        String invalidCompanyName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new CompanyName(invalidCompanyName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CompanyName.isValidCompanyName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // invalid company name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(CompanyName.isValidCompanyName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(CompanyName.isValidCompanyName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // valid company name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(CompanyName.isValidCompanyName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(CompanyName.isValidCompanyName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(CompanyName.isValidCompanyName(\"peter jack\")); // alphabets only; person name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(CompanyName.isValidCompanyName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(CompanyName.isValidCompanyName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(CompanyName.isValidCompanyName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(CompanyName.isValidCompanyName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(CompanyName.isValidCompanyName(\"Google\")); // alphabets only; company name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(CompanyName.isValidCompanyName(\"Software engineer\")); // alphabets only; job title"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String emptyDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String negativeDate \u003d \"-1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String wordDate \u003d \"3 July 2020\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(emptyDate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(negativeDate));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(wordDate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Date.isValidDate(\"  \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Date.isValidDate(\"12/12/12\")); // date with slash"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Date.isValidDate(\"3 July 2020\")); // date with words"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Date.isValidDate(\"01-01-2020\")); // date with yyyy"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-02-20\")); // date that does not exist"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Date.isValidDate(\"35-12-20\")); // date that does not exist"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(Date.isValidDate(\"12-12-12\")); // date with dashes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(Date.isValidDate(\"1-1-20\")); // date with 1 day and 1 month number"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(Date.isValidDate(\"   11-11-11   \")); // date with whitespace"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(Date.isValidDate(\"   29-02-20   \")); // leap year date that is valid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void isEquals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // same date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(new Date(\"01-01-20\"), new Date(\"01-01-20\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // same date but with 1 vs 2 day/month numbers"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(new Date(\"1-1-20\"), new Date(\"01-01-20\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(new Date(\"12-9-20\"), new Date(\"12-09-20\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(new Date(\"2-09-20\"), new Date(\"02-09-20\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/ExperienceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class ExperienceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Experience(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void constructor_invalidExperience_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String emptyExperience \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String negativeExperience \u003d \"-1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String wordExperience \u003d \"Twenty\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Experience(emptyExperience));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Experience(negativeExperience));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Experience(wordExperience));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void isValidExperience() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // null experience"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Experience.isValidExperience(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // invalid experience"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Experience.isValidExperience(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Experience.isValidExperience(\"  \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Experience.isValidExperience(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Experience.isValidExperience(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Experience.isValidExperience(\"-100\")); // negative number"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Experience.isValidExperience(\"100.1\")); // number more that 100"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Experience.isValidExperience(\"Infinity\")); // infinity"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // valid experience"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(Experience.isValidExperience(\"0\")); // zero"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(Experience.isValidExperience(\"9\")); // positive"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(Experience.isValidExperience(\"    9    \")); // valid number with whitespace"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/JobTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_IRAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_NAME_IRAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_IRAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOB_TITLE_IRAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_IRAS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_IRAS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MAYBANK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.FACEBOOK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.GOOGLE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JobTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Job job \u003d new JobBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e job.getTags().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void isSameJob() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(FACEBOOK.isSameJob(FACEBOOK));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(FACEBOOK.isSameJob(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different job title and company name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Job editedFacebook \u003d new JobBuilder(FACEBOOK).withCompanyName(VALID_COMPANY_NAME_IRAS)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .withJobTitle(VALID_JOB_TITLE_IRAS).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(FACEBOOK.isSameJob(editedFacebook));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different job title -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        editedFacebook \u003d new JobBuilder(FACEBOOK).withJobTitle(VALID_JOB_TITLE_IRAS).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(FACEBOOK.isSameJob(editedFacebook));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same job title, same company name, different phone number, email, address and tags -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        editedFacebook \u003d new JobBuilder(FACEBOOK).withPhone(VALID_PHONE_IRAS).withEmail(VALID_EMAIL_IRAS)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .withAddress(VALID_ADDRESS_IRAS).withTags(VALID_TAG_IRAS).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(FACEBOOK.isSameJob(editedFacebook));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same job title, same company name, same email, same address different phone number and tags -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        editedFacebook \u003d new JobBuilder(FACEBOOK).withPhone(VALID_PHONE_IRAS).withTags(VALID_TAG_IRAS).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(FACEBOOK.isSameJob(editedFacebook));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same name, same phone, same tags, different phone number, email and address -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        editedFacebook \u003d new JobBuilder(FACEBOOK).withPhone(VALID_PHONE_IRAS).withEmail(VALID_EMAIL_IRAS)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .withAddress(VALID_ADDRESS_IRAS).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(FACEBOOK.isSameJob(editedFacebook));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Job facebookCopy \u003d new JobBuilder(FACEBOOK).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(FACEBOOK.equals(facebookCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(FACEBOOK.equals(FACEBOOK));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(FACEBOOK.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(FACEBOOK.equals(5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(FACEBOOK.equals(GOOGLE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different job title -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Job editedFacebook \u003d new JobBuilder(FACEBOOK).withJobTitle(VALID_JOB_TITLE_IRAS).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(FACEBOOK.equals(editedFacebook));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different company name -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        editedFacebook \u003d new JobBuilder(FACEBOOK).withCompanyName(VALID_COMPANY_NAME_IRAS).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(FACEBOOK.equals(editedFacebook));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        editedFacebook \u003d new JobBuilder(FACEBOOK).withPhone(VALID_PHONE_IRAS).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(FACEBOOK.equals(editedFacebook));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        editedFacebook \u003d new JobBuilder(FACEBOOK).withEmail(VALID_EMAIL_IRAS).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(FACEBOOK.equals(editedFacebook));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        editedFacebook \u003d new JobBuilder(FACEBOOK).withAddress(VALID_ADDRESS_IRAS).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(FACEBOOK.equals(editedFacebook));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        editedFacebook \u003d new JobBuilder(FACEBOOK).withTags(VALID_TAG_MAYBANK).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(FACEBOOK.equals(editedFacebook));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only; person name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(Name.isValidName(\"Google\")); // alphabets only; company name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(Name.isValidName(\"Software engineer\")); // alphabets only; job title"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 4,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 1,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"12429384202331232222\")); // 21 digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"12429384203312322222\")); // 20 digits"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 2,
      "ameliatjy": 1,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/PriorityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Priority(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void constructor_invalidPriority_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        String invalidPriority \u003d \"urgent\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // null priority"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // blank priority"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // invalid priority values"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"urgent\")); // not accepted value"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // valid priority"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"low\")); // low priority"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"moderate\")); // moderate priority"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"high\")); // high priority"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-erm": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/SalaryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class SalaryTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Salary(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void constructor_invalidUrlLink_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String invalidSalary \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Salary(invalidSalary));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void isValidSalary() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // null salary"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Salary.isValidSalary(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // invalid salary"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Salary.isValidSalary(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"-88\")); // negative numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"google\")); // alphabets"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"8,000\")); // numbers with comma"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"Infinity\")); // numbers more than 1 billion"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"1000000001\")); // numbers more than 1 billion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"2000.5\")); // numbers with decimal"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // valid salary"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(Salary.isValidSalary(\"0\")); // 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(Salary.isValidSalary(\"8000\")); // positive number less than 1 billion"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(Salary.isValidSalary(\"    8000     \")); // valid number with whitespace"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/UniqueJobListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_IRAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MAYBANK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.FACEBOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.GOOGLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.exceptions.DuplicateJobException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.exceptions.JobNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class UniqueJobListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private final UniqueJobList uniqueJobList \u003d new UniqueJobList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void contains_nullJob_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueJobList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void contains_jobNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(uniqueJobList.contains(GOOGLE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void contains_jobInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.add(GOOGLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(uniqueJobList.contains(GOOGLE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void contains_jobWithSameIdentityFieldsInList_returnsTrue() { //?"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.add(GOOGLE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Job editedGoogle \u003d new JobBuilder(GOOGLE).withAddress(VALID_ADDRESS_IRAS).withTags(VALID_TAG_MAYBANK)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(uniqueJobList.contains(editedGoogle));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void add_nullJob_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueJobList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void add_duplicateJob_throwsDuplicateJobException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.add(GOOGLE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(DuplicateJobException.class, () -\u003e uniqueJobList.add(GOOGLE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJob_nullTargetJob_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueJobList.setJob(null, GOOGLE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJob_nullEditedJob_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueJobList.setJob(GOOGLE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJob_targetJobNotInList_throwsJobNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(JobNotFoundException.class, () -\u003e uniqueJobList.setJob(GOOGLE, GOOGLE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJob_editedJobIsSameJob_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.add(GOOGLE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.setJob(GOOGLE, GOOGLE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        UniqueJobList expectedUniqueJobList \u003d new UniqueJobList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        expectedUniqueJobList.add(GOOGLE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(expectedUniqueJobList, uniqueJobList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJob_editedJobHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.add(GOOGLE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Job editedGoogle \u003d new JobBuilder(GOOGLE).withAddress(VALID_ADDRESS_IRAS).withTags(VALID_TAG_MAYBANK)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.setJob(GOOGLE, editedGoogle);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        UniqueJobList expectedUniqueJobList \u003d new UniqueJobList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        expectedUniqueJobList.add(editedGoogle);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(expectedUniqueJobList, uniqueJobList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJob_editedJobHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.add(GOOGLE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.setJob(GOOGLE, FACEBOOK);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        UniqueJobList expectedUniqueJobList \u003d new UniqueJobList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        expectedUniqueJobList.add(FACEBOOK);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(expectedUniqueJobList, uniqueJobList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJob_editedJobHasNonUniqueIdentity_throwsDuplicateJobException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.add(GOOGLE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.add(FACEBOOK);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(DuplicateJobException.class, () -\u003e uniqueJobList.setJob(GOOGLE, FACEBOOK));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void remove_nullJob_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueJobList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void remove_jobDoesNotExist_throwsJobNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(JobNotFoundException.class, () -\u003e uniqueJobList.remove(GOOGLE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void remove_existingJob_removesJob() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.add(GOOGLE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.remove(GOOGLE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        UniqueJobList expectedUniqueJobList \u003d new UniqueJobList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(expectedUniqueJobList, uniqueJobList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJobs_nullUniqueJobList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueJobList.setJobs((UniqueJobList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJobs_uniqueJobList_replacesOwnListWithProvidedUniqueJobList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.add(GOOGLE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        UniqueJobList expectedUniqueJobList \u003d new UniqueJobList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        expectedUniqueJobList.add(FACEBOOK);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.setJobs(expectedUniqueJobList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(expectedUniqueJobList, uniqueJobList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJobs_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueJobList.setJobs((List\u003cJob\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJobs_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.add(GOOGLE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cJob\u003e jobList \u003d Collections.singletonList(FACEBOOK);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        uniqueJobList.setJobs(jobList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        UniqueJobList expectedUniqueJobList \u003d new UniqueJobList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        expectedUniqueJobList.add(FACEBOOK);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(expectedUniqueJobList, uniqueJobList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void setJobs_listWithDuplicateJobs_throwsDuplicateJobException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cJob\u003e listWithDuplicateJobs \u003d Arrays.asList(GOOGLE, GOOGLE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(DuplicateJobException.class, () -\u003e uniqueJobList.setJobs(listWithDuplicateJobs));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            -\u003e uniqueJobList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 3,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/UrlLinkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class UrlLinkTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UrlLink(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void constructor_invalidUrlLink_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String invalidUrlLink \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new UrlLink(invalidUrlLink));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void isValidUrlLink() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // null url links"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e UrlLink.isValidLink(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // invalid url links"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(UrlLink.isValidLink(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(UrlLink.isValidLink(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(UrlLink.isValidLink(\"88\")); // only numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(UrlLink.isValidLink(\"google\")); // only alphabet"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(UrlLink.isValidLink(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(UrlLink.isValidLink(\"http:/www.google.com\")); // http scheme with only 1 slash"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(UrlLink.isValidLink(\"https:/www.google.com\")); // https scheme with only 1 slash"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(UrlLink.isValidLink(\"ftp:/www.google.com\")); // ftp scheme with only 1 slash"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(UrlLink.isValidLink(\"simp://www.google.com\")); // fake nonsense scheme"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        // valid url links"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(UrlLink.isValidLink(\"http://www.google.com\")); // http scheme with 2 slash"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(UrlLink.isValidLink(\"https://www.google.com\")); // https scheme with 2 slash"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(UrlLink.isValidLink(\"ftp://www.google.com\")); // ftp scheme with 2 slash"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(UrlLink.isValidLink(\"http://google.com\")); // http scheme with 2 slash amd without www."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(UrlLink.isValidLink(\"https://google.com\")); // https scheme with 2 slash amd without www."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(UrlLink.isValidLink(\"ftp://google.com\")); // ftp sch with 2 slash and without www."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(UrlLink.isValidLink(\"google.com\")); // without any scheme"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(UrlLink.isValidLink(\"linkedin.com\")); // without any scheme"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(UrlLink.isValidLink(\"www.google.com\")); // without any scheme but with www."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(UrlLink.isValidLink(\"www.linkedin.com\")); // without any scheme but with www."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/VacancyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "package seedu.address.model.information;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "public class VacancyTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Vacancy(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        String invalidVacancy \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Vacancy(invalidVacancy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void isValidVacancy() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // null vacancy"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Vacancy.isValidVacancy(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // invalid vacancies"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(Vacancy.isValidVacancy(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(Vacancy.isValidVacancy(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(Vacancy.isValidVacancy(\"100\")); // more than 2 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(Vacancy.isValidVacancy(\"many\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(Vacancy.isValidVacancy(\"1o\")); // alphabets and digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(Vacancy.isValidVacancy(\"1 2\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // valid vacancies"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertTrue(Vacancy.isValidVacancy(\"1\")); // 1 digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertTrue(Vacancy.isValidVacancy(\"20\")); // 2 digits"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-erm": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/comparator/JobPriorityComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "package seedu.address.model.information.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "public class JobPriorityComparatorTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private final JobPriorityComparator priorityComparator \u003d new JobPriorityComparator();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        JobPriorityComparator firstComparator \u003d new JobPriorityComparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        JobPriorityComparator secondComparator \u003d new JobPriorityComparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // same comparator -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertTrue(firstComparator.equals(firstComparator));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // different comparators -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertTrue(firstComparator.equals(secondComparator));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(firstComparator.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(firstComparator.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void testEqual() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Job firstJob \u003d new JobBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Job secondJob \u003d new JobBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        int result \u003d priorityComparator.compare(firstJob, secondJob);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(result, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void testGreaterThan() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Job firstJob \u003d new JobBuilder().withPriority(\"high\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Job secondJob \u003d new JobBuilder().withPriority(\"low\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        int result \u003d priorityComparator.compare(firstJob, secondJob);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(result, 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void testLessThan() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Job firstJob \u003d new JobBuilder().withPriority(\"moderate\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Job secondJob \u003d new JobBuilder().withPriority(\"high\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        int result \u003d priorityComparator.compare(firstJob, secondJob);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(result, -1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-erm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-erm": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/comparator/JobVacancyComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "package seedu.address.model.information.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "public class JobVacancyComparatorTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private final JobVacancyComparator vacancyComparator \u003d new JobVacancyComparator();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        JobVacancyComparator firstComparator \u003d new JobVacancyComparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        JobVacancyComparator secondComparator \u003d new JobVacancyComparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // same comparator -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertTrue(firstComparator.equals(firstComparator));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // different comparators -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertTrue(firstComparator.equals(secondComparator));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(firstComparator.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertFalse(firstComparator.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void testEqual() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Job firstJob \u003d new JobBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Job secondJob \u003d new JobBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        int result \u003d vacancyComparator.compare(firstJob, secondJob);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(result, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void testGreaterThan() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Job firstJob \u003d new JobBuilder().withVacancy(\"7\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Job secondJob \u003d new JobBuilder().withVacancy(\"3\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        int result \u003d vacancyComparator.compare(firstJob, secondJob);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(result, 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void testLessThan() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Job firstJob \u003d new JobBuilder().withVacancy(\"4\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        Job secondJob \u003d new JobBuilder().withVacancy(\"5\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        int result \u003d vacancyComparator.compare(firstJob, secondJob);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(result, -1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-erm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-erm": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/comparator/PersonBlackListComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.model.information.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class PersonBlackListComparatorTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private final PersonBlackListComparator blackListComparator \u003d new PersonBlackListComparator();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonBlackListComparator firstComparator \u003d new PersonBlackListComparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonBlackListComparator secondComparator \u003d new PersonBlackListComparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // same comparator -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertTrue(firstComparator.equals(firstComparator));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // different comparators -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertTrue(firstComparator.equals(secondComparator));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertFalse(firstComparator.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertFalse(firstComparator.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void testEqual() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person firstPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person secondPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int result \u003d blackListComparator.compare(firstPerson, secondPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(result, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void testGreaterThan() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person firstPerson \u003d new PersonBuilder().withBlacklistStatus(\"true\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person secondPerson \u003d new PersonBuilder().withBlacklistStatus(\"false\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int result \u003d blackListComparator.compare(firstPerson, secondPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(result, 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void testLessThan() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person firstPerson \u003d new PersonBuilder().withBlacklistStatus(\"false\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person secondPerson \u003d new PersonBuilder().withBlacklistStatus(\"true\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int result \u003d blackListComparator.compare(firstPerson, secondPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(result, -1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/comparator/PersonDateOfApplicationComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.model.information.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class PersonDateOfApplicationComparatorTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private final PersonDateOfApplicationComparator dateOfApplicationComparator \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            new PersonDateOfApplicationComparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonDateOfApplicationComparator firstComparator \u003d new PersonDateOfApplicationComparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonDateOfApplicationComparator secondComparator \u003d new PersonDateOfApplicationComparator();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // same comparator -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertTrue(firstComparator.equals(firstComparator));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // different comparators -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertTrue(firstComparator.equals(secondComparator));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertFalse(firstComparator.equals(1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertFalse(firstComparator.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void testEqual() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person firstPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person secondPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int result \u003d dateOfApplicationComparator.compare(firstPerson, secondPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(result, 0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void testGreaterThan() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person firstPerson \u003d new PersonBuilder().withDateOfApplication(\"25-11-20\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person secondPerson \u003d new PersonBuilder().withDateOfApplication(\"24-11-20\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int result \u003d dateOfApplicationComparator.compare(firstPerson, secondPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(result, 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void testLessThan() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person firstPerson \u003d new PersonBuilder().withDateOfApplication(\"24-11-20\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person secondPerson \u003d new PersonBuilder().withDateOfApplication(\"25-11-20\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int result \u003d dateOfApplicationComparator.compare(firstPerson, secondPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(result, -1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/comparator/PersonExpectedSalaryComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.model.information.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class PersonExpectedSalaryComparatorTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private final PersonExpectedSalaryComparator expectedSalaryComparator \u003d new PersonExpectedSalaryComparator();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonExpectedSalaryComparator firstComparator \u003d new PersonExpectedSalaryComparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonExpectedSalaryComparator secondComparator \u003d new PersonExpectedSalaryComparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // same comparator -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertTrue(firstComparator.equals(firstComparator));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // different comparators -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertTrue(firstComparator.equals(secondComparator));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertFalse(firstComparator.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertFalse(firstComparator.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void testEqual() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person firstPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person secondPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int result \u003d expectedSalaryComparator.compare(firstPerson, secondPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(result, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void testGreaterThan() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Person firstPerson \u003d new PersonBuilder().withSalary(\"1000\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person secondPerson \u003d new PersonBuilder().withSalary(\"500\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int result \u003d expectedSalaryComparator.compare(firstPerson, secondPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(result, 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void testLessThan() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person firstPerson \u003d new PersonBuilder().withSalary(\"500\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person secondPerson \u003d new PersonBuilder().withSalary(\"1000\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int result \u003d expectedSalaryComparator.compare(firstPerson, secondPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(result, -1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 56,
      "BreadPeanutButter": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/comparator/PersonExperienceComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "package seedu.address.model.information.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class PersonExperienceComparatorTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private final PersonExperienceComparator experienceComparator \u003d new PersonExperienceComparator();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonExperienceComparator firstComparator \u003d new PersonExperienceComparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        PersonExperienceComparator secondComparator \u003d new PersonExperienceComparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // same comparator -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertTrue(firstComparator.equals(firstComparator));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // different comparators -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertTrue(firstComparator.equals(secondComparator));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertFalse(firstComparator.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertFalse(firstComparator.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void testEqual() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person firstPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person secondPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int result \u003d experienceComparator.compare(firstPerson, secondPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(result, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void testGreaterThan() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person firstPerson \u003d new PersonBuilder().withExperience(\"10.0\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person secondPerson \u003d new PersonBuilder().withExperience(\"5.0\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int result \u003d experienceComparator.compare(firstPerson, secondPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(result, 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void testLessThan() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person firstPerson \u003d new PersonBuilder().withExperience(\"5.0\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Person secondPerson \u003d new PersonBuilder().withExperience(\"10.0\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int result \u003d experienceComparator.compare(firstPerson, secondPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(result, -1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/JobAddressContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class JobAddressContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"Yishun\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"Yishun\", \"Street\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobAddressContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new JobAddressContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobAddressContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new JobAddressContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobAddressContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new JobAddressContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_addressContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobAddressContainsKeywordsPredicate predicate \u003d new JobAddressContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Collections.singletonList(\"Yishun\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobAddressContainsKeywordsPredicate(Arrays.asList(\"Yishun\", \"Street\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Exact Matching"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobAddressContainsKeywordsPredicate(Arrays.asList(\"Yishun\", \"Street\", \"11\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobAddressContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobAddressContainsKeywordsPredicate(Arrays.asList(\"yIsHuN\", \"sTrEet\", \"11\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_addressDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Only one matching keyword, the other does not match"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobAddressContainsKeywordsPredicate predicate \u003d new JobAddressContainsKeywordsPredicate("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Arrays.asList(\"Tampines\", \"Street\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobAddressContainsKeywordsPredicate(Arrays.asList(\"Tampines\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Keywords match job title, phone and email, but does not match address"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobAddressContainsKeywordsPredicate("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"Cleaner\", \"Tampines\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withJobTitle(\"Cleaner\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/JobCompanyNameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JobCompanyNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"Mr\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"Mr\", \"Bean\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobCompanyNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobCompanyNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobCompanyNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobCompanyNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobCompanyNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobCompanyNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different companies -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_companyNameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobCompanyNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobCompanyNameContainsKeywordsPredicate(Arrays.asList(\"Facebook\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withCompanyName(\"Facebook\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new JobCompanyNameContainsKeywordsPredicate(Arrays.asList(\"Mr\", \"Bean\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withCompanyName(\"Mr Bean\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Contain keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new JobCompanyNameContainsKeywordsPredicate(Arrays.asList(\"Bean\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withCompanyName(\"Mr Bean\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withCompanyName(\"Coffee Bean Tea Leaf\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new JobCompanyNameContainsKeywordsPredicate(Arrays.asList(\"gOOgLe\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withCompanyName(\"Google\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new JobCompanyNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withCompanyName(\"Google\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_companyNameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobCompanyNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobCompanyNameContainsKeywordsPredicate(Arrays.asList(\"Facebook\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withCompanyName(\"Google\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Some matching keywords only"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new JobCompanyNameContainsKeywordsPredicate(Arrays.asList(\"Mr\", \"Bean\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withCompanyName(\"Bean\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/JobEmailContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JobEmailContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"@recruitment.com\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"facebook@recruitment.com\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobEmailContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobEmailContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobEmailContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobEmailContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobEmailContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobEmailContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_emailContainsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Exactly matching keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobEmailContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobEmailContainsKeywordsPredicate(Collections.singletonList(\"google@recruitment.com\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withEmail(\"google@recruitment.com\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Contains matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new JobEmailContainsKeywordsPredicate(Collections.singletonList(\"@recruitment.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withEmail(\"google@recruitment.com\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Mixed-case keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new JobEmailContainsKeywordsPredicate(Collections.singletonList(\"FaCeBOOk@reCrUItMenT.Com\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withEmail(\"facebook@recruitment.com\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new JobEmailContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withEmail(\"facebook@recruitment.com\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_emailDoesNotContainKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobEmailContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobEmailContainsKeywordsPredicate(Collections.singletonList(\"@recruitment.sg\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withEmail(\"facebook@recruitment.com\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/JobJobTitleContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class JobJobTitleContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"toilet\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"toilet\", \"bowl\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobJobTitleContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new JobJobTitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobJobTitleContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new JobJobTitleContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobJobTitleContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new JobJobTitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_jobTitleContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobJobTitleContainsKeywordsPredicate predicate \u003d new JobJobTitleContainsKeywordsPredicate("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Collections.singletonList(\"Toilet\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withJobTitle(\"Toilet Bowl Cleaner\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobJobTitleContainsKeywordsPredicate(Arrays.asList(\"Toilet\", \"Bowl\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withJobTitle(\"Toilet Bowl Cleaner\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Exact Matching"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobJobTitleContainsKeywordsPredicate(Arrays.asList(\"Toilet\", \"Bowl\", \"Cleaner\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withJobTitle(\"Toilet Bowl Cleaner\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobJobTitleContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withJobTitle(\"Toilet Bowl Cleaner\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobJobTitleContainsKeywordsPredicate(Arrays.asList(\"tOiLeT\", \"bOwL\", \"cLeAnEr\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withJobTitle(\"Toilet Bowl Cleaner\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_jobTitleDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Only one matching keyword, the other does not match"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobJobTitleContainsKeywordsPredicate predicate \u003d new JobJobTitleContainsKeywordsPredicate("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Arrays.asList(\"Toilet\", \"Wiper\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withJobTitle(\"Toilet Bowl Cleaner\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobJobTitleContainsKeywordsPredicate(Arrays.asList(\"Engineer\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withJobTitle(\"Toilet Bowl Cleaner\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Keywords match phone, email and address, but does not match job title"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobJobTitleContainsKeywordsPredicate("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\", \"CEO\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withJobTitle(\"Cleaner\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/JobPhoneContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JobPhoneContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"9191\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"91912020\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobPhoneContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobPhoneContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobPhoneContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobPhoneContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobPhoneContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobPhoneContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different phone number -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_phoneContainsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Exactly matching keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobPhoneContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobPhoneContainsKeywordsPredicate(Collections.singletonList(\"91910202\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withPhone(\"91910202\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new JobPhoneContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withPhone(\"91910202\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_phoneDoesNotContainKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobPhoneContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobPhoneContainsKeywordsPredicate(Collections.singletonList(\"9191\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withPhone(\"91910000\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withPhone(\"91000091\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/JobPriorityContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JobPriorityContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"low\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"high\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobPriorityContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobPriorityContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobPriorityContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobPriorityContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobPriorityContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobPriorityContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_priorityContainsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Exactly matching keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobPriorityContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobPriorityContainsKeywordsPredicate(Collections.singletonList(\"high\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withPriority(\"high\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Contains matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new JobPriorityContainsKeywordsPredicate(Collections.singletonList(\"hi\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withPriority(\"high\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Mixed-case keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new JobPriorityContainsKeywordsPredicate(Collections.singletonList(\"HIgH\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withPriority(\"high\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new JobPriorityContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withPriority(\"high\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_priorityDoesNotContainKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobPriorityContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobPriorityContainsKeywordsPredicate(Collections.singletonList(\"high\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withPriority(\"low\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/JobTagsContainKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class JobTagsContainKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"cleaner\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"cleaner\", \"whiteCollar\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobTagsContainKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new JobTagsContainKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobTagsContainKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new JobTagsContainKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobTagsContainKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new JobTagsContainKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_tagsContainKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobTagsContainKeywordsPredicate predicate \u003d new JobTagsContainKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Collections.singletonList(\"cleaner\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withTags(\"whiteCollar\", \"cleaner\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Multiple keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobTagsContainKeywordsPredicate(Arrays.asList(\"cleaner\", \"whiteCollar\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withTags(\"whiteCollar\", \"cleaner\", \"CEO\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Exact matching"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobTagsContainKeywordsPredicate(Arrays.asList(\"whiteCollar\", \"cleaner\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withTags(\"whiteCollar\", \"cleaner\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobTagsContainKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withTags(\"whiteCollar\", \"cleaner\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobTagsContainKeywordsPredicate(Arrays.asList(\"whItEcoLlaR\", \"cLeAnEr\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withTags(\"whiteCollar\", \"cleaner\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_tagsDoNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Only one matching keyword, the rest do not match"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobTagsContainKeywordsPredicate predicate \u003d new JobTagsContainKeywordsPredicate("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Arrays.asList(\"cleaner\", \"lowWage\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withTags(\"whiteCollar\", \"cleaner\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobTagsContainKeywordsPredicate(Arrays.asList(\"CEO\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withTags(\"whiteCollar\", \"cleaner\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Keywords match phone and email, but does not match tags"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new JobTagsContainKeywordsPredicate("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\", \"CEO\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withJobTitle(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .withEmail(\"alice@email.com\").withTags(\"whiteCollar\", \"cleaner\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/JobVacancyContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JobVacancyContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"9\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"99\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobVacancyContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobVacancyContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobVacancyContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobVacancyContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobVacancyContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobVacancyContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different vacancy -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_vacancyContainsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Exactly matching keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobVacancyContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobVacancyContainsKeywordsPredicate(Collections.singletonList(\"15\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withVacancy(\"15\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new JobVacancyContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new JobBuilder().withVacancy(\"10\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_vacancyDoesNotContainKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobVacancyContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JobVacancyContainsKeywordsPredicate(Collections.singletonList(\"9\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withVacancy(\"99\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(predicate.test(new JobBuilder().withVacancy(\"19\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/PersonAddressContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class PersonAddressContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"Yishun\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"Yishun\", \"Street\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonAddressContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonAddressContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonAddressContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonAddressContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonAddressContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonAddressContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_addressContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonAddressContainsKeywordsPredicate predicate \u003d new PersonAddressContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Collections.singletonList(\"Yishun\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonAddressContainsKeywordsPredicate(Arrays.asList(\"Yishun\", \"Street\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Exact Matching"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonAddressContainsKeywordsPredicate(Arrays.asList(\"Yishun\", \"Street\", \"11\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonAddressContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonAddressContainsKeywordsPredicate(Arrays.asList(\"YiShUn\", \"sTreEt\", \"11\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_addressDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Only one matching keyword, the rest does not match"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonAddressContainsKeywordsPredicate predicate \u003d new PersonAddressContainsKeywordsPredicate("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Arrays.asList(\"Tampines\", \"Street\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonAddressContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Keywords match name, phone, and email, but does not match address"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonAddressContainsKeywordsPredicate("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Arrays.asList(\"Alice\", \"12345\", \"alice@email.com\", \"Tampines\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Yishun Street 11\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/PersonApplicationContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class PersonApplicationContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"19-10-12\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"19-10-12\", \"20-01-20\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonApplicationContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonApplicationContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonApplicationContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonApplicationContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonApplicationContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonApplicationContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_applicationContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonApplicationContainsKeywordsPredicate predicate \u003d new PersonApplicationContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Collections.singletonList(\"19\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withDateOfApplication(\"19-10-12\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonApplicationContainsKeywordsPredicate(Arrays.asList(\"19\", \"12\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withDateOfApplication(\"19-10-12\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Exact Matching"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonApplicationContainsKeywordsPredicate(Arrays.asList(\"19-10-12\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withDateOfApplication(\"19-10-12\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonApplicationContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withDateOfApplication(\"19-10-12\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_applicationDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Only one matching keyword, the rest does not match"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonApplicationContainsKeywordsPredicate predicate \u003d new PersonApplicationContainsKeywordsPredicate("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Arrays.asList(\"19\", \"20\", \"31\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withDateOfApplication(\"19-10-12\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonApplicationContainsKeywordsPredicate(Arrays.asList(\"20-01-20\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withDateOfApplication(\"19-10-12\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Keywords match name, phone, and email, but does not match date of application"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonApplicationContainsKeywordsPredicate("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Arrays.asList(\"Alice\", \"12345\", \"alice@email.com\", \"20-01-20\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .withEmail(\"alice@email.com\").withDateOfApplication(\"19-10-12\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/PersonBlacklistContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class PersonBlacklistContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"true\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"true\", \"false\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonBlacklistContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonBlacklistContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonBlacklistContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonBlacklistContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonBlacklistContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonBlacklistContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_blacklistContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // keyword containing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonBlacklistContainsKeywordsPredicate predicate \u003d new PersonBlacklistContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Collections.singletonList(\"tru\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withBlacklistStatus(\"true\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Exact Matching"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonBlacklistContainsKeywordsPredicate(Arrays.asList(\"true\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withBlacklistStatus(\"true\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonBlacklistContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withBlacklistStatus(\"true\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonBlacklistContainsKeywordsPredicate(Arrays.asList(\"tRuE\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withBlacklistStatus(\"true\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_blacklistDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Extra input"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonBlacklistContainsKeywordsPredicate predicate \u003d new PersonBlacklistContainsKeywordsPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Arrays.asList(\"true\", \"false\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withBlacklistStatus(\"true\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonBlacklistContainsKeywordsPredicate(Arrays.asList(\"false\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withBlacklistStatus(\"true\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Keywords match name, phone, and email, but does not match blacklist status."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonBlacklistContainsKeywordsPredicate("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Arrays.asList(\"Alice\", \"12345\", \"alice@email.com\", \"false\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .withEmail(\"alice@email.com\").withBlacklistStatus(\"true\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/PersonEmailContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class PersonEmailContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"@gmail.com\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"joan@gmail.com\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonEmailContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonEmailContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonEmailContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonEmailContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonEmailContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonEmailContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_emailContainsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Exactly matching keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonEmailContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonEmailContainsKeywordsPredicate(Collections.singletonList(\"joan@gmail.com\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withEmail(\"joan@gmail.com\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Contains matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new PersonEmailContainsKeywordsPredicate(Collections.singletonList(\"@gmail.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withEmail(\"joan@gmail.com\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Mixed-case keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new PersonEmailContainsKeywordsPredicate(Collections.singletonList(\"JoAN@GmaiL.CoM\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withEmail(\"joan@gmail.com\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new PersonEmailContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withEmail(\"joan@gmail.com\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_emailDoesNotContainKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonEmailContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonEmailContainsKeywordsPredicate(Collections.singletonList(\"@gmail.sg\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withEmail(\"joan@gmail.com\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/PersonExperienceContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class PersonExperienceContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"5\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"50\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonExperienceContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonExperienceContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonExperienceContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonExperienceContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonExperienceContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonExperienceContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different experience -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_experienceContainsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Exactly matching keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonExperienceContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonExperienceContainsKeywordsPredicate(Collections.singletonList(\"5\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withExperience(\"5\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new PersonExperienceContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withExperience(\"5\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_experienceDoesNotContainKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonExperienceContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonExperienceContainsKeywordsPredicate(Collections.singletonList(\"5\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withExperience(\"15\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/PersonNameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class PersonNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonNameContainsKeywordsPredicate predicate \u003d new PersonNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new PersonNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob Charlie\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Exact Matching"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new PersonNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Only one matching keyword, but others do not match"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonNameContainsKeywordsPredicate predicate \u003d new PersonNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new PersonNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonNameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 15,
      "ameliatjy": 13,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/PersonPhoneContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class PersonPhoneContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"9191\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"91912020\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonPhoneContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonPhoneContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonPhoneContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonPhoneContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonPhoneContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonPhoneContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different phone number -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_phoneContainsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Exactly matching keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonPhoneContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonPhoneContainsKeywordsPredicate(Collections.singletonList(\"91910202\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPhone(\"91910202\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new PersonPhoneContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPhone(\"91910202\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_phoneDoesNotContainKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonPhoneContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonPhoneContainsKeywordsPredicate(Collections.singletonList(\"9191\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withPhone(\"91910000\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withPhone(\"91000091\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/PersonSalaryContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class PersonSalaryContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"3000.69\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"3000.69\", \"2154.77\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonSalaryContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonSalaryContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonSalaryContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonSalaryContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonSalaryContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonSalaryContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_salaryContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Exact Matching"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonSalaryContainsKeywordsPredicate predicate \u003d new PersonSalaryContainsKeywordsPredicate("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                Arrays.asList(\"3000\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withSalary(\"3000\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonSalaryContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withSalary(\"3000\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_salaryDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // One keyword containing"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonSalaryContainsKeywordsPredicate predicate \u003d new PersonSalaryContainsKeywordsPredicate("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Collections.singletonList(\"3000\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withSalary(\"3001\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Only one matching keyword, the rest does not match"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonSalaryContainsKeywordsPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                Arrays.asList(\"2154\", \"3000\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withSalary(\"3000\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        predicate \u003d new PersonSalaryContainsKeywordsPredicate(Arrays.asList(\"2154\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withSalary(\"3000\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Keywords match phone but does not match address"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonSalaryContainsKeywordsPredicate("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                Arrays.asList(\"12345\", \"2122\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withPhone(\"12345\").withSalary(\"3000\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 10,
      "raythx98": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/PersonTagsContainKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class PersonTagsContainKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"cleaner\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"cleaner\", \"whiteCollar\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonTagsContainKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonTagsContainKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonTagsContainKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonTagsContainKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonTagsContainKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonTagsContainKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_tagsContainKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonTagsContainKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                new PersonTagsContainKeywordsPredicate(Collections.singletonList(\"cleaner\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"whiteCollar\", \"cleaner\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Multiple keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonTagsContainKeywordsPredicate(Arrays.asList(\"cleaner\", \"whiteCollar\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"whiteCollar\", \"cleaner\", \"CEO\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Exact matching"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonTagsContainKeywordsPredicate(Arrays.asList(\"whiteCollar\", \"cleaner\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"whiteCollar\", \"cleaner\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonTagsContainKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"whiteCollar\", \"cleaner\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonTagsContainKeywordsPredicate(Arrays.asList(\"whItEcoLlaR\", \"cLeAnEr\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"whiteCollar\", \"cleaner\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public void test_tagsDoNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Only one matching keyword, the rest do not match"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonTagsContainKeywordsPredicate predicate \u003d new PersonTagsContainKeywordsPredicate("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Arrays.asList(\"cleaner\", \"lowWage\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"whiteCollar\", \"cleaner\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonTagsContainKeywordsPredicate(Arrays.asList(\"CEO\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"whiteCollar\", \"cleaner\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        // Keywords match phone, email and name, but does not match tags"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        predicate \u003d new PersonTagsContainKeywordsPredicate("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\", \"CEO\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                .withEmail(\"alice@email.com\").withTags(\"whiteCollar\", \"cleaner\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/information/predicate/PersonUrlLinkContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.model.information.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class PersonUrlLinkContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"http://\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"http://faacebook.com\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonUrlLinkContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonUrlLinkContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonUrlLinkContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonUrlLinkContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonUrlLinkContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonUrlLinkContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // different link -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_phoneContainsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Exactly matching keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonUrlLinkContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonUrlLinkContainsKeywordsPredicate(Collections.singletonList(\"http://facebook.com\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withUrlLink(\"http://facebook.com\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Contains matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new PersonUrlLinkContainsKeywordsPredicate(Collections.singletonList(\"linkedin.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withUrlLink(\"linkedin.com/saralee\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Mixed-case keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new PersonUrlLinkContainsKeywordsPredicate(Collections.singletonList(\"LinkedIn.com\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withUrlLink(\"http://linkedin.com/saralee\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        predicate \u003d new PersonUrlLinkContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withUrlLink(\"http://facebook.com\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void test_phoneDoesNotContainKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonUrlLinkContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new PersonUrlLinkContainsKeywordsPredicate(Collections.singletonList(\"linkedin.com/saralee\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withUrlLink(\"http://linkedin.com/saratoh\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withUrlLink(\"http://linkedin.com\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedJobTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.storage.JsonAdaptedJob.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.GOOGLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Vacancy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JsonAdaptedJobTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final String INVALID_JOB_TITLE \u003d \"Software*Engineer\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final String INVALID_COMPANY_NAME \u003d \"F@cebook\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#socialmedia\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"extreme\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private static final String INVALID_VACANCY \u003d \"two\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final String VALID_JOB_TITLE \u003d GOOGLE.getJobTitle().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final String VALID_COMPANY_NAME \u003d GOOGLE.getCompanyName().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final String VALID_PHONE \u003d GOOGLE.getPhone().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final String VALID_EMAIL \u003d GOOGLE.getEmail().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final String VALID_ADDRESS \u003d GOOGLE.getAddress().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d GOOGLE.getTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final String VALID_PRIORITY \u003d GOOGLE.getPriority().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private static final String VALID_VACANCY \u003d GOOGLE.getVacancy().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_validJobDetails_returnsJob() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonAdaptedJob job \u003d new JsonAdaptedJob(GOOGLE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(GOOGLE, job.toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_invalidJobTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonAdaptedJob job \u003d new JsonAdaptedJob(INVALID_JOB_TITLE, VALID_COMPANY_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_PRIORITY, VALID_VACANCY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_invalidCompanyName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonAdaptedJob job \u003d new JsonAdaptedJob(VALID_JOB_TITLE, INVALID_COMPANY_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_PRIORITY, VALID_VACANCY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_nullJobTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonAdaptedJob job \u003d new JsonAdaptedJob(null, VALID_COMPANY_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_PRIORITY, VALID_VACANCY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"title\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_nullCompanyName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonAdaptedJob job \u003d new JsonAdaptedJob(VALID_JOB_TITLE, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                VALID_TAGS, VALID_PRIORITY, VALID_VACANCY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"company name\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonAdaptedJob job \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new JsonAdaptedJob(VALID_JOB_TITLE, VALID_COMPANY_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                        VALID_TAGS, VALID_PRIORITY, VALID_VACANCY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonAdaptedJob job \u003d new JsonAdaptedJob(VALID_JOB_TITLE, VALID_COMPANY_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_PRIORITY, VALID_VACANCY);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonAdaptedJob job \u003d new JsonAdaptedJob(VALID_JOB_TITLE, VALID_COMPANY_NAME, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_PRIORITY, VALID_VACANCY);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonAdaptedJob job \u003d new JsonAdaptedJob(VALID_JOB_TITLE, VALID_COMPANY_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_PRIORITY, VALID_VACANCY);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonAdaptedJob job \u003d new JsonAdaptedJob(VALID_JOB_TITLE, VALID_COMPANY_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                INVALID_ADDRESS, VALID_TAGS, VALID_PRIORITY, VALID_VACANCY);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonAdaptedJob job \u003d new JsonAdaptedJob(VALID_JOB_TITLE, VALID_COMPANY_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                VALID_TAGS, VALID_PRIORITY, VALID_VACANCY);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonAdaptedJob job \u003d new JsonAdaptedJob(VALID_JOB_TITLE, VALID_COMPANY_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                VALID_ADDRESS, invalidTags, VALID_PRIORITY, VALID_VACANCY);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, job::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_invalidPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonAdaptedJob job \u003d new JsonAdaptedJob(VALID_JOB_TITLE, VALID_COMPANY_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, INVALID_PRIORITY, VALID_VACANCY);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_nullPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonAdaptedJob job \u003d new JsonAdaptedJob(VALID_JOB_TITLE, VALID_COMPANY_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, null, VALID_VACANCY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void toModelType_invalidVacancy_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        JsonAdaptedJob job \u003d new JsonAdaptedJob(VALID_JOB_TITLE, VALID_COMPANY_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            VALID_ADDRESS, VALID_TAGS, VALID_PRIORITY, INVALID_VACANCY);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        String expectedMessage \u003d Vacancy.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void toModelType_nullVacancy_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        JsonAdaptedJob job \u003d new JsonAdaptedJob(VALID_JOB_TITLE, VALID_COMPANY_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            VALID_ADDRESS, VALID_TAGS, VALID_PRIORITY, null);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Vacancy.class.getSimpleName());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-erm": 32,
      "ameliatjy": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.BlacklistStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Experience;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Salary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.UrlLink;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \"1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String INVALID_EXPERIENCE \u003d \"twenty five\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String INVALID_DATE \u003d \"12 July 2020\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String INVALID_BLACKLIST_STATUS \u003d \"yes\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String INVALID_URL_LINK \u003d \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String INVALID_SALARY \u003d \"-90\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddressOptional().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String VALID_EXPERIENCE \u003d BENSON.getExperience().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String VALID_DATE \u003d BENSON.getDateOfApplication().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String VALID_BLACKLIST_STATUS \u003d BENSON.getBlacklistStatus().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String VALID_URL_LINK \u003d BENSON.getUrlLinkOptional().get().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String VALID_SALARY \u003d BENSON.getSalaryOptional().get().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_EXPERIENCE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        VALID_DATE, VALID_BLACKLIST_STATUS, VALID_ADDRESS, VALID_URL_LINK, VALID_SALARY, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_EXPERIENCE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                VALID_DATE, VALID_BLACKLIST_STATUS, VALID_ADDRESS, VALID_URL_LINK, VALID_SALARY, VALID_TAGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_EXPERIENCE, VALID_DATE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        VALID_BLACKLIST_STATUS, VALID_ADDRESS, VALID_URL_LINK, VALID_SALARY, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_EXPERIENCE, VALID_DATE,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        VALID_BLACKLIST_STATUS, VALID_ADDRESS, VALID_URL_LINK, VALID_SALARY, VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_EXPERIENCE, VALID_DATE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        VALID_BLACKLIST_STATUS, VALID_ADDRESS, VALID_URL_LINK, VALID_SALARY, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_EXPERIENCE, VALID_DATE,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        VALID_BLACKLIST_STATUS, VALID_ADDRESS, VALID_URL_LINK, VALID_SALARY, VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void toModelType_invalidExperience_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_EXPERIENCE, VALID_DATE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        VALID_BLACKLIST_STATUS, VALID_ADDRESS, VALID_URL_LINK, VALID_SALARY, VALID_TAGS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d Experience.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void toModelType_nullExperience_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_DATE,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        VALID_BLACKLIST_STATUS, VALID_ADDRESS, VALID_URL_LINK, VALID_SALARY, VALID_TAGS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Experience.class.getSimpleName());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_EXPERIENCE, null,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        VALID_BLACKLIST_STATUS, VALID_ADDRESS, VALID_URL_LINK, VALID_SALARY, VALID_TAGS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Date of Application\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_EXPERIENCE, INVALID_DATE,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        VALID_BLACKLIST_STATUS, VALID_ADDRESS, VALID_URL_LINK, VALID_SALARY, VALID_TAGS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void toModelType_invalidBlacklistStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_EXPERIENCE, VALID_DATE,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        INVALID_BLACKLIST_STATUS, VALID_ADDRESS, VALID_URL_LINK, VALID_SALARY, VALID_TAGS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d BlacklistStatus.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_EXPERIENCE, VALID_DATE,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        VALID_BLACKLIST_STATUS, INVALID_ADDRESS, VALID_URL_LINK, VALID_SALARY, VALID_TAGS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void toModelType_invalidUrlLink_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_EXPERIENCE, VALID_DATE,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        VALID_BLACKLIST_STATUS, VALID_ADDRESS, INVALID_URL_LINK, VALID_SALARY, VALID_TAGS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d UrlLink.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void toModelType_invalidSalary_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_EXPERIENCE, VALID_DATE,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        VALID_BLACKLIST_STATUS, VALID_ADDRESS, VALID_URL_LINK, INVALID_SALARY, VALID_TAGS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String expectedMessage \u003d Salary.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_EXPERIENCE, VALID_DATE,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        VALID_BLACKLIST_STATUS, VALID_ADDRESS, VALID_URL_LINK, VALID_SALARY, invalidTags);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 90,
      "ameliatjy": 4,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonJobAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.FACEBOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.IRAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.MAYBANK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.JobAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyJobAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JsonJobAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonJobAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void readJobAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readJobAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private java.util.Optional\u003cReadOnlyJobAddressBook\u003e readJobAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return new JsonJobAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .readJobAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(readJobAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readJobAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void readJobAddressBook_invalidJobAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readJobAddressBook(\"invalidJobAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void readJobAddressBook_invalidAndValidJobAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readJobAddressBook(\"invalidAndValidJobAddressBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void readAndSaveJobAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobAddressBook original \u003d getTypicalJobAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonJobAddressBookStorage jsonJobAddressBookStorage \u003d new JsonJobAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        jsonJobAddressBookStorage.saveJobAddressBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        ReadOnlyJobAddressBook readBack \u003d jsonJobAddressBookStorage.readJobAddressBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(original, new JobAddressBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        original.addJob(MAYBANK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        original.removeJob(FACEBOOK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        jsonJobAddressBookStorage.saveJobAddressBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        readBack \u003d jsonJobAddressBookStorage.readJobAddressBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(original, new JobAddressBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        original.addJob(IRAS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        jsonJobAddressBookStorage.saveJobAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        readBack \u003d jsonJobAddressBookStorage.readJobAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(original, new JobAddressBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void saveJobAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveJobAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private void saveJobAddressBook(ReadOnlyJobAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            new JsonJobAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    .saveJobAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void saveJobAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveJobAddressBook(new JobAddressBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonPersonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.PersonAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyPersonAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JsonPersonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPersonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void readPersonAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPersonAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPersonAddressBook\u003e readPersonAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return new JsonPersonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                .readPersonAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertFalse(readPersonAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPersonAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void readPersonAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPersonAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void readPersonAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                readPersonAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void readAndSavePersonAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonAddressBook original \u003d getTypicalPersonAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonPersonAddressBookStorage jsonAddressBookStorage \u003d new JsonPersonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        jsonAddressBookStorage.savePersonAddressBook(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        ReadOnlyPersonAddressBook readBack \u003d jsonAddressBookStorage.readPersonAddressBook(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(original, new PersonAddressBook(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        jsonAddressBookStorage.savePersonAddressBook(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readPersonAddressBook(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(original, new PersonAddressBook(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        jsonAddressBookStorage.savePersonAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readPersonAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(original, new PersonAddressBook(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void savePersonAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePersonAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private void savePersonAddressBook(ReadOnlyPersonAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            new JsonPersonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    .savePersonAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void savePersonAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePersonAddressBook(new PersonAddressBook(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 2,
      "ameliatjy": 34,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableJobAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.JobAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.testutil.TypicalJobs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JsonSerializableJobAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            \"JsonSerializableJobAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final Path TYPICAL_JOBS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalJobsAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final Path INVALID_JOB_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidJobAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final Path DUPLICATE_JOB_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateJobAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_typicalJobsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonSerializableJobAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_JOBS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                JsonSerializableJobAddressBook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobAddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JobAddressBook typicalJobsAddressBook \u003d TypicalJobs.getTypicalJobAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(addressBookFromFile, typicalJobsAddressBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_invalidJobFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonSerializableJobAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_JOB_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                JsonSerializableJobAddressBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void toModelType_duplicateJobs_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonSerializableJobAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_JOB_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                JsonSerializableJobAddressBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableJobAddressBook.MESSAGE_DUPLICATE_JOB,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializablePersonAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.PersonAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class JsonSerializablePersonAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            \"JsonSerializablePersonAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonSerializablePersonAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                JsonSerializablePersonAddressBook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        PersonAddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonAddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalPersonAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonSerializablePersonAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                JsonSerializablePersonAddressBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        JsonSerializablePersonAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                JsonSerializablePersonAddressBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePersonAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 1,
      "ameliatjy": 12,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        userPrefs.setPersonAddressBookFilePath(Paths.get(\"personaddressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        userPrefs.setJobAddressBookFilePath(Paths.get(\"jobaddressbook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 2,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.testutil.TypicalJobs.getTypicalJobAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.JobAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.PersonAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.ReadOnlyJobAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.ReadOnlyPersonAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JsonPersonAddressBookStorage personAddressBookStorage \u003d new JsonPersonAddressBookStorage("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "                getTempFilePath(\"pab\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JsonJobAddressBookStorage jobAddressBookStorage \u003d new JsonJobAddressBookStorage(getTempFilePath(\"jab\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        storageManager \u003d new StorageManager(personAddressBookStorage, jobAddressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void personAddressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonAddressBook original \u003d getTypicalPersonAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        storageManager.savePersonAddressBook(original);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        ReadOnlyPersonAddressBook retrieved \u003d storageManager.readPersonAddressBook().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(original, new PersonAddressBook(retrieved));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void getPersonAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertNotNull(storageManager.getPersonAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void jobAddressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-erm"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-erm"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-erm"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-erm"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        JobAddressBook original \u003d getTypicalJobAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        storageManager.saveJobAddressBook(original);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        ReadOnlyJobAddressBook retrieved \u003d storageManager.readJobAddressBook().get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertEquals(original, new JobAddressBook(retrieved));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public void getJobAddressBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        assertNotNull(storageManager.getJobAddressBookFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 6,
      "g-erm": 22,
      "ameliatjy": 6,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditJobDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditJobCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditJobCommand.EditJobDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.CompanyName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Vacancy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * A utility class to help with building EditJobDescriptor objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class EditJobDescriptorBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private EditJobCommand.EditJobDescriptor descriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditJobDescriptorBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor \u003d new EditJobDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditJobDescriptorBuilder(EditJobDescriptor descriptor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.descriptor \u003d new EditJobDescriptor(descriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Returns an {@code EditJobDescriptor} with fields containing {@code job}\u0027s details"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditJobDescriptorBuilder(Job job) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor \u003d new EditJobDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setJobTitle(job.getJobTitle());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setCompanyName(job.getCompanyName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setPhone(job.getPhone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setEmail(job.getEmail());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setAddress(job.getAddress());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setPriority(job.getPriority());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        descriptor.setVacancy(job.getVacancy());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setTags(job.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code JobTitle} of the {@code EditJobDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditJobDescriptorBuilder withJobTitle(String jobTitle) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setJobTitle(new Name(jobTitle));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code CompanyName} of the {@code EditJobDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditJobDescriptorBuilder withCompanyName(String companyName) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        descriptor.setCompanyName(new CompanyName(companyName));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditJobDescriptor} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditJobDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code Email} of the {@code EditJobDescriptor} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditJobDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code Address} of the {@code EditJobDescriptor} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditJobDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code Priority} of the {@code EditJobDescriptor} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditJobDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setPriority(new Priority(priority));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Sets the {@code Vacancy} of the {@code EditJobDescriptor} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public EditJobDescriptorBuilder withVacancy(String vacancy) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        descriptor.setVacancy(new Vacancy(vacancy));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditJobDescriptor}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditJobDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditJobDescriptor build() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 106,
      "raythx98": 2,
      "g-erm": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.BlacklistStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Experience;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Salary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.UrlLink;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setExperience(person.getExperience());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setDateOfApplication(person.getDateOfApplication());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setBlackListStatus(person.getBlacklistStatus());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setAddressOptional(person.getAddressOptional());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setUrlLinkOptional(person.getUrlLinkOptional());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setSalaryOptional(person.getSalaryOptional());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code Experience} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditPersonDescriptorBuilder withExperience(String experience) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setExperience(new Experience(experience));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code Date} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditPersonDescriptorBuilder withDateOfApplication(String dateOfApplication) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setDateOfApplication(new Date(dateOfApplication));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code BlacklistStatus} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditPersonDescriptorBuilder withBlacklistStatus(String isBlacklisted) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setBlackListStatus(new BlacklistStatus(isBlacklisted));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setAddressOptional(Optional.of(new Address(address)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code urlLink} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditPersonDescriptorBuilder withUrlLink(String link) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setUrlLinkOptional(Optional.of(new UrlLink(link)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code salary} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public EditPersonDescriptorBuilder withSalary(String salary) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.setSalaryOptional(Optional.of(new Salary(salary)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 50,
      "ameliatjy": 5,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/JobAddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.JobAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * A utility class to help with building JobAddressBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": " *     {@code JobAddressBook jab \u003d new JobAddressBookBuilder().withJob(\"IRAS\", \"MAYBANK\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class JobAddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private JobAddressBook jobAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public JobAddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        jobAddressBook \u003d new JobAddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public JobAddressBookBuilder(JobAddressBook jobAddressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.jobAddressBook \u003d jobAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Adds a new {@code Job} to the {@code JobAddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public JobAddressBookBuilder withJob(Job job) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        jobAddressBook.addJob(job);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public JobAddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return jobAddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/JobBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.CompanyName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Vacancy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * A utility class to help with building Job objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class JobBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String DEFAULT_JOB_TITLE \u003d \"Teaching Assistant\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String DEFAULT_COMPANY_NAME \u003d \"NUS\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"65355255\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"TA@nus.edu.sg\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"21 Lower Kent Ridge Rd, Singapore 119077\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"moderate\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static final String DEFAULT_VACANCY \u003d \"2\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private Name jobTitle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private CompanyName companyName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    private Vacancy vacancy;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Creates a {@code Job} with the default details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public JobBuilder() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        jobTitle \u003d new Name(DEFAULT_JOB_TITLE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        companyName \u003d new CompanyName(DEFAULT_COMPANY_NAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        vacancy \u003d new Vacancy(DEFAULT_VACANCY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Initializes the JobBuilder with the data of {@code jobToCopy}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public JobBuilder(Job jobToCopy) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        jobTitle \u003d jobToCopy.getJobTitle();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        companyName \u003d jobToCopy.getCompanyName();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        phone \u003d jobToCopy.getPhone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        email \u003d jobToCopy.getEmail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        address \u003d jobToCopy.getAddress();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(jobToCopy.getTags());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        priority \u003d jobToCopy.getPriority();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        vacancy \u003d jobToCopy.getVacancy();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Sets the {@code jobTitle} of the {@code Job} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public JobBuilder withJobTitle(String jobTitle) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.jobTitle \u003d new Name(jobTitle);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Sets the {@code companyName} of the {@code Job} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public JobBuilder withCompanyName(String companyName) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.companyName \u003d new CompanyName(companyName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Job} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public JobBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Sets the {@code Address} of the {@code Job} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public JobBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Sets the {@code Phone} of the {@code Job} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public JobBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Sets the {@code Email} of the {@code Job} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public JobBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Sets the {@code Priority} of the {@code Job} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public JobBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Sets the {@code Vacancy} of the {@code Job} that we are building."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public JobBuilder withVacancy(String vacancy) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        this.vacancy \u003d new Vacancy(vacancy);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public Job build() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return new Job(jobTitle, companyName, phone, email, address, tags, priority, vacancy);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 108,
      "g-erm": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/JobUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-erm"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOB_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VACANCY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.logic.commands.AddJobCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.logic.commands.EditJobCommand.EditJobDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-erm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-erm"
        },
        "content": " * A utility class for Job."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-erm"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-erm"
        },
        "content": "public class JobUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Returns an add command string for adding the {@code job}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static String getAddJobCommand(Job job) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return AddJobCommand.COMMAND_WORD + \" \" + getJobDetails(job);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Returns the part of command string for the given {@code job}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static String getJobDetails(Job job) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        sb.append(PREFIX_JOB_TITLE + job.getJobTitle().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        sb.append(PREFIX_COMPANY_NAME + job.getCompanyName().fullCompanyName + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        sb.append(PREFIX_PHONE + job.getPhone().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        sb.append(PREFIX_EMAIL + job.getEmail().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        sb.append(PREFIX_ADDRESS + job.getAddress().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        job.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        sb.append(PREFIX_PRIORITY + job.getPriority().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        sb.append(PREFIX_VACANCY + job.getVacancy().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-erm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     * Returns the part of command string for the given {@code EditJobDescriptor}\u0027s details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-erm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    public static String getEditJobDescriptorDetails(EditJobDescriptor descriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        descriptor.getJobTitle().ifPresent("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            jobTitle -\u003e sb.append(PREFIX_JOB_TITLE).append(jobTitle.fullName).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        descriptor.getCompanyName().ifPresent("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            companyName -\u003e sb.append(PREFIX_COMPANY_NAME).append(companyName.fullCompanyName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-erm"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        descriptor.getPriority().ifPresent(priority -\u003e sb.append(PREFIX_PRIORITY).append(priority.value).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        descriptor.getVacancy().ifPresent(vacancy -\u003e sb.append(PREFIX_VACANCY).append(vacancy.value).append(\" \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-erm"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-erm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-erm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 2,
      "g-erm": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonAddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.PersonAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * A utility class to help with building PersonAddressBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class PersonAddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private PersonAddressBook personAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public PersonAddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        personAddressBook \u003d new PersonAddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public PersonAddressBookBuilder(PersonAddressBook personAddressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        this.personAddressBook \u003d personAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public PersonAddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        personAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public PersonAddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return personAddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.BlacklistStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Experience;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.Salary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import seedu.address.model.information.UrlLink;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String DEFAULT_EXPERIENCE \u003d \"5.0\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String DEFAULT_DATE_OF_APPLICATION \u003d \"02-10-19\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static final String DEFAULT_BLACKLIST_STATUS \u003d \"false\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Experience experience;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Date dateOfApplication;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private BlacklistStatus blacklistStatus;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Optional\u003cAddress\u003e addressOptional;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Optional\u003cUrlLink\u003e urlLinkOptional;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Optional\u003cSalary\u003e salaryOptional;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        experience \u003d new Experience(DEFAULT_EXPERIENCE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        dateOfApplication \u003d new Date(DEFAULT_DATE_OF_APPLICATION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        blacklistStatus \u003d new BlacklistStatus(DEFAULT_BLACKLIST_STATUS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        addressOptional \u003d Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        urlLinkOptional \u003d Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        salaryOptional \u003d Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        experience \u003d personToCopy.getExperience();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        dateOfApplication \u003d personToCopy.getDateOfApplication();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        blacklistStatus \u003d personToCopy.getBlacklistStatus();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        addressOptional \u003d personToCopy.getAddressOptional();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        urlLinkOptional \u003d personToCopy.getUrlLinkOptional();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        salaryOptional \u003d personToCopy.getSalaryOptional();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code Experience} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public PersonBuilder withExperience(String experience) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.experience \u003d new Experience(experience);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code Date} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public PersonBuilder withDateOfApplication(String dateOfApplication) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.dateOfApplication \u003d new Date(dateOfApplication);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code BlacklistStatus} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public PersonBuilder withBlacklistStatus(String isBlacklisted) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.blacklistStatus \u003d new BlacklistStatus(isBlacklisted);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code Optional\u003cAddress\u003e} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.addressOptional \u003d Optional.of(new Address(address));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code Optional\u003cUrlLink\u003e} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public PersonBuilder withUrlLink(String link) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.urlLinkOptional \u003d Optional.of(new UrlLink(link));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Sets the {@code Optional\u003cSalary\u003e} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public PersonBuilder withSalary(String salary) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.salaryOptional \u003d Optional.of(new Salary(salary));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Builds a Person using the attributes."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new Person(name, phone, email, experience, dateOfApplication,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                blacklistStatus, addressOptional, urlLinkOptional, salaryOptional, tags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 80,
      "ameliatjy": 5,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLACKLIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_APPLICATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPERIENCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL_LINK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.AddPersonCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static String getAddPersonCommand(Person person) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return AddPersonCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        sb.append(PREFIX_EXPERIENCE + person.getExperience().toString() + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        sb.append(PREFIX_DATE_OF_APPLICATION + person.getDateOfApplication().dateString + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        person.getAddressOptional().ifPresent(address -\u003e sb.append(PREFIX_SALARY + address.value + \" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        person.getUrlLinkOptional().ifPresent(link -\u003e sb.append(PREFIX_URL_LINK + link.value + \" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        person.getSalaryOptional().ifPresent(salary -\u003e sb.append(PREFIX_SALARY + salary.toString() + \" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        sb.append(PREFIX_BLACKLIST + person.getBlacklistStatus().toString() + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.getExperience().ifPresent(experience -\u003e sb.append(PREFIX_EXPERIENCE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .append(experience.toString()).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.getDateOfApplication().ifPresent(date -\u003e sb.append(PREFIX_DATE_OF_APPLICATION)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .append(date.dateString).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.getBlackListStatus().ifPresent(status -\u003e sb"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                .append(PREFIX_BLACKLIST).append(status.toString()).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.getAddressOptional().ifPresent(addressOptional -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            sb.append(PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            addressOptional.ifPresent(address -\u003e sb.append(address.value));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.getUrlLinkOptional().ifPresent(linkOptional -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            sb.append(PREFIX_URL_LINK);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            linkOptional.ifPresent(link -\u003e sb.append(link.value));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        descriptor.getSalaryOptional().ifPresent(salaryOptional -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            sb.append(PREFIX_SALARY);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            salaryOptional.ifPresent(salary -\u003e sb.append(salary.toString()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 35,
      "raythx98": 4,
      "ameliatjy": 1,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 1,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final Index INDEX_FIRST_JOB \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final Index INDEX_SECOND_JOB \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final Index INDEX_THIRD_JOB \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 3,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalJobs.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raythx98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_IRAS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAYBANK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_NAME_IRAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_NAME_MAYBANK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_IRAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MAYBANK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOB_TITLE_IRAS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOB_TITLE_MAYBANK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_IRAS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MAYBANK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_IRAS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_MAYBANK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_IRAS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MAYBANK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VACANCY_IRAS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-erm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VACANCY_MAYBANK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.JobAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raythx98"
        },
        "content": "import seedu.address.model.information.Job;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raythx98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raythx98"
        },
        "content": " * A utility class containing a list of {@code Job} objects to be used in tests."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raythx98"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raythx98"
        },
        "content": "public class TypicalJobs {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final Job FACEBOOK \u003d new JobBuilder().withJobTitle(\"Toilet Bowl Cleaner\").withCompanyName(\"Facebook\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            .withAddress(\"1 Hacker Way, Menlo Park, CA 94025\").withEmail(\"recruitment@facebook.com\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            .withPhone(\"67438807\").withTags(\"Cleaner\").withPriority(\"low\").withVacancy(\"1\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final Job APPLE \u003d new JobBuilder().withJobTitle(\"Wall Painter\").withCompanyName(\"Apple\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            .withAddress(\"1 Apple Park Way, Cupertino, California\").withEmail(\"recruitment@apple.com\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            .withPhone(\"69272758\").withTags(\"Cleaner\").withPriority(\"low\").withVacancy(\"3\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final Job AMAZON \u003d new JobBuilder().withJobTitle(\"Plant Waterer\").withCompanyName(\"Amazon\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            .withAddress(\"16 Forest Way, Seattle, Washington\").withEmail(\"recruitment@amazon.com\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            .withPhone(\"63210283\").withTags(\"Cleaner\").withPriority(\"low\").withVacancy(\"2\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final Job NETFLIX \u003d new JobBuilder().withJobTitle(\"Glass Wiper\").withCompanyName(\"Netflix\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            .withAddress(\"19 Netflix Lane, Los Gatos, California\").withEmail(\"recruitment@netflix.com\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            .withPhone(\"61031282\").withTags(\"Cleaner\").withPriority(\"moderate\").withVacancy(\"5\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final Job GOOGLE \u003d new JobBuilder().withJobTitle(\"Software Engineer\").withCompanyName(\"Google\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            .withAddress(\"1600 Google Way, Mountain View, California\").withEmail(\"recruitment@google.com\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            .withPhone(\"62492021\").withTags(\"SE\").withPriority(\"moderate\").withVacancy(\"2\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final Job NUS \u003d new JobBuilder().withJobTitle(\"CS2103T Lecturer\").withCompanyName(\"NUS\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            .withAddress(\"21 Lower Kent Ridge Rd, Singapore 119077\").withEmail(\"recruitment@nus.edu.sg\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            .withPhone(\"62624417\").withTags(\"Teaching\").withPriority(\"high\").withVacancy(\"1\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    // Manually added - Job\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final Job IRAS \u003d new JobBuilder().withJobTitle(VALID_JOB_TITLE_IRAS)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            .withCompanyName(VALID_COMPANY_NAME_IRAS).withPhone(VALID_PHONE_IRAS)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            .withEmail(VALID_EMAIL_IRAS).withAddress(VALID_ADDRESS_IRAS).withTags(VALID_TAG_IRAS)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            .withPriority(VALID_PRIORITY_IRAS).withVacancy(VALID_VACANCY_IRAS).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final Job MAYBANK \u003d new JobBuilder().withJobTitle(VALID_JOB_TITLE_MAYBANK)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            .withCompanyName(VALID_COMPANY_NAME_MAYBANK).withPhone(VALID_PHONE_MAYBANK)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            .withEmail(VALID_EMAIL_MAYBANK).withAddress(VALID_ADDRESS_MAYBANK).withTags(VALID_TAG_MAYBANK)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-erm"
        },
        "content": "            .withPriority(VALID_PRIORITY_MAYBANK).withVacancy(VALID_VACANCY_MAYBANK).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    private TypicalJobs() {} // prevents instantiation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     * Returns a {@code JobAddressBook} with all the typical jobs."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raythx98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static JobAddressBook getTypicalJobAddressBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        JobAddressBook jab \u003d new JobAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        for (Job job : getTypicalJobs()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            jab.addJob(job);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return jab;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raythx98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static List\u003cJob\u003e getTypicalJobs() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FACEBOOK, APPLE, AMAZON, NETFLIX, GOOGLE, NUS));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raythx98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raythx98": 66,
      "g-erm": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BLACKLIST_STATUS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPERIENCE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPERIENCE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALARY_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_URL_LINK_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.PersonAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import seedu.address.model.information.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withEmail(\"alice@example.com\").withDateOfApplication(\"02-10-19\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withPhone(\"94351253\").withExperience(\"3.5\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withExperience(\"2.0\").withDateOfApplication(\"12-01-21\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withSalary(\"13000\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withUrlLink(\"linkedin.com\").withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withSalary(\"4500\").withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withExperience(\"0.5\").withDateOfApplication(\"02-01-19\").withBlacklistStatus(\"true\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withSalary(\"3000\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withExperience(\"0\").withUrlLink(\"tinder.com\").withTags(\"friends\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withDateOfApplication(\"1-10-20\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withExperience(\"1.5\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withDateOfApplication(\"20-12-20\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withSalary(\"2900\").withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withExperience(\"10\").withDateOfApplication(\"12-12-12\").withBlacklistStatus(\"true\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withSalary(\"8888\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withExperience(\"1\").withUrlLink(\"github.com\").withDateOfApplication(\"11-08-20\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withDateOfApplication(\"01-01-01\").withEmail(\"stefan@example.com\").withAddress(\"little india\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withExperience(\"4.4\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withExperience(\"20\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withDateOfApplication(\"12-12-12\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withExperience(VALID_EXPERIENCE_AMY).withDateOfApplication(VALID_DATE_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withUrlLink(VALID_URL_LINK_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withSalary(VALID_SALARY_BOB).withExperience(VALID_EXPERIENCE_BOB).withDateOfApplication(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            .withBlacklistStatus(VALID_BLACKLIST_STATUS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raythx98"
        },
        "content": "    public static PersonAddressBook getTypicalPersonAddressBook() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        PersonAddressBook pab \u003d new PersonAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raythx98"
        },
        "content": "            pab.addPerson(person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raythx98"
        },
        "content": "        return pab;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 32,
      "raythx98": 4,
      "ameliatjy": 2,
      "-": 54
    }
  }
]
