[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "# ATAS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W16-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W16-4/tp/actions)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* **Addendum for Teaching Assistants (ATAS)** is a desktop applicaton that aims to make users\u0027 teaching experience effortless. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* In the current version, ATAS targets NUS Teaching Assistants (TA) that are teaching the CS1010S module."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* With ATAS, users can mark attendance, track students\u0027 progress, send emails to students and many more."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* [User Guide](/docs/UserGuide.md)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* [Developer Guide](/docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* [About Us](/docs/AboutUs.md)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "## Acknowledgments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "nweiyue": 15,
      "-": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "You can reach us at the email `e0406158@u.nus.edu`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "### Alvin Chee"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003cimg src\u003d\"images/codingcookierookie.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "[[github](https://github.com/CodingCookieRookie)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* Role: Integrator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* Responsibilities: Ensures that all the classes that are done by all members are integrated and work as intended."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "### Marcus Tan"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003cimg src\u003d\"images/marcustw.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "[[github](http://github.com/marcustw)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* Role: Testing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* Responsibilities: Looks after testing and ensures the testing of the project is done properly and on time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### Masagca Eris Jacey Dumasis"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003cimg src\u003d\"images/erisjacey.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "[[github](http://github.com/erisjacey)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* Role: Team Lead; Code Quality; Deliverables and Deadlines"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   * Responsible for overall project coordination"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   * Looks after code quality, ensures adherance to coding standards, etc."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   * Ensures project deliverables are done on time and in the right format "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "### Ngoh Wei Yue"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003cimg src\u003d\"images/nweiyue.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "[[github](http://github.com/nweiyue)]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* Role: Documentation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* Responsibilities: Looks after the quality of various project documents like user and developer guides"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "### Zhang Sheng Yang"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cimg src\u003d\"images/yuunokun.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "[[github](http://github.com/YuunoKun)]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "* Role: Tech lead"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "* Responsibilities: Coding"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 5,
      "CodingCookieRookie": 6,
      "MarcusTw": 12,
      "YuunoKun": 4,
      "-": 33,
      "erisjacey": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [**Setting up, getting started**](#su_gs)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [**Design**](#design)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [Architecture](#architecture)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [UI component](#ui_component)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [Logic component](#logic_component)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [Model component](#model_component)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [Storage component](#storage_component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [Common classes](#common_classes)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [**Implementation**](#implementation)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [[Proposed] Undo/redo feature](#undo_redo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * [Proposed Implementation](#proposed_implementation)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * [Design consideration:](#design_consideration)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "       * [Aspect: How undo \u0026 redo executes](#aspect_undo_redo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [[Proposed] Data archiving](#data_archiving)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [**Documentation, logging, testing, configuration, dev-ops**](#documentation_etc)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [**Appendix: Requirements**](#appendix_requirements)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [Product scope](#product_scope)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [User stories](#user_stories)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "  * [Use cases](#use_cases)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "  * [Non-Functional Requirements](#nfr)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "  * [Glossary](#glossary)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [**Appendix: Instructions for manual testing**](#appendix_manual_testing)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [Launch and shutdown](#launch_shutdown)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [Deleting a person](#deleting_a_person)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [Saving data](#saving_data)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"su_gs\"\u003e\u003c/a\u003e**Setting up, getting started**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"design\"\u003e\u003c/a\u003e**Design**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"architecture\"\u003e\u003c/a\u003eArchitecture"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"ui_component\"\u003e\u003c/a\u003eUI component"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"logic_component\"\u003e\u003c/a\u003eLogic component"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"model_component\"\u003e\u003c/a\u003eModel component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"storage_component\"\u003e\u003c/a\u003eStorage component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"common_classes\"\u003e\u003c/a\u003eCommon classes"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"implementation\"\u003e\u003c/a\u003e**Implementation**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"undo_redo\"\u003e\u003c/a\u003e\\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### \u003ca name\u003d\"proposed_implementation\"\u003e\u003c/a\u003eProposed Implementation"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### \u003ca name\u003d\"design_consideration\"\u003e\u003c/a\u003eDesign consideration:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "##### \u003ca name\u003d\"aspect_undo_redo\"\u003e\u003c/a\u003eAspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * Pros: Easy to implement."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": " itself."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": " * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": " * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"data_archiving\"\u003e\u003c/a\u003e\\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"documentation_etc\"\u003e\u003c/a\u003e**Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"appendix_requirements\"\u003e\u003c/a\u003e**Appendix: Requirements**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"product_scope\"\u003e\u003c/a\u003eProduct scope"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Bob is a passionate CS1010 TA and he likes to track his students’ progress."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Bob currently uses Excel to keep track of his student’s particulars."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Bob finds the features on Excel clunky at times and he finds them difficult to learn."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Bob is looking for an application with a sleeker and cleaner UI so he doesn’t have to remember where the different features in Excel are."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Bob has limited memory in his computer and wants to install smaller softwares."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Bob is a fast typist."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Bob hates to move his mouse at all (to save file, to categorise data fields and student data)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* Bob uses a laptop and doesn’t have a mouse with him all the time(or he doesn’t have a place to use his mouse when on the bus or mrt)."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Manage students faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Sleeker and cleaner UI, less clunky"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Less memory"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Intuitive command-line interface - easy to learn and pick up, especially for technologically savvy individuals"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* CS student-friendly"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Potential Features:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Mass sending of emails/files"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Import/export data files from Excel, csv files"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Track student’s progress (assignments, tests, class participation)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Record student’s attendance"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Profile pictures for recognisability"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Schedule consultations/Zoom meeting"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Automate formation of Telegram groups"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"user_stories\"\u003e\u003c/a\u003eUser stories"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ----------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* * *`  | user                                       | see usage instructions         | refer to instructions when I forget how to use the App                  |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* * *`  | user                                       | add a new student              |                                                                         |"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* * *`  | user                                       | delete a student               | remove students no longer taking the module                             |"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* * *`  | user                                       | track all students in my class | so that I will know who is missing from my class                        |"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* * *`  | user                                       | find a student by name         | locate details of students without having to go through the entire list |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* * *`  | user                                       | hide private contact details   | minimize chance of someone else seeing them by accident                 |"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* * *`  | user with many students in my class        | sort students by name          | locate a student easily                                                 |"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | user                                       | track my students\u0027 attendance  | take note of the tutorial participation for each student                |"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | user who has trouble putting face to name  | easily identify each student with a profile photo | recognise students through their faces more easily   |"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | user who yearns for efficiency due to limited class time | have a random number generator | get a random student to answer my question instead of having to rely on online generators |"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | user                                       | add non-registered Christian names or nicknames to my students | remember them more easily               |"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | user                                       | send important emails to my students | not have to rely on Microsoft Outlook/LumiNUS                     |"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | user                                       | have diagrams tracking students\u0027 progress | tell from one look that a student is not catching up with lecture material |"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | tutor who can be quite forgetful           | create a list of announcements | remember to convey them to my students                                  |"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | tutor who wants to protect the particulars of my students | encrypt files with passwords | keep the module and students\u0027 data safe                    |"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | tutor who often overshoots the time allocated for my lesson | be reminded at certain intervals | be on track throughout the lesson                    |"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | tutor who wants the class to participate actively in class discussions | quickly record who has/has not spoken yet | call on those who haven\u0027t spoken for subsequent questions |"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `*    `  | user who likes customization               | customize my own keyboard shortcuts |                                                                    |"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `*    `  | user who likes colors                      | customize the UI to whatever color scheme I want | enjoy using the App more                              |"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "### \u003ca name\u003d\"use_cases\"\u003e\u003c/a\u003eUse cases"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "(For all use cases below, the **System** is the `ATAS` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Use case: UC01 - Add a student**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. User requests to add a student with specified Matriculation number and NUS email, as well as any additional tags (if any)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. ATAS adds the student"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Use case: UC02 - Delete a student**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  User requests to list students"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  ATAS shows a list of students"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  User requests to delete a specific student in the list"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  ATAS deletes the student"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "  * 3a1. ATAS shows an error message."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Use case: UC03 - Clear the class list**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  User requests to clear the class list"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  ATAS clears the class list"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Use case: UC04 - List the registered students**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. User requests to see the list of students that have been added to ATAS"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. ATAS shows the list of students"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Use case: UC05 - Find a student**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  User requests to find a student with one or more keywords"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  ATAS searches for students’ names that contain any of the keywords"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  ATAS shows the filtered list of students to User"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Use case: UC06 - Exit ATAS**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. User requests to exit ATAS"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. ATAS closes"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "### \u003ca name\u003d\"nfr\"\u003e\u003c/a\u003eNon-Functional Requirements"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. Should be for a single user and not a multi-user product."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. Should not depend on remote servers."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. Should be able to function without having to rely on being connected to a network."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. Should be able to work without requiring an installer."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. Should not contain very large file sizes (JAR files - 100Mb, PDF files - 15Mb/file)."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "### \u003ca name\u003d\"glossary\"\u003e\u003c/a\u003eGlossary"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* **Matriculation number**: A unique alphanumeric number attributed to each NUS student. Follows the format A0123456X, where each digit can be from 0-9 and the last letter can be any alphabet A-Z"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"appendix_manual_testing\"\u003e\u003c/a\u003e**Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"launch_shutdown\"\u003e\u003c/a\u003eLaunch and shutdown"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "  1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "  1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "  1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "  1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"deleting_a_person\"\u003e\u003c/a\u003eDeleting a person"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "  1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "  1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "     Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "  1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "     Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "  1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "     Expected: Similar to previous."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"saving_data\"\u003e\u003c/a\u003eSaving data"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "  1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nweiyue": 77,
      "-": 310,
      "erisjacey": 90
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "ATAS is a **desktop app for managing students’ particulars, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type really quickly, ATAS will help you to manage your contacts and students’ particulars faster than traditional GUI apps."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [Quick start](#qs)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [Viewing help](#help) (coming soon)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [Adding a students](#add)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [Listing all students](#list)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [Locating students by name](#find)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [Deleting a student](#delete)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [Clearing all entries](#clear)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [Exiting the program](#exit)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [Saving data](#sd)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [User confirmation prompt](#ucp) (coming soon)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [FAQ](#faq)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [Command summary](#cs)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"qs\"\u003e\u003c/a\u003eQuick start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "2. Download the latest `atas.jar` from [here](https://github.com/AY2021S1-CS2103T-W16-4/tp/releases). "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for your ATAS."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   [insert image of GUI here]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * **`list`** : Lists out all the students."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * **`add n/John Cena e/thechamp@example.com`** : Adds a student named `John Cena` to the class list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * **`delete 3`** : Deletes the 3rd student shown in the current list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * **`clear`** : Deletes all the students."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * **`bye`** : Exits out of the application."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "6. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"features\"\u003e\u003c/a\u003eFeatures"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* The words in `UPPER_CASE` are placeholders to be replaced by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  e.g. in `add n/STUDENT_NAME` should be changed to `add n/John Cena`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Cena t/1F` or simply as `n/John Cena`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/1F`, `t/1F t/2G` etc."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  e.g. if the command specifies `n/NAME m/MATRICULATION_NUMBER`, `m/MATRICULATION_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"help\"\u003e\u003c/a\u003eViewing help : `help` (feature coming soon!)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "[insert help message image]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "help"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"add\"\u003e\u003c/a\u003eAdding a student : `add`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Adds a student to class list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "add n/NAME m/MATRICULATION_NUMBER e/NUS_EMAIL_ADDRESS [t/TAG]…"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ":bulb: **Tip:**\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "A student can have any number of tags (including 0)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* `add n/John Cena m/A0123456J e/thechamp@u.nus.edu`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* `add n/Alvina Handsome m/A0123456X e/handsome.alvina@u.nus.edu t/2G`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"list\"\u003e\u003c/a\u003eListing all students : `list`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Shows a list of all students in the current class list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"find\"\u003e\u003c/a\u003eLocating students by name: `find`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Finds students whose names contain any of the given keywords."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "find KEYWORD [MORE_KEYWORDS]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "````"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* The search is case-insensitive. e.g `john` will match `John`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* The order of the keywords does not matter. e.g. `John Cena` will match `Cena John`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Only full words will be matched e.g. `Jon` will not match `John` "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Students matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  e.g. `John Cena` will return `John Tan`, `Mark Cena`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* `find John` returns `john` and `John Cena`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* `find kent ridge` returns `Kent Tan` and `Mark Ridge`\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "[Insert image of an example of result of `find Cena`]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"delete\"\u003e\u003c/a\u003eDeleting a student : `delete`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "The user will be prompted to confirm their decision here."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "If yes: deletes the specified student from the class list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "delete INDEX"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Deletes the student at the specified `INDEX`."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* The index refers to the index number shown in the displayed class list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd person in the class list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "###  \u003ca name\u003d\"clear\"\u003e\u003c/a\u003eClearing all entries : `clear`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "The user will be prompted to confirm their decision here."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "If yes: removes all students from the class list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "clear"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "###  \u003ca name\u003d\"exit\"\u003e\u003c/a\u003eExiting the program : `bye`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "The user will be prompted to confirm their decision here."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "If yes: exits the application."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "bye"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "###  \u003ca name\u003d\"sd\"\u003e\u003c/a\u003eSaving the data"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Students’ data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"ucp\"\u003e\u003c/a\u003eUser confirmation prompt (feature coming soon!)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Prompts the user to confirm next operation"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Confirms the execution at the specified `INDEX`."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* `delete 3` is followed with `Are you sure you want to continue?`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* `clear` is followed with `Are you sure you want to continue?`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* `bye` is followed with `Are you sure you want to continue?`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"faq\"\u003e\u003c/a\u003eFAQ"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ATAS home folder."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"cs\"\u003e\u003c/a\u003eCommand summary"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Add** | `add n/NAME m/MATRICULATION_NUMBER e/NUS_EMAIL_ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/Rainer Lam m/A0123456C e/rainerlam@u.nus.edu`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find Justin Bieber`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Exit** | `bye`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 93,
      "erisjacey": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "// This comment is just to initiate the PR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "erisjacey": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_INVALID_CONFIRMATION_INPUT \u003d \"Confirmation input is invalid!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "MarcusTw": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return String.valueOf(zeroBasedIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 5,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student to the class. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + PREFIX_MATRICULATION + \"MATRICULATION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + PREFIX_MATRICULATION + \"A1234567X \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@u.nus.edu \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + PREFIX_TAG + \"absent \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + PREFIX_TAG + \"foreigner\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student already exists in the class\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 5,
      "YuunoKun": 4,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ClearCommand extends DangerousCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"ATAS has cleared all students from your list!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return \"Clear list\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 1,
      "MarcusTw": 6,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import seedu.address.ui.Tab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /** The application should switch tab. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private final Tab switchTab;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, Tab switchTab, boolean exit) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this.switchTab \u003d switchTab;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this(feedbackToUser, false, null, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public Tab getTab() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return switchTab;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public boolean isSwitchTab() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return switchTab !\u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean isConfirmationPage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u0026\u0026 switchTab \u003d\u003d otherCommandResult.switchTab"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, switchTab, exit);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 18,
      "MarcusTw": 4,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ConfirmCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public abstract class ConfirmCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final DangerousCommand dangerousCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmCommand(DangerousCommand dangerousCommand) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.dangerousCommand \u003d dangerousCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DangerousCommand getDangerousCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.dangerousCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ConfirmationAcceptCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Confirms an execution of a DangerousCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationAcceptCommand extends ConfirmCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Constructs a {@code ConfirmationAcceptCommand} with the specified DangerousCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmationAcceptCommand(DangerousCommand dangerousCommand) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(dangerousCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DangerousCommand dangerousCommand \u003d this.getDangerousCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(dangerousCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return dangerousCommand.execute(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (!(other instanceof ConfirmationAcceptCommand)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // calls for checks between the dangerousCommands"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DangerousCommand otherDangerousCommand \u003d ((ConfirmationAcceptCommand) other).getDangerousCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.getDangerousCommand().equals(otherDangerousCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ConfirmationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Confirms whether or not to execute a command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationCommand extends ConfirmCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_CONFIRMATION \u003d \"(yes/no)\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_CONFIRMATION_DELETE \u003d \"Delete %1$d? \" + MESSAGE_CONFIRMATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_CONFIRMATION_EDIT \u003d \"Edit %1$d? \" + MESSAGE_CONFIRMATION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_CONFIRMATION_CLEAR \u003d \"Clear list? \" + MESSAGE_CONFIRMATION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String ACCEPT_COMMAND_FULL \u003d \"yes\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String ACCEPT_COMMAND_SHORT \u003d \"y\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String REJECT_COMMAND_FULL \u003d \"no\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String REJECT_COMMAND_SHORT \u003d \"n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Constructs a {@code ConfirmationCommand} with the specified DangerousCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmationCommand(DangerousCommand dangerousCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(dangerousCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new CommandResult(String.format(\"%s? %s\", getDangerousCommand(), MESSAGE_CONFIRMATION));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmationAcceptCommand accept() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new ConfirmationAcceptCommand(getDangerousCommand());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmationRejectCommand reject() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new ConfirmationRejectCommand(getDangerousCommand());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (!(other instanceof ConfirmationCommand)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // calls for checks between the dangerousCommands"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DangerousCommand otherDangerousCommand \u003d ((ConfirmationCommand) other).getDangerousCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.getDangerousCommand().equals(otherDangerousCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ConfirmationRejectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Rejects the execution of a DangerousCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationRejectCommand extends ConfirmCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_REJECT_COMMAND \u003d \"%1$s is not executed\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Constructs a {@code ConfirmationRejectCommand} with the specified DangerousCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmationRejectCommand(DangerousCommand dangerousCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(dangerousCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DangerousCommand dangerousCommand \u003d this.getDangerousCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(dangerousCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REJECT_COMMAND, dangerousCommand.toString()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (!(other instanceof ConfirmationRejectCommand)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // calls for checks between the dangerousCommands"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DangerousCommand otherDangerousCommand \u003d ((ConfirmationRejectCommand) other).getDangerousCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.getDangerousCommand().equals(otherDangerousCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DangerousCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public abstract class DangerousCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DeleteCommand extends DangerousCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed class list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted student: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String oneBasedIndex \u003d String.valueOf(targetIndex.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return \"Delete \" + oneBasedIndex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "MarcusTw": 7,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import seedu.address.model.person.Matriculation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class EditCommand extends DangerousCommand {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the student identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"by the index number used in the displayed class list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"[\" + PREFIX_MATRICULATION + \"PHONE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + PREFIX_MATRICULATION + \"A7654321X \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@u.nus.edu\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited student: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student already exists in the class.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Creates an EditCommand to edit the person at specified Index."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param index The Index of the person in the filtered person list to edit."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param editPersonDescriptor The details to edit the person with."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String oneBasedIndex \u003d String.valueOf(index.getOneBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return \"Edit \" + oneBasedIndex;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Matriculation updatedMatriculation \u003d editPersonDescriptor.getMatriculation()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .orElse(personToEdit.getMatriculation());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new Person(updatedName, updatedMatriculation, updatedEmail, updatedTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        private Matriculation matriculation;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            setMatriculation(toCopy.matriculation);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, matriculation, email, tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void setMatriculation(Matriculation matriculation) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            this.matriculation \u003d matriculation;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public Optional\u003cMatriculation\u003e getMatriculation() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return Optional.ofNullable(matriculation);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    \u0026\u0026 getMatriculation().equals(e.getMatriculation())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 4,
      "MarcusTw": 11,
      "YuunoKun": 16,
      "-": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Bye bye most beautiful and smartest TA ever :(\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXIT_ACKNOWLEDGEMENT), false, null, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 1,
      "CodingCookieRookie": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 1,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, null, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "erisjacey": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import seedu.address.ui.Tab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Switches tab using the name of the destination tab."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Name of destination tab is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches to the specified tab (case-insensitive).\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Parameters: TAB_NAME (must be an existing tab)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" attendance\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_SWITCH_TAB_SUCCESS \u003d \"Switched to %1$s tab.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_INVALID_TAB \u003d \"Tab does not exist!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_ALREADY_ON_TAB \u003d \"Already at %1$s tab!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private final String tabName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public SwitchCommand(String tabName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this.tabName \u003d tabName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Tab tab;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireNonNull(tabName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String trimmedTab \u003d tabName.toLowerCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (trimmedTab.equals(\"classes\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            tab \u003d Tab.CLASSES;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        } else if (trimmedTab.equals(\"attendance\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            tab \u003d Tab.ATTENDANCE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TAB);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SWITCH_TAB_SUCCESS, tab.toString().toLowerCase()),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                false, tab, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                || (other instanceof SwitchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u0026\u0026 tabName.equals(((SwitchCommand) other).tabName)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import seedu.address.model.person.Matriculation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MATRICULATION, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MATRICULATION, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Matriculation matriculation \u003d ParserUtil.parseMatriculation(argMultimap.getValue(PREFIX_MATRICULATION).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Person person \u003d new Person(name, matriculation, email, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 6,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.ConfirmationCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /** The command to be executed after confirmation prompt*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private ConfirmationCommand previousCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Removes the previous confirmation command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private void removePreviousCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.previousCommand \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // If there is an edit, delete or clear, there should be a previous command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (previousCommand !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Command result \u003d new ConfirmationParser(previousCommand).parse(userInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            // Remove previous command if the result is able to be executed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            removePreviousCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                //Sets the previous command to a confirmation edit command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                this.previousCommand \u003d new ConfirmationCommand(new EditCommandParser().parse(arguments));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return previousCommand;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                //Sets the previous command to a confirmation delete command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                this.previousCommand \u003d new ConfirmationCommand(new DeleteCommandParser().parse(arguments));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return previousCommand;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                //Sets the previous command to a confirmation clear command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                this.previousCommand \u003d new ConfirmationCommand(new ClearCommand());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return previousCommand;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 3,
      "MarcusTw": 27,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Prefix PREFIX_MATRICULATION \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ConfirmationParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CONFIRMATION_INPUT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.commands.ConfirmationCommand.ACCEPT_COMMAND_FULL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.commands.ConfirmationCommand.ACCEPT_COMMAND_SHORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.commands.ConfirmationCommand.REJECT_COMMAND_FULL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.commands.ConfirmationCommand.REJECT_COMMAND_SHORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.ConfirmCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.ConfirmationCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationParser implements Parser\u003cConfirmCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final ConfirmationCommand confirmationCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmationParser(ConfirmationCommand confirmationCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.confirmationCommand \u003d confirmationCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String lowerCaseInput \u003d userInput.toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (lowerCaseInput.equals(ACCEPT_COMMAND_FULL) || lowerCaseInput.equals(ACCEPT_COMMAND_SHORT)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return confirmationCommand.accept();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (lowerCaseInput.equals(REJECT_COMMAND_FULL) || lowerCaseInput.equals(REJECT_COMMAND_SHORT)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return confirmationCommand.reject();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_CONFIRMATION_INPUT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MATRICULATION, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MATRICULATION).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            editPersonDescriptor.setMatriculation(ParserUtil.parseMatriculation("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    argMultimap.getValue(PREFIX_MATRICULATION).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 5,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import seedu.address.model.person.Matriculation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static Matriculation parseMatriculation(String matriculation) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(matriculation);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String trimmedMatriculation \u003d matriculation.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!Matriculation.isValidMatriculation(trimmedMatriculation)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new ParseException(Matriculation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new Matriculation(trimmedMatriculation);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 7,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SwitchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Parses input arguments and creates a new SwitchCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SwitchCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * and returns a SwitchCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public SwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new SwitchCommand(trimmedArgs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Duplicates are not allowed(same name and matriculation number) (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public ObservableList\u003cPerson\u003e getModifiablePersonList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return persons.asModifiableObservableList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 1,
      "-": 119,
      "erisjacey": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attendance/Attributes.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents the things to keep track for each student for each class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Guarantees: immutability"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Attributes {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Presence presence;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Participation participation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Parameterized constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Attributes(Presence presence, Participation participation) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.presence \u003d presence;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.participation \u003d participation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Sets to the default values for each field."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Attributes() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this(new Presence(), new Participation());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Causes the presence field to be true."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Attributes becomePresent() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new Attributes(presence.becomePresent(), participation);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Causes the participation field to be true."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Attributes participate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new Attributes(presence, participation.participate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } else if (other instanceof Attributes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return this.presence.equals(((Attributes) other).presence)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    \u0026\u0026 this.participation.equals(((Attributes) other).participation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attendance/Participation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents whether or not a student has participated in the particular class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Guarantees: immutability"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Participation {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final boolean PARTICIPATED \u003d true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final boolean NOT_PARTICIPATED \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final boolean hasParticipated;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Participation(boolean isPresent) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.hasParticipated \u003d isPresent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Sets to the default value of false."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Participation() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this(NOT_PARTICIPATED);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Participation participate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new Participation(PARTICIPATED);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return this \u003d\u003d other"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                || (other instanceof Participation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 (hasParticipated \u003d\u003d ((Participation) other).hasParticipated));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attendance/Presence.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents whether a student is present during a particular class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Guarantees: immutability"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Presence {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final boolean PRESENT \u003d true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final boolean ABSENT \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final boolean isPresent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Presence(boolean isPresent) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.isPresent \u003d isPresent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Sets to the default value of false."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Presence() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this(ABSENT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Presence becomePresent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new Presence(PRESENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return this \u003d\u003d other"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                || (other instanceof Presence"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 (isPresent \u003d\u003d ((Presence) other).isPresent));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attendance/Session.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a particular session at a particular date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Each {@code Session} contains a list of details for each student in ATAS for the TA to keep track of."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Session implements Comparable\u003cSession\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Map\u003cInteger, Attributes\u003e studentList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Parametrized constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Session(LocalDate date, List\u003cPerson\u003e masterList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.studentList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        initializeSession(masterList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Map\u003cInteger, Attributes\u003e getStudentList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return studentList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Sets the student session presence to \u003ccode\u003etrue\u003c/code\u003e."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentBecomesPresent(Index studentId) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Attributes attributes \u003d studentList.get(studentId.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        studentList.put(studentId.getZeroBased(), attributes.becomePresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Sets the student participation status to \u003ccode\u003etrue\u003c/code\u003e."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentParticipates(Index studentId) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Attributes attributes \u003d studentList.get(studentId.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        studentList.put(studentId.getZeroBased(), attributes.participate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Updates the session after the deletion of a student (with a given student ID)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void updateSessionAfterDeletion(Index studentId, List\u003cPerson\u003e masterList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireAllNonNull(studentId, masterList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // shift the values down by 1, starting from deleted student ID"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        for (int i \u003d studentId.getZeroBased(); i \u003c masterList.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            Attributes temp \u003d studentList.get(i + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            studentList.put(i, temp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        studentList.remove(masterList.size()); // remove last key-value pair from hashmap"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns true if both sessions have the same date."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * This defines a weaker notion of equality between two sessions."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean isSameSession(Session otherSession) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (otherSession \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return otherSession !\u003d null \u0026\u0026 otherSession.date.equals(this.date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return this \u003d\u003d other"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                || (other instanceof Session"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 this.date.equals(((Session) other).date)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 this.studentList.equals(((Session) other).studentList));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public int compareTo(Session other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return this.date.compareTo(other.date);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private void initializeSession(List\u003cPerson\u003e masterList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        for (int i \u003d 0; i \u003c masterList.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            studentList.put(i, new Attributes());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attendance/SessionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import seedu.address.model.attendance.exceptions.DuplicateSessionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a collection of all the sessions in the semester."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class SessionList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final SortedSet\u003cSession\u003e sessions \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final List\u003cPerson\u003e masterList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public SessionList(List\u003cPerson\u003e masterList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.masterList \u003d masterList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Adds a session to the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * The session must not already exist in the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void addSession(LocalDate date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Session toAdd \u003d new Session(date, masterList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new DuplicateSessionException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sessions.add(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns true if the collection contains an equivalent session as the given argument."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean contains(Session toCheck) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return sessions.stream().anyMatch(toCheck::isSameSession);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Updates all sessions after the deletion of a student (with a given student ID)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void updateAllSessionsAfterDeletion(Index studentId) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        for (Session s : sessions) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            s.updateSessionAfterDeletion(studentId, masterList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                || (other instanceof SessionList // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 sessions.equals(((SessionList) other).sessions)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 masterList.equals(((SessionList) other).masterList));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attendance/exceptions/DuplicateSessionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package seedu.address.model.attendance.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Signals that the operation will result in duplicate Classes (Classes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * date)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DuplicateSessionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public DuplicateSessionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(\"Operation would result in duplicate classes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@u.nus.edu \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"2. This is followed by a \u0027@u.nus.edu\u0027. \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String DOMAIN_REGEX \u003d \"u.nus.edu\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "YuunoKun": 2,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Matriculation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Represents a Person\u0027s matriculation number."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMatriculation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Matriculation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            \"Matriculation Number should be in the form of A1234567X, starting with \u0027A\u0027, followed by \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"7 digits, ends with another letter.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"A[0-9]{7}[A-Z]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Constructs a {@code Matriculation}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param matriculation A valid Matriculation number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Matriculation(String matriculation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(matriculation);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        checkArgument(isValidMatriculation(matriculation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        value \u003d matriculation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns true if a given string is a valid Matriculation number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static boolean isValidMatriculation(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                || (other instanceof Matriculation // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 value.equals(((Matriculation) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final Matriculation matriculation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Person(Name name, Matriculation matriculation, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireAllNonNull(name, matriculation, email, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.matriculation \u003d matriculation;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Matriculation getMatriculation() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return matriculation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns true if both persons of the same name have the same matriculation number."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return otherPerson !\u003d null \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 otherPerson.getMatriculation().equals(getMatriculation());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 otherPerson.getMatriculation().equals(getMatriculation())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return Objects.hash(name, matriculation, email, tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .append(\" Matriculation: \")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .append(getMatriculation())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 13,
      "-": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns the backing list as a modifiable {@code ObservableList}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public ObservableList\u003cPerson\u003e asModifiableObservableList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 137,
      "erisjacey": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import seedu.address.model.person.Matriculation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Matriculation(\"A1234567X\"), new Email(\"alexyeoh@u.nus.edu\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Matriculation(\"A7654321X\"), new Email(\"berniceyu@u.nus.edu\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Matriculation(\"A0962345D\"), new Email(\"charlotte@u.nus.edu\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                getTagSet(\"neighbours\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import seedu.address.model.person.Matriculation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final String matriculation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String matriculation,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.matriculation \u003d matriculation;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        matriculation \u003d source.getMatriculation().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (matriculation \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    Matriculation.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!Matriculation.isValidMatriculation(matriculation)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new IllegalValueException(Matriculation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        final Matriculation modelMatriculation \u003d new Matriculation(matriculation);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new Person(modelName, modelMatriculation, modelEmail, modelTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 13,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (CommandException | ParseException | InterruptedException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, InterruptedException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 2,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.logic.commands.SwitchCommand.MESSAGE_ALREADY_ON_TAB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.logic.commands.SwitchCommand.MESSAGE_INVALID_TAB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private static final int SLEEP_TIME \u003d 2000;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Switches to the specified tab."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param tab tab to switch to."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private void handleSwitchTab(Tab tab) throws CommandException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        int currentTabIndex \u003d tabPane.getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        int toSwitchTabIndex \u003d tab.getIndex().getZeroBased();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (currentTabIndex \u003d\u003d toSwitchTabIndex) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ALREADY_ON_TAB, tab.toString().toLowerCase()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (tab.equals(Tab.CLASSES) || tab.equals(Tab.ATTENDANCE)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            tabPane.getSelectionModel().select(toSwitchTabIndex);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TAB);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private void handleExit() throws InterruptedException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                Thread.sleep(SLEEP_TIME);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                        (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                helpWindow.hide();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                primaryStage.hide();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            CommandException, ParseException, InterruptedException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            if (commandResult.isSwitchTab()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                handleSwitchTab(commandResult.getTab());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 33,
      "CodingCookieRookie": 12,
      "-": 194
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Label matriculation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        matriculation.setText(person.getMatriculation().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 2,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Tab.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Existing tabs with an Index associated to them."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Index numbering starts from 0, beginning with tabs on the left of the GUI."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public enum Tab {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    CLASSES(Index.fromZeroBased(0)),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    ATTENDANCE(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /** Index to represent the order of the tabs */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param index Index of the tab."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    Tab(Index index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Retrieves the Index of the enum class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @return Index of the tab."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 33
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "         title\u003d\"ATAS\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        \u003cTabPane fx:id\u003d\"tabPane\" prefHeight\u003d\"800.0\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@DarkTheme.css\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "          \u003ctabs\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            \u003cTab fx:id\u003d\"classesTab\" text\u003d\"Classes\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                  \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                          \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "              \u003c/content\u003e\u003c/Tab\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            \u003cTab id\u003d\"attendanceTab\" fx:id\u003d\"attendanceTab\" text\u003d\"Attendance\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "              \u003c/content\u003e\u003c/Tab\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "          \u003c/tabs\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 21,
      "-": 50
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \u003cLabel fx:id\u003d\"matriculation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$matriculation\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICULATION_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.commands.ConfirmationCommand.ACCEPT_COMMAND_FULL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.ConfirmationCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        System.out.println(outOfBoundIndex.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        int outOfBoundIndexOneBased \u003d outOfBoundIndex.getOneBased();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String deleteCommand \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundIndexOneBased;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(deleteCommand, String.format(ConfirmationCommand.MESSAGE_CONFIRMATION_DELETE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                outOfBoundIndexOneBased), model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandException(ACCEPT_COMMAND_FULL, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String editCommand \u003d EditCommand.COMMAND_WORD + \" \" + outOfBoundIndexOneBased + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + PREFIX_TAG + \"newTag\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(editCommand, String.format(ConfirmationCommand.MESSAGE_CONFIRMATION_EDIT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                outOfBoundIndexOneBased), model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandException(ACCEPT_COMMAND_FULL, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + MATRICULATION_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 22,
      "YuunoKun": 2,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import seedu.address.ui.Tab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, null, false)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, null, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different switchTab value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, Tab.CLASSES, true)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, null, true)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, null, false).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different switchTab value -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, Tab.CLASSES, true)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, null, true).hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 13,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALID_MATRICULATION_AMY \u003d \"A3252832E\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALID_MATRICULATION_BOB \u003d \"A3459682D\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@u.nus.edu\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@u.nus.edu\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MATRICULATION_DESC_AMY \u003d \" \" + PREFIX_MATRICULATION + VALID_MATRICULATION_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MATRICULATION_DESC_BOB \u003d \" \" + PREFIX_MATRICULATION + VALID_MATRICULATION_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    // should have a letter at the end"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String INVALID_MATRICULATION_DESC \u003d \" \" + PREFIX_MATRICULATION + \"A0234567\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withMatriculation(VALID_MATRICULATION_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withMatriculation(VALID_MATRICULATION_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 11,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ConfirmCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteCommand firstDeleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteCommand secondDeleteCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmCommand confirmationDeleteCommand \u003d new ConfirmationCommand(firstDeleteCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmCommand confirmationEditCommand \u003d new ConfirmationCommand(editCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmCommand confirmationClearCommand \u003d new ConfirmationCommand(clearCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmCommand confirmationAcceptDeleteCommand \u003d new ConfirmationAcceptCommand(firstDeleteCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmCommand confirmationAcceptEditCommand \u003d new ConfirmationAcceptCommand(editCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmCommand confirmationAcceptClearCommand \u003d new ConfirmationAcceptCommand(clearCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmCommand confirmationRejectDeleteCommand \u003d new ConfirmationRejectCommand(firstDeleteCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmCommand confirmationRejectEditCommand \u003d new ConfirmationRejectCommand(editCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmCommand confirmationRejectClearCommand \u003d new ConfirmationRejectCommand(clearCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(confirmationDeleteCommand.equals(confirmationDeleteCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(confirmationEditCommand.equals(confirmationEditCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(confirmationClearCommand.equals(confirmationClearCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationDeleteCommand.equals(new ConfirmationCommand(secondDeleteCommand)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationDeleteCommand.equals(confirmationClearCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationDeleteCommand.equals(confirmationEditCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationEditCommand.equals(confirmationClearCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Make sure there is a clear distinction between accept and reject confirmation command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationAcceptDeleteCommand.equals(confirmationRejectDeleteCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationAcceptClearCommand.equals(confirmationRejectClearCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationAcceptEditCommand.equals(confirmationRejectEditCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Make sure there is clear distinction between confirmation and accept/reject confirmation command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationClearCommand.equals(confirmationAcceptClearCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationClearCommand.equals(confirmationRejectClearCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationDeleteCommand.equals(confirmationAcceptDeleteCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationDeleteCommand.equals(confirmationRejectDeleteCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationEditCommand.equals(confirmationAcceptEditCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationEditCommand.equals(confirmationRejectEditCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ConfirmationAcceptCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationAcceptCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_acceptValidDeleteCommand_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptCommand \u003d new ConfirmationAcceptCommand(deleteCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationAcceptCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_invalidDeleteCommand_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptCommand \u003d new ConfirmationAcceptCommand(deleteCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandFailure(confirmationAcceptCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_acceptValidEditCommand_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptCommand \u003d new ConfirmationAcceptCommand(editCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationAcceptCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_invalidEditCommand_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptCommand \u003d new ConfirmationAcceptCommand(editCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandFailure(confirmationAcceptCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_acceptClearCommand_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptCommand \u003d new ConfirmationAcceptCommand(clearCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationAcceptCommand, model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteCommand firstDeleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteCommand secondDeleteCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptDeleteCommand \u003d new ConfirmationAcceptCommand(firstDeleteCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptEditCommand \u003d new ConfirmationAcceptCommand(editCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptClearCommand \u003d new ConfirmationAcceptCommand(clearCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationAcceptDangerousCommand equals confirmationAcceptSameDangerousCommand"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(confirmationAcceptDeleteCommand.equals(confirmationAcceptDeleteCommand));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(confirmationAcceptEditCommand.equals(confirmationAcceptEditCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(confirmationAcceptClearCommand.equals(confirmationAcceptClearCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationAcceptDangerousCommand equals confirmationAcceptAnotherDangerousCommand"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationAcceptDeleteCommand.equals(confirmationAcceptClearCommand));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationAcceptDeleteCommand.equals(confirmationAcceptEditCommand));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationAcceptEditCommand.equals(confirmationAcceptClearCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationAcceptDeleteCommand equals confirmationAcceptAnotherDeleteCommand"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationAcceptDeleteCommand.equals(new ConfirmationAcceptCommand(secondDeleteCommand)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationAcceptCommand equals another subclass of ConfirmCommand"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationAcceptDeleteCommand.equals(new ConfirmationRejectCommand(firstDeleteCommand)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ConfirmationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_deleteCommandConfirmation_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(ConfirmationCommand.MESSAGE_CONFIRMATION_DELETE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(deleteCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_editCommandConfirmation_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(ConfirmationCommand.MESSAGE_CONFIRMATION_EDIT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(editCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_clearCommandConfirmation_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d ConfirmationCommand.MESSAGE_CONFIRMATION_CLEAR;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(clearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteCommand firstDeleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteCommand secondDeleteCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationDeleteCommand \u003d new ConfirmationCommand(firstDeleteCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationEditCommand \u003d new ConfirmationCommand(editCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationClearCommand \u003d new ConfirmationCommand(clearCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationDangerousCommand equals confirmationSameDangerousCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(confirmationDeleteCommand.equals(confirmationDeleteCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(confirmationEditCommand.equals(confirmationEditCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(confirmationClearCommand.equals(confirmationClearCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationDangerousCommand equals confirmationAnotherDangerousCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationDeleteCommand.equals(confirmationClearCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationDeleteCommand.equals(confirmationEditCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationEditCommand.equals(confirmationClearCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationDeleteCommand equals another subclass of ConfirmCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationDeleteCommand.equals(new ConfirmationRejectCommand(secondDeleteCommand)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationDeleteCommand.equals(new ConfirmationAcceptCommand(secondDeleteCommand)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ConfirmationRejectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationRejectCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_rejectDeleteCommand_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(ConfirmationRejectCommand.MESSAGE_REJECT_COMMAND, deleteCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationRejectCommand confirmationRejectCommand \u003d new ConfirmationRejectCommand(deleteCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationRejectCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_rejectEditCommand_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(ConfirmationRejectCommand.MESSAGE_REJECT_COMMAND, editCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationRejectCommand confirmationRejectCommand \u003d new ConfirmationRejectCommand(editCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationRejectCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_rejectClearCommand_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(ConfirmationRejectCommand.MESSAGE_REJECT_COMMAND, clearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationRejectCommand confirmationRejectCommand \u003d new ConfirmationRejectCommand(clearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationRejectCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteCommand firstDeleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteCommand secondDeleteCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationRejectCommand confirmationRejectDeleteCommand \u003d new ConfirmationRejectCommand(firstDeleteCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationRejectCommand confirmationRejectEditCommand \u003d new ConfirmationRejectCommand(editCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationRejectCommand confirmationRejectClearCommand \u003d new ConfirmationRejectCommand(clearCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationRejectDangerousCommand equals confirmationRejectSameDangerousCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(confirmationRejectDeleteCommand.equals(confirmationRejectDeleteCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(confirmationRejectEditCommand.equals(confirmationRejectEditCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(confirmationRejectClearCommand.equals(confirmationRejectClearCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationRejectDangerousCommand equals confirmationRejectAnotherDangerousCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationRejectDeleteCommand.equals(confirmationRejectClearCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationRejectDeleteCommand.equals(confirmationRejectEditCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationRejectEditCommand.equals(confirmationRejectClearCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationRejectDeleteCommand equals confirmationRejectAnotherDeleteCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationRejectDeleteCommand.equals(new ConfirmationRejectCommand(secondDeleteCommand)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if ConfirmationRejectCommand equals another subclass of ConfirmCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(confirmationRejectDeleteCommand.equals(new ConfirmationAcceptCommand(firstDeleteCommand)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICULATION_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withMatriculation(VALID_MATRICULATION_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withMatriculation(VALID_MATRICULATION_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 3,
      "-": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICULATION_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withMatriculation(VALID_MATRICULATION_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 2,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, null, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, null, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SwitchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.logic.commands.SwitchCommand.MESSAGE_INVALID_TAB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.logic.commands.SwitchCommand.MESSAGE_SWITCH_TAB_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.testutil.TypicalTabNames.ATTENDANCE_TAB_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.testutil.TypicalTabNames.CLASSES_TAB_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.testutil.TypicalTabNames.INVALID_TAB_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import seedu.address.ui.Tab;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class SwitchCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_switchClassesTab_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SWITCH_TAB_SUCCESS,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                Tab.CLASSES.toString().toLowerCase());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, Tab.CLASSES, false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchCommand \u003d new SwitchCommand(CLASSES_TAB_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(switchCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_switchAttendanceTab_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SWITCH_TAB_SUCCESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                Tab.ATTENDANCE.toString().toLowerCase());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, Tab.ATTENDANCE, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchCommand \u003d new SwitchCommand(ATTENDANCE_TAB_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(switchCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_invalidTabName_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchCommand \u003d new SwitchCommand(INVALID_TAB_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandFailure(switchCommand, model, MESSAGE_INVALID_TAB);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchToClassesCommand \u003d new SwitchCommand(CLASSES_TAB_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchToAttendanceCommand \u003d new SwitchCommand(ATTENDANCE_TAB_NAME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchToInvalidTabCommand \u003d new SwitchCommand(INVALID_TAB_NAME);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(switchToClassesCommand.equals(switchToClassesCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(switchToAttendanceCommand.equals(switchToAttendanceCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchToClassesCommandCopy \u003d new SwitchCommand(CLASSES_TAB_NAME);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(switchToClassesCommand.equals(switchToClassesCommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchToAttendanceCommandCopy \u003d new SwitchCommand(ATTENDANCE_TAB_NAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(switchToAttendanceCommand.equals(switchToAttendanceCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(switchToClassesCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(switchToAttendanceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(switchToClassesCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(switchToAttendanceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // invalid tabs -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(switchToClassesCommand.equals(switchToInvalidTabCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(switchToAttendanceCommand.equals(switchToInvalidTabCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different tabs -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(switchToClassesCommand.equals(switchToAttendanceCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRICULATION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICULATION_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICULATION_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICULATION_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import seedu.address.model.person.Matriculation;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                 + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                 + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRICULATION_DESC_AMY + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                 + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRICULATION_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                 + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                 + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + MATRICULATION_DESC_AMY + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_MATRICULATION_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICULATION_DESC_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_MATRICULATION_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_MATRICULATION_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Matriculation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICULATION_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + MATRICULATION_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        + EMAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 29,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.testutil.TypicalTabNames.CLASSES_TAB_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.ConfirmationCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.ConfirmationRejectCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ConfirmationCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(parser.parseCommand(ConfirmationCommand.REJECT_COMMAND_FULL) instanceof ConfirmationRejectCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ConfirmationCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand command \u003d (ConfirmationCommand) parser.parseCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(new ConfirmationCommand(new DeleteCommand(INDEX_FIRST_PERSON)), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand command \u003d (ConfirmationCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(new ConfirmationCommand(new EditCommand(INDEX_FIRST_PERSON, descriptor)), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void parseCommand_switch() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand command \u003d (SwitchCommand) parser.parseCommand("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                SwitchCommand.COMMAND_WORD + \" \" + CLASSES_TAB_NAME);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(new SwitchCommand(CLASSES_TAB_NAME), command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 9,
      "MarcusTw": 9,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ConfirmationParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CONFIRMATION_INPUT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.ConfirmationAcceptCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.ConfirmationCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.ConfirmationRejectCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.DangerousCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final DangerousCommand dangerousCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parse_validAcceptCommandWordFull_returnsConfirmationAcceptCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(dangerousCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationParser parser \u003d new ConfirmationParser(confirmationCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationAcceptCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new ConfirmationAcceptCommand(new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertParseSuccess(parser, ConfirmationCommand.ACCEPT_COMMAND_FULL, expectedCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parse_validAcceptCommandWordShort_returnsConfirmationAcceptCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(dangerousCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationParser parser \u003d new ConfirmationParser(confirmationCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationAcceptCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new ConfirmationAcceptCommand(new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertParseSuccess(parser, ConfirmationCommand.ACCEPT_COMMAND_SHORT, expectedCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parse_validRejectCommandWordFull_returnsConfirmationRejectCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(dangerousCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationParser parser \u003d new ConfirmationParser(confirmationCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationRejectCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new ConfirmationRejectCommand(new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertParseSuccess(parser, ConfirmationCommand.REJECT_COMMAND_FULL, expectedCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parse_validRejectCommandWordShort_returnsConfirmationRejectCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(dangerousCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationParser parser \u003d new ConfirmationParser(confirmationCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationRejectCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new ConfirmationRejectCommand(new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertParseSuccess(parser, ConfirmationCommand.REJECT_COMMAND_SHORT, expectedCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(dangerousCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationParser parser \u003d new ConfirmationParser(confirmationCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertParseFailure(parser, \"a\", MESSAGE_INVALID_CONFIRMATION_INPUT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRICULATION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICULATION_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICULATION_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICULATION_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICULATION_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import seedu.address.model.person.Matriculation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // invalid matriculation"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MATRICULATION_DESC, Matriculation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MATRICULATION_DESC + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                Matriculation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // valid phone followed by invalid matriculation. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, \"1\" + MATRICULATION_DESC_BOB + INVALID_MATRICULATION_DESC,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                Matriculation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_MATRICULATION_AMY,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MATRICULATION_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withMatriculation(VALID_MATRICULATION_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MATRICULATION_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withMatriculation(VALID_MATRICULATION_BOB)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // matriculation"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MATRICULATION_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withMatriculation(VALID_MATRICULATION_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MATRICULATION_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                + TAG_DESC_FRIEND + MATRICULATION_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withMatriculation(VALID_MATRICULATION_BOB)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_MATRICULATION_DESC + MATRICULATION_DESC_BOB;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withMatriculation(VALID_MATRICULATION_BOB).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_MATRICULATION_DESC + MATRICULATION_DESC_BOB;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withMatriculation(VALID_MATRICULATION_BOB)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 33,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import seedu.address.model.person.Matriculation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String INVALID_MATRICULATION \u003d \"651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String VALID_MATRICULATION \u003d \"A1234567E\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@u.nus.edu\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseMatriculation_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMatriculation((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseMatriculation_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMatriculation(INVALID_MATRICULATION));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseMatriculation_validValueWithoutWhitespace_returnsMatriculation() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Matriculation expectedMatriculation \u003d new Matriculation(VALID_MATRICULATION);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expectedMatriculation, ParserUtil.parseMatriculation(VALID_MATRICULATION));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseMatriculation_validValueWithWhitespace_returnsTrimmedMatriculation() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String matriculationWithWhitespace \u003d WHITESPACE + VALID_MATRICULATION + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Matriculation expectedMatriculation \u003d new Matriculation(VALID_MATRICULATION);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expectedMatriculation, ParserUtil.parseMatriculation(matriculationWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 15,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SwitchCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.testutil.TypicalTabNames.ATTENDANCE_TAB_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static seedu.address.testutil.TypicalTabNames.CLASSES_TAB_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class SwitchCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private SwitchCommandParser parser \u003d new SwitchCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void parse_whiteSpaces_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertParseFailure(parser, \"  \\n\\t   \\n \\t\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand expectedSwitchToClassesCommand \u003d new SwitchCommand(CLASSES_TAB_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertParseSuccess(parser, CLASSES_TAB_NAME, expectedSwitchToClassesCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand expectedSwitchToAttendanceCommand \u003d new SwitchCommand(ATTENDANCE_TAB_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertParseSuccess(parser, ATTENDANCE_TAB_NAME, expectedSwitchToAttendanceCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // leading and trailing whitespaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertParseSuccess(parser, \" \\n \\t \" + CLASSES_TAB_NAME + \" \\n \\t \","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                expectedSwitchToClassesCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertParseSuccess(parser, \" \\n \\t \" + ATTENDANCE_TAB_NAME + \" \\n \\t \","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                expectedSwitchToAttendanceCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 2,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attendance/AttributesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalAttributes.ABSENT_BUT_HAS_PARTICIPATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalAttributes.DEFAULT_PARTICIPATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalAttributes.PRESENT_AND_HAS_PARTICIPATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalAttributes.PRESENT_BUT_HAS_NOT_PARTICIPATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "class AttributesTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertTrue(DEFAULT_PARTICIPATION.equals(DEFAULT_PARTICIPATION));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(DEFAULT_PARTICIPATION.equals(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentIsPresentButHasNotParticipated() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(PRESENT_BUT_HAS_NOT_PARTICIPATED, DEFAULT_PARTICIPATION.becomePresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentIsAbsentButHasParticipated() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(ABSENT_BUT_HAS_PARTICIPATED, DEFAULT_PARTICIPATION.participate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentIsPresentAndHasParticipated() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(PRESENT_AND_HAS_PARTICIPATED, DEFAULT_PARTICIPATION.becomePresent().participate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attendance/ParticipationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "class ParticipationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final boolean HAS_PARTICIPATED \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final Participation DEFAULT_PARTICIPATION \u003d new Participation();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final Participation POSITIVE_PARTICIPATION \u003d new Participation(HAS_PARTICIPATED);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertTrue(DEFAULT_PARTICIPATION.equals(DEFAULT_PARTICIPATION));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(DEFAULT_PARTICIPATION.equals(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void participate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(POSITIVE_PARTICIPATION, DEFAULT_PARTICIPATION.participate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attendance/PresenceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "class PresenceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final boolean IS_PRESENT \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final Presence DEFAULT_PRESENCE \u003d new Presence();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final Presence POSITIVE_PRESENCE \u003d new Presence(IS_PRESENT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertTrue(DEFAULT_PRESENCE.equals(DEFAULT_PRESENCE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(DEFAULT_PRESENCE.equals(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void becomePresent() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(POSITIVE_PRESENCE, DEFAULT_PRESENCE.becomePresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attendance/SessionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalDates.WEEK_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalDates.WEEK_THREE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalDates.WEEK_TWO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonsMinusAlice;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import seedu.address.model.attendance.exceptions.DuplicateSessionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class SessionListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final List\u003cPerson\u003e emptyMasterList \u003d new AddressBook().getModifiablePersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final SessionList emptySessionList \u003d new SessionList(emptyMasterList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final List\u003cPerson\u003e typicalMasterList \u003d getTypicalAddressBook().getModifiablePersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final SessionList typicalSessionList \u003d new SessionList(typicalMasterList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Session emptySessionWeekOne \u003d new Session(WEEK_ONE, emptyMasterList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Session typicalSessionWeekOne \u003d new Session(WEEK_ONE, typicalMasterList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void contains_nullClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e emptySessionList.contains(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e typicalSessionList.contains(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void contains_classNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(emptySessionList.contains(emptySessionWeekOne));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(typicalSessionList.contains(typicalSessionWeekOne));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void add_nullDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e emptySessionList.addSession(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e typicalSessionList.addSession(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void add_duplicateSession_throwsDuplicateSessionException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        emptySessionList.addSession(WEEK_ONE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(DuplicateSessionException.class, () -\u003e emptySessionList.addSession(WEEK_ONE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        typicalSessionList.addSession(WEEK_ONE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(DuplicateSessionException.class, () -\u003e typicalSessionList.addSession(WEEK_ONE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void updateAfterDeletingStudent_validId_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // Set up expected result. Alice already removed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        List\u003cPerson\u003e expectedMasterList \u003d getTypicalPersonsMinusAlice();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        SessionList expectedSessionList \u003d new SessionList(expectedMasterList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        expectedSessionList.addSession(WEEK_ONE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        expectedSessionList.addSession(WEEK_TWO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        expectedSessionList.addSession(WEEK_THREE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // Set up actual result. Remove Alice"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        SessionList actualSessionList \u003d new SessionList(typicalMasterList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        actualSessionList.addSession(WEEK_ONE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        actualSessionList.addSession(WEEK_TWO);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        actualSessionList.addSession(WEEK_THREE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        typicalMasterList.remove(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        actualSessionList.updateAllSessionsAfterDeletion(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(expectedSessionList, actualSessionList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void updateAfterDeletingStudent_nullId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e emptySessionList.updateAllSessionsAfterDeletion(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e typicalSessionList.updateAllSessionsAfterDeletion(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attendance/SessionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalAttributes.ABSENT_BUT_HAS_PARTICIPATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalAttributes.PRESENT_AND_HAS_PARTICIPATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalAttributes.PRESENT_BUT_HAS_NOT_PARTICIPATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalDates.WEEK_ONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalDates.WEEK_THREE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalDates.WEEK_TWO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonsMinusAlice;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "class SessionTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final List\u003cPerson\u003e emptyMasterList \u003d new AddressBook().getModifiablePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Session emptySessionWeekOne \u003d new Session(WEEK_ONE, emptyMasterList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Session emptySessionWeekTwo \u003d new Session(WEEK_TWO, emptyMasterList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Session emptySessionWeekThree \u003d new Session(WEEK_THREE, emptyMasterList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final List\u003cPerson\u003e typicalMasterList \u003d getTypicalAddressBook().getModifiablePersonList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Session typicalSessionWeekOne \u003d new Session(WEEK_ONE, typicalMasterList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Session typicalSessionWeekTwo \u003d new Session(WEEK_TWO, typicalMasterList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Session typicalSessionWeekThree \u003d new Session(WEEK_THREE, typicalMasterList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void isSameClass() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertTrue(emptySessionWeekOne.isSameSession(emptySessionWeekOne));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertTrue(typicalSessionWeekOne.isSameSession(typicalSessionWeekOne));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // same date but different master list -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertTrue(emptySessionWeekOne.isSameSession(typicalSessionWeekOne));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(emptySessionWeekOne.isSameSession(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(typicalSessionWeekOne.isSameSession(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(emptySessionWeekOne.isSameSession(emptySessionWeekTwo));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(emptySessionWeekTwo.isSameSession(emptySessionWeekThree));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(typicalSessionWeekOne.isSameSession(typicalSessionWeekTwo));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(typicalSessionWeekTwo.isSameSession(typicalSessionWeekThree));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertTrue(emptySessionWeekOne.equals(emptySessionWeekOne));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertTrue(typicalSessionWeekOne.equals(typicalSessionWeekOne));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(emptySessionWeekOne.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // same date but different master list -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(emptySessionWeekOne.equals(typicalSessionWeekOne));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // same master list but different date -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(emptySessionWeekOne.equals(emptySessionWeekTwo));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(emptySessionWeekTwo.equals(emptySessionWeekThree));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // different date and master list -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(emptySessionWeekOne.equals(typicalSessionWeekTwo));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(typicalSessionWeekTwo.equals(emptySessionWeekThree));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentBecomesPresent_validId_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        typicalSessionWeekOne.studentBecomesPresent(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(PRESENT_BUT_HAS_NOT_PARTICIPATED,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                typicalSessionWeekOne.getStudentList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentBecomesPresent_nullId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e emptySessionWeekOne.studentBecomesPresent(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e typicalSessionWeekOne.studentBecomesPresent(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentParticipates_validId_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        typicalSessionWeekOne.studentParticipates(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(ABSENT_BUT_HAS_PARTICIPATED,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                typicalSessionWeekOne.getStudentList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentParticipates_nullId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e emptySessionWeekOne.studentParticipates(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e typicalSessionWeekOne.studentParticipates(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentBecomesPresentAndParticipates_validId_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        typicalSessionWeekOne.studentBecomesPresent(index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        typicalSessionWeekOne.studentParticipates(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(PRESENT_AND_HAS_PARTICIPATED,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                typicalSessionWeekOne.getStudentList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void updateSessionAfterDeletion_validId_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // Set up expected result. Alice already removed"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        List\u003cPerson\u003e expectedMasterList \u003d getTypicalPersonsMinusAlice();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Session expectedSession \u003d new Session(WEEK_ONE, expectedMasterList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // Set up actual result. Remove Alice"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        typicalMasterList.remove(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        typicalSessionWeekOne.updateSessionAfterDeletion(Index.fromOneBased(1), typicalMasterList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(expectedSession, typicalSessionWeekOne);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@u.nus.edu\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjacku.nus.edu\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@u.nus.edu\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@u.nus.edu\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@u.nus.edu\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@u.nus.edu\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@u.nus.edu\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@u.nus.edu\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@u.nus.edu\")); // long local part"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/MatriculationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class MatriculationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Matriculation(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void constructor_invalidMatriculation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String invalidMatriculation \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Matriculation(invalidMatriculation));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void isValidMatriculation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // null Matriculation number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Matriculation.isValidMatriculation(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // invalid Matriculation numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Matriculation.isValidMatriculation(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Matriculation.isValidMatriculation(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Matriculation.isValidMatriculation(\"1234567\")); // only numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Matriculation.isValidMatriculation(\"Matriculation\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Matriculation.isValidMatriculation(\"1234567X\")); // missing prefix"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Matriculation.isValidMatriculation(\"A123456X\")); // missing number"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Matriculation.isValidMatriculation(\"A1234567\")); // missing suffix"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // valid Matriculation numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Matriculation.isValidMatriculation(\"A1234567X\")); // standard"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Matriculation.isValidMatriculation(\"A2534564F\")); // random"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Matriculation.isValidMatriculation(\"A0000000X\")); // full of zeros"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // Keywords match phone, email, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"A1234567C\", \"alice@u.nus.edu\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withMatriculation(\"A1234567C\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withEmail(\"alice@u.nus.edu\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 4,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICULATION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different matriculation and email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withMatriculation(VALID_MATRICULATION_BOB)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same name, same matriculation, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same name, same email, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withMatriculation(VALID_MATRICULATION_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same name, same matriculation, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different matriculation -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withMatriculation(VALID_MATRICULATION_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 13,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 2,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import seedu.address.model.person.Matriculation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String VALID_MATRICULATION \u003d BENSON.getMatriculation().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_MATRICULATION, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_MATRICULATION, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedMessage \u003d Matriculation.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Matriculation.class.getSimpleName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION, INVALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION, null, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION, VALID_EMAIL, invalidTags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 11,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import seedu.address.model.person.Matriculation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        descriptor.setMatriculation(person.getMatriculation());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Sets the {@code Matriculation} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public EditPersonDescriptorBuilder withMatriculation(String matriculation) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        descriptor.setMatriculation(new Matriculation(matriculation));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 5,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import seedu.address.model.person.Matriculation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String DEFAULT_MATRICULATION \u003d \"A3458234L\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@u.nus.edu\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Matriculation matriculation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        matriculation \u003d new Matriculation(DEFAULT_MATRICULATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        matriculation \u003d personToCopy.getMatriculation();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Sets the {@code Matriculation} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public PersonBuilder withMatriculation(String matriculation) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.matriculation \u003d new Matriculation(matriculation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new Person(name, matriculation, email, tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 10,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sb.append(PREFIX_MATRICULATION + person.getMatriculation().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        descriptor.getMatriculation().ifPresent(phone -\u003e sb.append(PREFIX_MATRICULATION)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 4,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAttributes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import seedu.address.model.attendance.Attributes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import seedu.address.model.attendance.Participation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import seedu.address.model.attendance.Presence;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class TypicalAttributes {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final Presence IS_PRESENT \u003d new Presence(true);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final Presence IS_ABSENT \u003d new Presence(false);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final Participation HAS_PARTICIPATED \u003d new Participation(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final Participation HAS_NOT_PARTICIPATED \u003d new Participation(false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final Attributes DEFAULT_PARTICIPATION \u003d new Attributes(); // absent and has not participated"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final Attributes PRESENT_BUT_HAS_NOT_PARTICIPATED \u003d new Attributes(IS_PRESENT, HAS_NOT_PARTICIPATED);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final Attributes ABSENT_BUT_HAS_PARTICIPATED \u003d new Attributes(IS_ABSENT, HAS_PARTICIPATED);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final Attributes PRESENT_AND_HAS_PARTICIPATED \u003d new Attributes(IS_PRESENT, HAS_PARTICIPATED);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDates.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * A utility class containing a list of {@code Class} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class TypicalDates {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final LocalDate WEEK_ONE \u003d LocalDate.of(2020, 8, 10);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final LocalDate WEEK_TWO \u003d LocalDate.of(2020, 8, 17);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final LocalDate WEEK_THREE \u003d LocalDate.of(2020, 8, 24);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICULATION_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICULATION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"alice@u.nus.edu\").withMatriculation(\"A2395823W\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"johnd@u.nus.edu\").withMatriculation(\"A8473948R\").withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withMatriculation(\"A2345893J\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"heinz@u.nus.edu\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withMatriculation(\"A2837453G\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"cornelia@u.nus.edu\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withMatriculation(\"A2384576V\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"werner@u.nus.edu\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withMatriculation(\"A7984295F\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"lydia@u.nus.edu\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withMatriculation(\"A4958234S\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"anna@u.nus.edu\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withMatriculation(\"A5720936H\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"stefan@u.nus.edu\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withMatriculation(\"A6398734N\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"hans@u.nus.edu\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withMatriculation(VALID_MATRICULATION_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withMatriculation(VALID_MATRICULATION_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        List\u003cPerson\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        result.addAll(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersonsMinusAlice() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 24,
      "-": 46,
      "erisjacey": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTabNames.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * A utility class containing a list of {@code Tab} objects to be used in tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class TypicalTabNames {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String CLASSES_TAB_NAME \u003d \"classes\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String ATTENDANCE_TAB_NAME \u003d \"attendance\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String INVALID_TAB_NAME \u003d \"invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TabTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class TabTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void testGetIndex() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // actual index -\u003e true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(Tab.CLASSES.getIndex().getZeroBased(), Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(Tab.ATTENDANCE.getIndex().getZeroBased(), Index.fromZeroBased(1).getZeroBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // zeroBased index but different values -\u003e false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertNotEquals(Tab.CLASSES.getIndex(), Index.fromZeroBased(3).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertNotEquals(Tab.ATTENDANCE.getIndex(), Index.fromZeroBased(4).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // oneBased index but same values -\u003e false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertNotEquals(Tab.CLASSES.getIndex(), Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertNotEquals(Tab.ATTENDANCE.getIndex(), Index.fromZeroBased(1).getOneBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // oneBased index and different values -\u003e false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertNotEquals(Tab.CLASSES.getIndex(), Index.fromZeroBased(3).getOneBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertNotEquals(Tab.ATTENDANCE.getIndex(), Index.fromZeroBased(4).getOneBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Tab classesTab \u003d Tab.CLASSES;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Tab attendanceTab \u003d Tab.ATTENDANCE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(classesTab.equals(classesTab));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(attendanceTab.equals(attendanceTab));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Tab classesTabCopy \u003d Tab.CLASSES;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(classesTab.equals(classesTabCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Tab attendanceTabCopy \u003d Tab.ATTENDANCE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(attendanceTab.equals(attendanceTabCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(classesTab.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(attendanceTab.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(classesTab.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(attendanceTab.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different tabs -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(classesTab.equals(attendanceTab));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 59
    }
  }
]
