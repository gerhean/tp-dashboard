[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F12-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F12-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "# HelloFile"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "## About"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "* HelloFile is a desktop app for managing files, optimised for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Users can tag their file with a nickname to access it easier through the GUI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "* For the detailed documentation of this project, see the **[HelloFile Product Website](https://ay2021s1-cs2103t-f12-1.github.io/tp/)**."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "* This is **a project for CS2103T Software Engineering (SE) class 2020 Semester 1**."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "## Acknowledgement"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* Lecturer: Damith C. Rajapakse"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* Teaching Assistant: Kim Hyeongcheol"
      }
    ],
    "authorContributionMap": {
      "li-s": 2,
      "luo-git": 2,
      "Anthony6401": 8,
      "Ma-Yueran": 1,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    archiveName \u003d \u0027hellofile.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "run {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "luo-git": 1,
      "Anthony6401": 3,
      "-": 73
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Li Shuo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003cimg src\u003d\"images/li-s.png\" width\u003d\"200px\" alt\u003d\"Li Shuo\u0027s profile picture\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "[[github](https://github.com/li-s)][[PPP](team/li-sh.md)]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Role: Documentation"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Responsibility: Logic"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### Lu Luoyi"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cimg src\u003d\"images/luo-git.png\" width\u003d\"200px\" alt\u003d\"Luoyi\u0027s profile picture\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "[[github](https://github.com/luo-git)][[PPP](team/luo-git.md)]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Role: Testing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Responsibility: Logic"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### Ma Yueran"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cimg src\u003d\"images/ma-yueran.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "[[github](https://github.com/Ma-Yueran)][[PPP](team/ma-yueran.md)]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Role: Code quality"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Responsibility: Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### Anthony Lie"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cimg src\u003d\"images/anthony6401.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "[[github](https://github.com/Anthony6401)][[PPP](team/anthony6401.md)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Role: Testing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Responsibility: Storage"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### Heinrich"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cimg src\u003d\"images/hynridge.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "[[github](https://github.com/HynRidge)][[PPP](team/hynridge.md)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Role: Scheduling and tracking"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Responsibility: Model"
      }
    ],
    "authorContributionMap": {
      "li-s": 2,
      "luo-git": 5,
      "Ma-Yueran": 10,
      "HynRidge": 8,
      "-": 23
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "![Architecture Diagram](images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of HelloFile. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `untag t/tag123`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "![Architecture Sequence Diagram](images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TagListPanel`, `ThemeWindow` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a tag)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"untag t/tag123\")` API call."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTag\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The storage creates the UserPref and data with default value when the json files are missing/changed. During execution, The storage will update the address book data everytime the user executes a command. However, UserPref is only updated when the app is closed."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luo-git"
        },
        "content": "This section describes some noteworthy details on how we implement certain features."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### Data Structure: Tag"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "[Tag](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/model/tag/Tag.java)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "is a class that stores tags. It contains a compulsory `TagName`, a `FileAddress` and an optional `Label`. `TagName` must "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "contain at least 1 alphanumeric word, and must be unique. `FileAddress` must contain a valid file path"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "(i.e passing a file path like `C:\\Windows\\..` is valid for Windows and `./home/...` is valid for Linux).`FileAddress` "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "can take in a relative path or absolute path."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### Data Structure: Label"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "[Label](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/model/label/Label.java)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "stores a `Label`, which is an optional field in `Tag`. A `Label` must only contain alphanumeric characters, and up to "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "one word. `Label` allows the user to label their tagged file. The purpose is to keep label short and concise, as it only "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "serves as extra information of a tagged file."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### Adding of Tags: TagCommand"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luo-git"
        },
        "content": "[TagCommand](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/logic/commands/TagCommand.java) "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luo-git"
        },
        "content": "adds a new `Tag` to `AddressBook` if the tag\u0027s `TagName` is not a duplicate and the tag\u0027s `FileAddress`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luo-git"
        },
        "content": "is pointing to a valid file. "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Firstly, `TagCommand` checks if the file address given is absolute or relative file path."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luo-git"
        },
        "content": "If the address is relative, it converts the relative path to absolute address by concatenating the relative"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luo-git"
        },
        "content": "path to the current path stored in `Model`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luo-git"
        },
        "content": "We designed `TagCommand` this way so that the users can use our File Explorer interface to navigate to"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luo-git"
        },
        "content": "a folder, then tag files using relative file addresses."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Lastly, TagCommand checks if the file is present using `java.io.File.exists()` before adding the tag to `Model`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### Opening of Tags: OpenCommand"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "luo-git"
        },
        "content": "[OpenCommand](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/logic/commands/OpenCommand.java)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "luo-git"
        },
        "content": "accepts either a `Tag` or a `Label`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "luo-git"
        },
        "content": "It filters the list of `Tags` stored in `AddressBook` by the `Tag` or `Label` supplied, and generate a list of `Tag`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "luo-git"
        },
        "content": "to be opened."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luo-git"
        },
        "content": "After that, it opens the files located at the `Tag`\u0027s `FileAddress` if the file is present and user has read permission."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "luo-git"
        },
        "content": "`CommandException` is thrown if tag is not present, the file cannot be found or no read permission."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "luo-git"
        },
        "content": "We implemented OpenCommand using `java.awt.Desktop`,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "luo-git"
        },
        "content": "which supports various desktop capabilities such as `open()`. `Desktop` ensures that our application can operation across"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "luo-git"
        },
        "content": "most java-supported platforms, hence fulfilling our product\u0027s requirement to be platform independent."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "luo-git"
        },
        "content": "However, there are some significant drawback of using `java.awt.Desktop`. The platform that HelloFile operates on must"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "luo-git"
        },
        "content": "support `Desktop`. This means that our application will never work on a headless environment. "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "luo-git"
        },
        "content": "As a developer, you can check whether the environment supports `Desktop`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "luo-git"
        },
        "content": "using the library method `java.awt.Desktop.isDesktopSupported()`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Another drawback is that `java.awt.Desktop.open()` blocks the JavaFX thread and causes the UI to freeze in non-Windows"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "luo-git"
        },
        "content": "environment. We believe this is due to concurrency issue related to JavaFX."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Regretfully, we have yet to find an elegant solution for this problem after consulting our professor."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "luo-git"
        },
        "content": "The current solution is running `Desktop.open()` on a separate thread, which solves the problem."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "luo-git"
        },
        "content": "We have tested this command under Windows and Ubuntu Linux."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Deleting Tags: UntagCommand"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "li-s"
        },
        "content": "[UntagCommand](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/logic/commands/UntagCommand.java)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "li-s"
        },
        "content": "removes the `Tag` specified by the unique tag name from the `AddressBook`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "luo-git"
        },
        "content": "This command checks the existence of the `Tag` with `model.findFilteredTagList()`, and calls method `model.deleteTag()` to delete it."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Renaming of Tags: RetagCommand"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "li-s"
        },
        "content": "[RetagCommand](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/logic/commands/RetagCommand.java)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "li-s"
        },
        "content": "rename the `Tag` specified by the unique tag name with a different tag name."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "luo-git"
        },
        "content": "This command checks the presence of the `Tag` using `java.io.File.exists()`, and that the new tag name is unique, i.e. not present in the `AddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "li-s"
        },
        "content": "It then gets the filepath of the `Tag` before safely deleting it. Then, a new `Tag` is created with the filepath, and the new tag name."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Changing of Directory: CdCommand"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "[CdCommand](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/logic/commands/CdCommand.java)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "changes the current directory of the HelloFile internal File Explorer. `CommandException` is thrown if the given directory "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "is invalid, cannot be found, or cannot be set as the current directory (*e.g. the given directory is not a folder*)."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "CdCommand calls `setAddress` in `CurrentPath` to set the current directory to the absolute address parsed from the user input."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Then, `CurrentPath` will update the list of children files `FileList` to fit the new current directory."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Moreover, it also updates `javafx.scene.control.ListView` in `FileExplorer` as `ListView` is bound to the `FileList` of the children files "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "under the `CurrentPath`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### Find a specific tag: FindCommand"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "luo-git"
        },
        "content": "[FindCommand](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/logic/commands/FindCommand.java)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "luo-git"
        },
        "content": "applies a `TagContainsCharPredicate` to the list of `FilteredTags` in `Model`. This effectively searches for tags."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "luo-git"
        },
        "content": "`TagContainsCharPredicate` matches any tag with `TagName` or any `Label` that contains the keyword given."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### Showing a tag\u0027s file path: ShowCommand"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "[ShowCommand](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/logic/commands/ShowCommand.java)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "searches the list of Tags stored in `AddressBook` and shows the tag\u0027s file path in the `ResultDisplay`."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "`CommandException` is thrown if tag is not present."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "ShowCommand gets the specified tag by applying `TagNameEqualsKeywordPredicate` that extends from `java.util.function.predicate` to `ObservableList\u003cTag\u003e`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### Listing out all the tags: ListCommand"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "[ListCommand](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/logic/commands/ListCommand.java)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "lists the Tags stored in `AddressBook` and shows them as `TagCard` which is contained in `TagListPanel`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "luo-git"
        },
        "content": "ListCommand shouldn\u0027t take in any argument. A `CommandException` will be thrown if the user\u0027s input contains an argument."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "ListCommand updates the `ObservableList\u003cTag\u003e` by using `java.util.function.predicate`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Internal File Explorer"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Internal File Explorer is a simple file explorer that supports viewing files on your computer. It contains a `CurrentPath` that "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "represents the directory the explorer is viewing, as well as a `FileList` of the children files under that directory. The "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "luo-git"
        },
        "content": "user can use `CdCommand` to change the current directory of the explorer, so he or she can view files under different directories."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "The purpose of implementing Internal File Explorer is to make tagging files easier by supporting tagging files using their "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "relative paths (*e.g. the file name*). This can make tagging files easier especially when the user wants to tag multiple files "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "under the same directory."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Implementation of Internal File Explorer:**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Model"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "The model class `CurrentPath` saves the current directory of the explorer, and keeps a `FileList` of the children files under "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "that directory."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "UI"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "luo-git"
        },
        "content": "`FileExplorerPanel` is the UI component for displaying Internal File Explorer. It is a `javafx.scene.control.TitledPane` with "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "luo-git"
        },
        "content": "its title as the current directory and its content as the list of children files. "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "luo-git"
        },
        "content": "We use `FileCard` in the `javafx.scene.control.ListView` of the file explorer panel to display information of children files."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Storage"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "luo-git"
        },
        "content": "We keep the current directory of the File Explorer in `SavedFilePath`. HelloFile saves the directory in json format upon exiting the app,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "luo-git"
        },
        "content": "and loads the current path saved last time when the app starts. By doing so, the state of the File Explorer will"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "luo-git"
        },
        "content": "persist across every use of our app."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* Tech savvy NUS Computer Science Student"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* Has a need to manage a significant number of files"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* Prefers desktop apps over other types"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* Reasonably comfortable with CLI apps"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Value proposition**: CS students can manage/access their files by typing"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                       and using a simple GUI. Help CS students to see file relations easily."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                                     | I want to …​                                       | So that I can…​                                            |"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| -------- | ---------------------------------------------------------------| ------------------------------------------------------| --------------------------------------------------------------|"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | Student with lots of file                                      | tag my files with a easy to remember tag              | get file path                                                 |"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | First time user                                                | use a help command                                    | start to remember how to use the command                      |"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | Student who prefers to type                                    | use typing to interact with my file system            | use keyboard as much as possible                              |"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | Student who is familiar with command line applications         | tag my files                                          | access the file easily next time                              |"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | CS student with many categories of files                       | categorise my files and folders                       | easily manage my files and search files based on categories   |"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | Software engineer                                              | group my files together                               | open all files in the same group at once                      |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | Student with lots of files                                     | see a list of my tags                                 | find the tag that I created easily                            |"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | Developer                                                      | open files with a quick command                       | focus on coding and not look to find my files                 |"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* *`    | CS student with a lot of project                               | hide private contact details                          | minimize chance of someone else seeing them by accident       |"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* *`    | Command line user                                              | use commands similar to Linux                         | use the similar Linux command without having to relearn       |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* *`    | Careless CS student                                            | be able to undo my mistake                            | fix my mistake                                                |"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `*`      | Forgetful user who always forget where his files are located   | tag frequently used files with a easy to remember tag | locate my files easily                                        |"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `*`      | Intermediate user                                              | delete tagged files                                   | not be distracted by it.                                      |"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "(For all use cases below, the **System** is the `HelloFile` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use case ID: UC01**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use case: Create fileInfo**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. User requests to tag a certain file using the absolute file path."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. HelloFile recognises the file path to be valid."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "3. HelloFile creates the tag and display the fileInfo."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2a. HelloFile detects the file path is invalid."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * 2a1. HelloFile prompts the user that the file path is wrong."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2b. HelloFile detects no tag input."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * 2b1. HelloFile prompts the user for a tag."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2c. HelloFile detects a duplicate tag name."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * 2c1. HelloFile prompts the user for another tag name."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* *a. HelloFile has no permission to read or write to the file system."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * *a1. HelloFile prompts the user that it needs the read and write permission."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**User case ID: UC02**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use Case: Access file using tag**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "luo-git"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. User requests to open a file using a tag."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. HelloFile recognises the tag to be valid."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "3. HelloFile opens the specified file using the default application."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Extension**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2a. HelloFile detects that the tag is invalid."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 2a1. HelloFile prompts the user that the tag is wrong."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 3a. HelloFile detects that the target file does not exist."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 3a1. HelloFile prompts that the target file does not exist."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 3b. HelloFile detects no default application to open the file."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 3b1. HelloFile prompts the user to choose an application to open the file."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case resumes form step 1."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 3c. HelloFile encounters an exception when opening the file."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 3c1. HelloFile shows the error message."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case resumes from step 1."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* *a. HelloFile has no permission to read or write to the file system."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* *a1. HelloFile prompts the user that it needs the read and write permission."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case resumes."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**UseCase ID: UC03**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use Case: Rename tag**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. User requests to rename the tag of a tagged file."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. HelloFile replaces the tag of the file with the new tag."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2a. HelloFile failed to recognize the tag."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 2a1. HelloFile prompts that tag does not exist."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    \tUse case resumes from step 1"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2b. HelloFile failed to recognize the new tag input."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * 2b1. HelloFile prompts that the new tag is invalid."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1. "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2c. HelloFile detects a duplicate tag name."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 2c1. HelloFile prompts the user for another tag name. "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* *a. HelloFile has no permission to read or write to the file system."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* *a1. HelloFile prompts the user that it needs the read and write permission."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case resumes."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**UseCase ID: UC04**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use Case: Untag a file**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. User requests to untag a file."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. HelloFile recognises that the tag exist."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "3. HelloFile removes the file from access."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2a. HelloFile fails to recognize the tag."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 2a1. HelloFile shows the error message."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case resumes from step 1."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* *a. HelloFile has no permission to read or write to the file system."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* *a1. HelloFile prompts the user that it needs the read and write permission."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**UseCase ID: UC05**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use Case: Show a tagged file’s path**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. User requests the check the path of a tagged file."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. HelloFile recognises that the tag exist."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "3. HelloFile shows the path of the file."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2a. HelloFile failed to recognize the tag."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 2a1. HelloFile prompts the user that the tag is wrong."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 3a. HelloFile detects that the target file does not exist."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 3a1. HelloFile prompts that the target file does not exist."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* *a. HelloFile has no permission to read or write to the file system."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* *a1. HelloFile prompts the user that it needs the read and write permission."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case resumes."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**UseCase ID: UC06**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use Case: Access the parent folder of a tagged file**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. User request to open parent folder of a tagged file."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. HelloFile recognises the tag exist."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "3. HelloFile open the parent folder with the tag."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Extension**"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2a. HelloFile detects that the tag is invalid."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 2a1. HelloFile prompts the user that the tag is wrong."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 3a. HelloFile detects that the target file does not exist."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 3a1. HelloFile prompts that the target file does not exist."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case resumes from step 1."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 3b. HelloFile detects no default application to open the file."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 3b1. HelloFile prompts the user to choose an application to open the file."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes form step 1."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 3c. HelloFile encounters an exception when opening the file."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 3c1. HelloFile shows the error message."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t\tUse case resumes from step 1."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* *a. HelloFile has no permission to read or write to the file system."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* *a1. HelloFile prompts the user that it needs the read and write permission."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**UseCase ID: UC07**"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use Case: Show the user help**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. User requests to see the user help."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. HelloFile shows the user help."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* *a. User input the wrong command."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* *a1. HelloFile shows the error message and direct the user to enter the user help command."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case ends."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**UseCase ID: UC08**"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use Case: Find a tag/label**"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. User request to find a tag/label from the given keyword"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. HelloFile recognizes the keyword is associated with existing tag/label."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "3. HelloFile shows the result to the user "
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    "
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* *2a. HelloFile cannot associate keyword with any tag/label."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * *2a1. HelloFile show nothing on the list."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* *a. User input the wrong command."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* *a1. HelloFile shows the error message and direct the user to enter the user help command."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case ends."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "luo-git"
        },
        "content": "1. The app should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "luo-git"
        },
        "content": "2. The app should be able to hold up to 1000 tags without sluggishness longer than 5 seconds."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "4. The source code should be open source."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "5. The application should be usable by a tech-savvy NUS CS student who has never used a similar file management system before."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "6. The user interface should be simple and optimized for CLI power users."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "7. The product is offered as a free application."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "8. 99% of the functions are bug free."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "9. The code base should be well documented and populated with ample assertions."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **Tag**: A string that will be mapped to a file path"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **UI**: User interface"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **CLI**: Command line interface"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **GUI**: Graphical user interface"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **Relative File Path**: A path that is relative to a current directory, it is combined with another file path to access a file."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **Absolute File Path**: The complete details required to locate the file or folder, starting with the root element."
      }
    ],
    "authorContributionMap": {
      "luo-git": 72,
      "li-s": 13,
      "Anthony6401": 13,
      "HynRidge": 270,
      "Ma-Yueran": 17,
      "-": 236
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "As the information age encroaches out lives, our digital footprint has become larger and larger."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "When we accumulate many files from work, school and daily lives,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "we tend to spend a lot of time locating the files that we need."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "In an Internation Data Corporation (IDC) [white paper](https://denalilabs.com/static/ProductivityWhitepaper.pdf)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "published in 2012, a survey of 1200 information workers and IT professionals around the world "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "shows that they spend an average of 4.5 hours a week looking for documents. That is a lot of productivity time wasted!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "This is where our solution, HelloFile, comes in."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "*HelloFile* is a desktop application for professionals who have to manage a lot of files, specifically **tech savvy CS2103T CS students**."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "It is optimised for use under Command Line Interface (CLI)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "By using our application, you can tag frequently used files/folders with a short nickname, and open your them"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "with a single command. We hope by using our application, you can manage your files with ease. You can"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "make your life easier one file at a time, and free up your precious time to spend on things you truly enjoy."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Installation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "1. Ensure you have [Java 11](https://www.java.com/en/download/) or above installed in your computer. "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "2. Download the latest HelloFile.jar [here](https://github.com/AY2021S1-CS2103T-F12-1/tp/releases/tag/v1.2)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Quick start"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "1. Move HelloFile.jar to the folder you intend to use as the home folder for HelloFile."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "2. Double-click the HelloFile.jar icon to start the application. Alternatively, run the command `java -jar HelloFile.jar` in the command line."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "3. Type `help` into the command box, followed by pressing the `Enter` key to view the supported features. Alternatively, click the help button in the menu bar to access our webpage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### User Interface"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "![Illustration](images/screenshots/Illustrations.PNG)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "This diagram shows our interface."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "1. The left panel is the *Tag Panel*. It contains the list of tags that you have created."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "2. The middle panel is the *Result Panel*, where you can see the result of your command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "3. The right panel is the *File Explorer Panel*. It shows your current directory in HelloFile. You can either use command or click on a folder to navigate."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "4. Below the *Result Panel* is the *Command History*. It shows your last command entered."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "5. The *Command Box* at the bottom of the app window is at the bottom. You can type your commands here."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Basic workflow"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. Tag important files with the `tag` command for ease of access.\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "![Tag](images/screenshots/tag.PNG)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. When trying to access tagged files, instead of navigating to the file location, simply use the `open` command to access the required files.\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "![Open](images/screenshots/open.PNG)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "3. To find the location of tagged files, use the `show` command to get the file path of the file.\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "![Show](images/screenshots/show.PNG)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "4. If you have made a happy little accident, you can recover by using `undo` and `redo`.\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "![Undo](images/screenshots/undo.PNG) \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "![Redo](images/screenshots/open.PNG) \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "5. To exit the application, either close the application window, or use the `exit` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  e.g. in `tag t\u003eTAG`, `TAG` is a parameter, such as in the case `add t\u003eMyfile`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "* Expressions in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  e.g `t\u003eTAG [f\u003eFILE_PATH]` can be used as `t\u003eMyfile f\u003eC:\\Users` or as `t\u003eMyfile`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  e.g. if the command specify `t\u003eTAG f\u003eFILE_PATH`, `f\u003eFILE_PATH t\u003eTAG` is also an acceptable command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "* Expressions with `...` at the end can be provided any number of times.\u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  e.g. `t\u003eTAG [l\u003eLABEL]...` can be used as `t\u003eTAG`, `t\u003eTAG l\u003elabel`, or `t\u003eTAG l\u003elabel1 l\u003elabel2 l\u003elabel3`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "li-s"
        },
        "content": "* Every tag name must be unique, but multiple tags can point to the same filepath."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "li-s"
        },
        "content": "* Every tag name is case-sensitive. e.g tag name `notes` is different from tag name `Notes`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* Only the `cd` and `tag` command accepts relative file path, all other commands require absolute file path."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "**:warning: Warning for multiple expressions**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Expressions without `...` at the end takes the last parameter as the argument when provided with multiple same expressions.\u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  e.g. `tag t\u003eTAG1 t\u003eTAG2` will take `TAG2` as the parameter, ignoring the parameter `TAG1`."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Adding a tag with filepath : `tag`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Tags a file with a unique tag name.\u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "You can add a nickname to a file. Optionally, you can add some labels to the tag for categorisation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "The `FILE_PATH` field can accept both absolute and relative file path from your current directory in HelloFile."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Format: `tag t\u003eTAG_NAME f\u003eFILE_PATH [l\u003eLABEL]...`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "li-s"
        },
        "content": "![tag](images/screenshots/tag_command.png)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "li-s"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `tag t\u003eUsers f\u003eC:\\Users` (Adds a tag with tag name `Users`,absolute file path `C:\\Users`, and no label)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `tag t\u003eUsers f\u003eC:\\Users l\u003eImportant` (Adds a tag with tag name `Users`, absolute file path `C:\\Users`, and label name `Important`)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `tag t\u003eUsers f\u003e.\\Users` (Adds a tag with tag name `Users`, relative file path `Users`, and no label)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `tag t\u003eUsers f\u003e.\\Users l\u003efolder l\u003ereadonly` (Adds a tag with tag name `Users`, relative file path `Users`, and multiple lables"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "with label name `folder` and `readonly`)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Displaying information of a tagged file : `show`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Displays the information of the tagged file.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": "You can see some basic information of a tagged file by using this command."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luo-git"
        },
        "content": "It will show you the tag\u0027s file path and label information."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Format: `show t\u003eTAG_NAME`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "li-s"
        },
        "content": "![show](images/screenshots/show_command.png)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `show t\u003emy_research` (show you the details of a tag name `my_research`)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `show t\u003efile2020` (show you the details of a tag name `file2020`)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Accessing a tagged file : `open`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Opens the file specified by the unique tag name.\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luo-git"
        },
        "content": "You can open a file using its tag, with the default application in your operating system."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Additionally, you can open all files with a specific label. This could potentially open many files."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Please take note of the following:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* This command only accepts one tag or one label but not both."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* Please ensure that you have read permission to the files that you want to open."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "**:information_source: You can tag many files that you want to open at the same time with the same label, so you can open them at once.**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Format: `open t\u003eTAG_NAME` or `open l\u003eLABEL`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "li-s"
        },
        "content": "![open](images/screenshots/open_command.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `open t\u003emy_research` (open the file with tag name `my_research`)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `open l\u003enotes` (open all the files with label `notes`)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Removing a tag : `untag`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Removes the tag from the list of tags.\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "luo-git"
        },
        "content": "You can delete a tag by using this command."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Format: `untag t\u003eTAG_NAME`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "li-s"
        },
        "content": "![untag](images/screenshots/untag_command.png)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `untag t\u003enotes` (delete tag with tag name `notes`)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `untag t\u003esecret_file` (delete tag with tag name `secret_file`)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Renaming a tag : `retag`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Renames a tag. \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Changes the specified tag\u0027s nickname into the new one. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Note that this command can only change nickname."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "It can\u0027t change any other information."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Format: `retag o\u003eOLD_TAG_NAME t\u003eNEW_TAG_NAME`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `retag o\u003enotes t\u003esecret` (Rename an old tag name `notes` to new tag name `secret`)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `retag o\u003eexamfiles t\u003eoldexamfiles` (Rename an old tag name `examfiles` to new tag name `oldexamfiles`)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "li-s"
        },
        "content": "![retag](images/screenshots/retag_command.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### Adding a label to a tag : `label`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Adds one or more label to an existing tag.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "luo-git"
        },
        "content": "You can use label to categorise tags."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "**:warning: Duplicated labels will only be added once.**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Format: `label t\u003eTAG_NAME l\u003eLABEL1 [l\u003eLABEL2]...`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "li-s"
        },
        "content": "![label](images/screenshots/label_command.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `label t\u003efile1 l\u003eimportant` (Add a label of tag name `file1` with label name `important`) "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `label t\u003efile2 l\u003eimportant l\u003eexam` (Add a label of tag name `file2` with multiple labels of label name `important` and `exam`)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### Deleting multiple labels from a tag : `unlabel`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Delete one or more label from a tag. \u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "If some labels are invalid, all the other valid labels will be deleted from the tag, "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "and the invalid ones will be shown to the user."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Format: ` unlabel t\u003eTAG_NAME l\u003eLABEL1 [l\u003eLABEL2]...`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "li-s"
        },
        "content": "![unlabel](images/screenshots/unlabel_command.png)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `unlabel t\u003enotes l\u003esecret` (Deletes a label of label name `secret` that has tag name `notes`)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `unlabel t\u003efile1 l\u003eimportant l\u003eexams` (Deletes labels of label name `important` and `exams` from tag name `file1`)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### Finding a tag : `find`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Finds a tag by a keyword. "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "luo-git"
        },
        "content": "You can find tags using a keyword."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "li-s"
        },
        "content": "If the keyword matches its name and/or label partially, it will also be found and listed in the *Tag Panel*."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Before executing command:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "li-s"
        },
        "content": "![before](images/screenshots/pre_find_command.png)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "After executing command:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "li-s"
        },
        "content": "![after](images/screenshots/find_command.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "li-s"
        },
        "content": "        "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "li-s"
        },
        "content": "* `find he` (finds tags which contains `he` in label / tag name, e.g. `hello`, `hero`, etc.)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "li-s"
        },
        "content": "* `find tagname label` (finds tags which contains `tagname` or `label` in label / tag name, e.g. `tagname123`, `label345`, etc.)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Changing current directory : `cd`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Changes the current directory of the HelloFile internal File Explorer. \u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "luo-git"
        },
        "content": "You can change the current directory in 3 ways:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "luo-git"
        },
        "content": "By using `f\u003e` to go to a folder using an absolute path,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "luo-git"
        },
        "content": "by using `./` to go to a folder using a relative path,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "or using `../` to go to the parent folder."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Alternative, you can click on the folder in the *File Explorer Panel* to navigate."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Format 1: `cd f\u003eABSOLUTE_FILE_PATH`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format 2: `cd ./RELATIVE_FILE_PATH`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format 3: `cd ../`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "li-s"
        },
        "content": "![cd](images/screenshots/cd_command.png)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `cd f\u003eC:\\Users` (Changes the current directory to `C:\\Users`)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* `cd ./tp` (Changes the current directory to the child directory `tp`)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* `cd ../` (Changes the current directory to the parent directory)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Listing all tags : `ls`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Lists all added tags."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "li-s"
        },
        "content": "Format: `ls`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Before executing command:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "li-s"
        },
        "content": "![before](images/screenshots/find_command.png)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "After executing command:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "li-s"
        },
        "content": "![after](images/screenshots/list_command.png)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### Undoing command : `undo`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Undo a recently executed command.\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "li-s"
        },
        "content": "You can undo these commands: `tag`, `retag`, `untag`, `label`, `unlabel`, `clear`, and `redo`."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "**:warning: Command history will be deleted once the app is closed!**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Before executing command:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "li-s"
        },
        "content": "![before](images/screenshots/clear_command.png)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "After executing command:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "li-s"
        },
        "content": "![after](images/screenshots/undo_command.png)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### Redoing command : `redo`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Redo a recently executed command.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Redo only exists when undo has been executed."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "**:warning: Command history will be deleted once the app is closed!**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Before executing command:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "li-s"
        },
        "content": "![before](images/screenshots/undo_command.png)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "After executing command:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "li-s"
        },
        "content": "![after](images/screenshots/redo_command.png)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Clearing all tags : `clear`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Clears the list of all tags.\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "**:warning: All tags will be deleted!**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "li-s"
        },
        "content": "![clear](images/screenshots/clear_command.png)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Exiting the application : `exit`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Exits the application."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Displays help for all/certain commands."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Format: (All command) `help` or (Certain command) `help COMMAND`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Showing all commands:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "li-s"
        },
        "content": "![help](images/screenshots/help.png)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Showing one specific command:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "![help](images/screenshots/help2.png)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Examples : "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* `help` (Shows all command and its format)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* `help cd` (shows cd command description, format and examples usage)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "li-s"
        },
        "content": "## Customisation"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Changing themes"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "li-s"
        },
        "content": "HelloFile comes in light and dark themes. To change the theme, navigate to the top left-hand corner of the application,"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "li-s"
        },
        "content": "and select `view`, followed by `theme`. A new pop up window will be shown with available themes along with a quick preview"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "li-s"
        },
        "content": " as illustrated below."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "li-s"
        },
        "content": "![Fig. 1](images/screenshots/changing_themes.png)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "li-s"
        },
        "content": "![Fig. 2](images/screenshots/changing_themes2.png)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Changing view sizes"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "li-s"
        },
        "content": "HelloFile allows you to resize the view of each sub components for a clearer view of tags and folders. You can simply"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "li-s"
        },
        "content": " drag each view to the size desired."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "li-s"
        },
        "content": "![Fig. 3. Resizing taskbar](images/screenshots/taskbar_resize.png)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "li-s"
        },
        "content": "![Fig. 4. Resizing filebar](images/screenshots/filebar_resize.png)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Persistent customisation"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "li-s"
        },
        "content": "All of your customisation options are saved and persists even when you close the application. HelloFile remembers your choices"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " so you can spend your time on more productive pursuits."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Q**: What if the name or the directory of the file I tagged is changed? Can I still access the file using HelloFile?\u003cbr\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "li-s"
        },
        "content": "**A**: No. HelloFile is currently unable to track a file if its name or directory is changed. You will need to delete the old tag and retag the file."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "li-s"
        },
        "content": "**Q**: What is the structure of the application?\u003cbr\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "luo-git"
        },
        "content": "**A**: You can find it in the Developer Guide [here](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Q**: How do I report a bug?\u003cbr\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "li-s"
        },
        "content": "**A**: Please create a new issue on [this](https://github.com/AY2021S1-CS2103T-F12-1/tp/issues) webpage."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Q**: Can I contribute to the project?\u003cbr\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "li-s"
        },
        "content": "**A**: Sorry, as this is a school project, we are not accepting any contributors at this period."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "**Q**: Why does list command use `ls` as the keyword instead of `list`? \u003cbr\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "li-s"
        },
        "content": "**A**: In most command lines, `ls` is the default keyword for listing files and folders. We would like the transition "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "li-s"
        },
        "content": "from command line to HelloFile to be as smooth as possible for our target users."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "Terminology | Definition"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "--------------|------------------"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**CLI** | Command Line Interface is a command line program that accepts text input to execute operating system functions"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**GUI** | Graphical User Interface is a form of user interface that allows users to interact with electronic devices through graphical icons, instead of text-based user interfaces."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Absolute path** | The complete address of a file location. Usually, the address consists of the root element and the complete directory list required to locate the file Example: `C:\\Users\\a.txt` (Windows), `/home/usr/b.txt` (Linux))."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Relative path** | The partial address of a file location. Usually, the address does not consist root element. Example: `./Users/Files/a.txt`,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "--------|--------|----------"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Tag** | `tag t\u003eTAG_NAME f\u003eFILE_PATH [l\u003eLABEL]` | `tag t\u003ecs2103 f\u003ec:/nus/cs2103 l\u003ecs`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Show** | `show t\u003eTAG_NAME` | `show t\u003ecs2103`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Untag** | `untag t\u003eTAG_NAME` | `untag t\u003ecs2103`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Retag** | `retag o\u003eOLD_TAG_NAME t\u003eNEW_TAG_NAME` | `retag o\u003ecs2103 t\u003ecs2103t`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Find** | `find KEYWORD` | `find 2103`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Open** | `open t\u003eTAG_NAME` or `open l\u003eLABEL` | `open t\u003ecs2103` or `open l\u003ecs`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Label** | `label t\u003eTAG_NAME l\u003eLABEL1 [l\u003eLABEL2...]` | `label t\u003ecs2103 l\u003ecore` or `label t\u003ecs2103 l\u003eimportant l\u003ecore`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Unlabel** | `unlabel t\u003eTAG_NAME l\u003eLABEL1 [l\u003eLABEL2...]` | `unlabel t\u003ecs2103 l\u003ecs` or `unlabel t\u003ecs2103 l\u003eimportant l\u003ecs`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**List** | `ls` | `ls`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Cd to an absolute file Path**| `cd f\u003eABSOLUTE_FILE_PATH` | `cd f\u003eC:\\Users`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Cd to a relative file Path**| `cd ./RELATIVE_FILE_PATH` | `cd ./project01`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Cd to the parent file Path**| `cd ../` | `cd ../`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Undo** | `undo` | `undo`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Redo** | `redo` | `redo`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Clear** | `clear` | `clear`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Help** | `help` or `help COMMAND` | `help cd`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Exit** | `exit` | `exit`"
      }
    ],
    "authorContributionMap": {
      "luo-git": 96,
      "li-s": 79,
      "Anthony6401": 42,
      "HynRidge": 50,
      "Ma-Yueran": 32,
      "-": 109
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"untag t\u003etag123\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"untag t\u003etag123\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteTag(t)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luo-git": 1,
      "HynRidge": 2,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "AddressBook *-right-\u003e \"1\" FileList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FileList -[hidden]down- UniqueTagList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FileList -[hidden]down- UniqueTagList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FileList *-right-\u003e \"*\" Files"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "UniqueTagList o-right-\u003e Tag"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Tag *--\u003e TagName"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Tag *--\u003e FileAddress"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Tag *--\u003e \"*\" Label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luo-git": 8,
      "-": 10
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "participant \":UntagCommandParser\" as UntagCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "participant \"d:UntagCommand\" as UntagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "[-\u003e LogicManager : execute(\"untag t\u003emyTag\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"untag t\u003emyTag\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "create UntagCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "AddressBookParser -\u003e UntagCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "activate UntagCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "UntagCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deactivate UntagCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "AddressBookParser -\u003e UntagCommandParser : parse(\"t\u003emyTag\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "activate UntagCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "create UntagCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "UntagCommandParser -\u003e UntagCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "activate UntagCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "UntagCommand --\u003e UntagCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deactivate UntagCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "UntagCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deactivate UntagCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "UntagCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "destroy UntagCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "LogicManager -\u003e UntagCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "activate UntagCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "UntagCommand -\u003e Model : deleteTag(m)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Model --\u003e UntagCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "UntagCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "CommandResult --\u003e UntagCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "UntagCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deactivate UntagCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luo-git": 25,
      "HynRidge": 3,
      "-": 41
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e\"1\" AddressBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d TagCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luo-git": 1,
      "-": 61
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Class CurrentPath"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Class File"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Class TagName"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Class FileAddress"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Class Label"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o--\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "ModelManager o-right-\u003e \"1\" CurrentPath"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "AddressBook *--\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "UniqueTagList o--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Tag *--\u003e \"1\" TagName"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Tag *--\u003e \"1\" FileAddress"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Tag *--\u003e \"*\" Label"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "ModelManager --\u003e\"1\" Tag : filtered list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "ModelManager --\u003e\"1\" File : filtered list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luo-git": 15,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonAddressBookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o--\u003e AddressBookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "JsonAddressBookStorage .left.|\u003e AddressBookStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "JsonAddressBookStorage .down.\u003e JsonSerializableAddressBook"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "JsonSerializableAddressBook .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "JsonAdaptedTag .right.\u003e JsonAdaptedLabel"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luo-git": 4,
      "-": 21
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Class ThemeWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Class TagListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Class TagCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Class FooterBar"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Class FileExplorerPanel"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Class LastInputDisplay"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "MainWindow *--\u003e HelpWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "MainWindow *--\u003e ThemeWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "MainWindow *--\u003e FooterBar"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "MainWindow *--\u003e LastInputDisplay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "MainWindow *--\u003e FileExplorerPanel"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "MainWindow *--\u003e CommandBox"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "MainWindow *-down-\u003e TagListPanel"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "TagListPanel -down-\u003e TagCard"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "TagListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "TagCard --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "ThemeWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FooterBar --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FileExplorerPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "LastInputDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "TagCard ..\u003e Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "TagListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luo-git": 22,
      "-": 46
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "title: HelloFile"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**HelloFile is a desktop app for managing files**, optimised for use via a Command Line Interface (CLI) while still having "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "the benefits of a Graphical User Interface (GUI). By tagging frequently used files/folders with a short nickname, you "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "will be able to manage and access your files with ease."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* If you are interested in using HelloFile, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* If you are interested about how HelloFile is developed, the [**Developer Guide**](DeveloperGuide.html) may be helpful."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 6,
      "-": 15
    }
  },
  {
    "path": "docs/team/anthony6401.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "title: Anthony Lie\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "## Project: HelloFile"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "HelloFile is a file management application created as an extension to AddressBook - Level 3 (AB3),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "specifically made for tech savvy CS2103T CS students."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "By using HelloFile, students can tag frequently used files/folders with a short nickname, and open their files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "with intuitive commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "* **New Feature**: Added `show` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "(Pull request [\\#88](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/88))"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  * What it does: Allows the user to see the file path and label information of a tag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  * Justification: This feature helps the user to see a specific tag\u0027s information if the information is too long for the UI to display it properly."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  * Highlights: This feature needs to find the tag according to the tag\u0027s nickname provided by the user. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  Hence, I implemented `TagNameEqualsKeywordPredicate` to get the specified tag easier, and potentially helps to implement commands that takes in tag\u0027s nickname as argument in the future."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "* **New Feature**: Added `unlabel` command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "(Pull request [\\#193](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/193))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  * What it does: Allows the user to delete multiple labels of a certain tag."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  * Justification: This feature improves the product significantly as managing tag\u0027s labels is important since labels can be used to open multiple files at the same time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  * Highlights: This feature is able to take in multiple labels as argument and delete them. This helps the users to save time if a certain tag has a lot of labels that needed to be deleted at the same time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003danthony6401\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dAnthony6401\u0026tabRepo\u003dAY2021S1-CS2103T-F12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  * Created some GitHub issues and assign them the corresponding labels and milestone."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  * Maintaining team tasks with other members."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  * Updated list command to not be able to take in any argument as well as change its command word"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  (Pull request [\\#122](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/122))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  * Updated storage in order to save the last file path "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  (Pull requests [\\#151](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/151), "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  [\\#157](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/157))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  * Updated some commands not to change the tag list order after execution"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  (Pull request [\\#265](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/265))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    * Added documentation of expressions with and without `...`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "      [\\#266](https://github.com/nus-cs2103-AY2021S1/forum/issues/266)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    * Added description for the features `unlabel` and `retag` "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    [\\#277](https://github.com/nus-cs2103-AY2021S1/forum/issues/277)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    * Added implementation details of `ShowCommand` and `ListCommand`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    [\\#165](https://github.com/nus-cs2103-AY2021S1/forum/issues/165)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  [\\#91](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/91), "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  [\\#120](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/120), "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  [\\#158](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/158), "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  [\\#162](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/162)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/anthony6401/ped/issues/2),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "   [2](https://github.com/anthony6401/ped/issues/4), "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "   [3](https://github.com/anthony6401/ped/issues/6))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "   "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "## \\[Optional\\] Contributions to the User Guide (Extract)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "   "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Expressions with `...` at the end can be provided any number of times.\u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "e.g. `t/TAG [l/LABEL]...` can be used as `t/TAG`, `t/TAG l/label`, or `t/TAG l/label1 l/label2 l/label3`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "**:warning: Warning for multiple expressions**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Expressions without `...` at the end takes the last parameter as the argument when provided with multiple same expressions.\u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "e.g. `tag t/TAG1 t/TAG2` will take `TAG2` as the parameter, ignoring the parameter `TAG1`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "## \\[Optional\\] Contributions to the Developer Guide (Extract)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### Showing a tag\u0027s file path: ShowCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "[ShowCommand](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/logic/commands/ShowCommand.java)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "searches the list of Tags stored in `AddressBook` and shows the tag\u0027s file path in the `ResultDisplay`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "`CommandException` is thrown if tag is not present."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "ShowCommand gets the specified tag by applying `TagNameEqualsKeywordPredicate` that extends from `java.util.function.predicate` to `ObservableList\u003cTag\u003e`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### Listing out all the tags: ListCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "[ListCommand](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/logic/commands/ListCommand.java)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "lists the Tags stored in `AddressBook` and shows them as `TagCard` which is contained in `TagListPanel`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "ListCommand shouldn\u0027t take in any argument. `CommandException` will be thrown if the user\u0027s input contains an argument."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "ListCommand updates the `ObservableList\u003cTag\u003e` by using `java.util.function.predicate`."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "   "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 91
    }
  },
  {
    "path": "docs/team/hynridge.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "title: Heinrich\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "## Project: HelloFile"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "HelloFile is a file management application created as an extension to AddressBook - Level 3 (AB3),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "specifically made for tech savvy CS2103T CS students."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "By using HelloFile, students can tag frequently used files/folders with a short nickname, and open their files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "with intuitive commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* **New Feature**: Create the model of the app, by including `Tag`, `Label`, `FileAddress`, and `CurrentPath` class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "(Pull request [\\#81](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/81)) "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  * What it does: allows developers to have a strong architecture to continue the app development."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  * Justification: This feature improves the product significantly because these models are the keys to the continuation of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  * Highlights: This enhancement affects the current AddressBook Level 3 at that point. So a lot of modification and refactoring were made on that period."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  * Credits: This enhancement was developed upon the AddressBook Level 3 model class, with some classes being modified and some class being removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dHynRidge\u0026tabRepo\u003dAY2021S1-CS2103T-F12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  * Keep track of the milestone\u0027s deadline on each iteration."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  * Updated the HelpCommand to show details of specific command  (Pull requests [\\#186](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/186))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  * Updated the FindCommand to be case insensitive (Pull requests [\\#207](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/207))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  * User Guide (UG):"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * Added documentation for the features `label` and `find` [\\#169](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/169)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * Added `help COMMAND` in Features section [\\#210](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/210)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * Added screenshots in the User Interface section. [\\#212](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/212)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * Added some screenshots for the Basic Workflow section. [\\#214](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/214)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  * Developer Guide(DG):"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * Added description for features `Tag` class and `Label` class [\\#164](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/164)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * Updated User Stories section [\\#173](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/173)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    [\\#162](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/162),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    [\\#206](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/206), "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    [\\#213](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/213),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    [\\#269](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/269),   "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  * Contributed to forum discussions (examples: [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/82), "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    [2](https://github.com/nus-cs2103-AY2021S1/forum/issues/70), "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    [3](https://github.com/nus-cs2103-AY2021S1/forum/issues/19), "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    [4](https://github.com/nus-cs2103-AY2021S1/forum/issues/18))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/HynRidge/ped/issues/5), "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    [2](https://github.com/HynRidge/ped/issues/4), "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    [3](https://github.com/HynRidge/ped/issues/3),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    [4](https://github.com/HynRidge/ped/issues/2))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "## \\[Optional\\] Contributions to the User Guide (Extract)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| Priority | As a …​                                                     | I want to …​                                       | So that I can…​                                            |"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| -------- | ---------------------------------------------------------------| ------------------------------------------------------| --------------------------------------------------------------|"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | Student with lots of file                                      | tag my files with a easy to remember tag              | get file path                                                 |"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | First time user                                                | use a help command                                    | start to remember how to use the command                      |"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | Student who prefers to type                                    | use typing to interact with my file system            | use keyboard as much as possible                              |"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | Student who is familiar with command line applications         | name my files                                         | access the file easily next time                              |"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | CS student with many categories of files                       | categorise my files and folders                       | easily manage my files and search files based on categories   |"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | First time user                                                | use help command                                      | start to remember how to use the command                      |"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | Student with lots of files                                     | see a list of my tags                                 | find the tag that I created easily                            |"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | Developer                                                      | open files with a quick command                       | focus on coding and not look to find my files                 |"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* *`    | CS student with a lot of project                               | hide private contact details                          | minimize chance of someone else seeing them by accident       |"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* *`    | Command line user                                              | use commands similar to Linux                         | use the similar Linux command without having to relearn       |"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `*`      | Forgetful user who always forget where his files are located   | tag frequently used files with a easy to remember tag | locate my files easily                                        |"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `*`      | Intermediate user                                              | delete file                                           | not be distracted by it.                                      |"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "## \\[Optional\\] Contributions to the User Guide  (Extract)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### Finding a tag : `find`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "Finds a tag by its keyword (can be tag name and/or label)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* `find notes`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HynRidge": 90
    }
  },
  {
    "path": "docs/team/li-sh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "title: Li Shuo\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "## Project: HelloFile"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "HelloFile is a file management application created as an extension to AddressBook - Level 3 (AB3),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "specifically made for tech savvy CS2103T CS students."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "By using HelloFile, students can tag frequently used files/folders with a short nickname, and open their files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "with intuitive commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **New Feature**: Added the `untag` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "(Pull request [\\#84](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/84))"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * What it does: Allows user to untag an existing tag saved in HelloFile."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * Justification: This feature allows users to remove unwanted tags saved in HelloFile, so that they can declutter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "  their workspace, allowing them to find specific files more easily."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * Credits: This feature was built from AB3\u0027s `delete` method."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "  It was refactored to remove tag from the model instead of person."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **New Feature**: Added the `retag` command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "(Pull request [\\#96](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/96))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * What it does: Allows user to retag existing tags in the HelloFile."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * Justification: This feature allows user to change the tag name of existing tags, in cases where the tag is"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "  misspelled, or have changed name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * Highlights: This feature allows the user to retag the tag name as the same tag name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **New Feature**: Added the `label` command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "(Pull request [\\#185](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/185)))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * What it does: Allows user to add labels to existing tags."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * Justification: This feature is the core feature in allowing users to open multiple tagged files with a single `open`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "  command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * Highlight: This feature allows the user to add multiple unique labels to the tag at once. Duplicate label will simply"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "  be treated as the same label."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dli-s\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dli-s\u0026tabRepo\u003dAY2021S1-CS2103T-F12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * Maintained release for `v1.1`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * Maintaining team tasks together with other team members."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * Modify UntagCommand to use tag instead of index."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "  (Pull requests [\\#99](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/99))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * Update error/help messages."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "  (Pull request [\\#259](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/259),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "  [\\#260](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/260))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * Write additional tests to increase test coverage."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "  (Pull requests [\\#187](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/187))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * User Guide (UG):"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "    * Add documentation for command summary. [\\#152](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/27)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "    * Update FAQ. [\\#261](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/261)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "    * Update command usage. [\\#262](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/262)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "    * Indicated which actions can be undone, redone, and added screenshots. [\\#269](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/269)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "    * Update find command guide. [\\#273](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/273)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * Developer Guide (DG):"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "    * Update DG and include `UntagCommand`, `RetagCommand` implementation details. [\\#167](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/167)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": "  [\\#83](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/83)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * Contributed to forum discussions"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "  (examples: [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/129),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": "  [2](https://github.com/nus-cs2103-AY2021S1/forum/issues/156))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "li-s"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "li-s"
        },
        "content": "  (examples: [1](https://github.com/li-s/ped/issues/7),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "  [2](https://github.com/li-s/ped/issues/10),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": "  [3](https://github.com/li-s/ped/issues/11))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": "  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": "  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": "  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "li-s"
        },
        "content": "  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "li-s"
        },
        "content": "  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "li-s"
        },
        "content": "  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "li-s"
        },
        "content": "  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "li-s"
        },
        "content": "  "
      }
    ],
    "authorContributionMap": {
      "li-s": 81
    }
  },
  {
    "path": "docs/team/luo-git.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "title: Lu Luoyi\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "## Project: HelloFile"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "HelloFile is a file management application created as an extension to AddressBook - Level 3 (AB3),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "specifically made for tech savvy CS2103T CS students."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "By using HelloFile, students can tag frequently used files/folders with a short nickname, and open their files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "with intuitive commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* **New Feature**: Added the `tag` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "(Pull request [\\#86](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/86))"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * What it does: Allows user to add a new tag to be saved in HelloFile."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Justification: This feature allows users to save a tag in HelloFile to be opened later, therefore making opening"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  files easier for them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Credits: This feature was built from AB3\u0027s `add` method."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  It was refactored to add tag into the model instead of person."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* **New Feature**: Added the ability to open files using a `tag`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "(Pull request [\\#91](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/91))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * What it does: Allows user to open previously saved tags using a tag."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Justification: This feature is central to our product, since we want users to be able to save the location of their"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  files and open them with a short command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Highlights: The feature is interesting to implement as JavaFX freezes in a Linux environment when the library method"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  `java.awt.Desktop.getDesktop().open()` is invoked. I suspect the reason is that this method blocks the thread"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  that JavaFX\u0027s UI is running on. The solution that was implemented is running the `open()` method on a different thread."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  (Bug fix pull request [\\#216](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/216))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* **New Feature**: Added the ability to open files using a `label`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "(Pull request [\\#194](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/194)))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * What it does: Allows user to open previously saved tags using a tag, thereby opening multiple files at the same time."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Justification: This feature improves the product significantly as it allows users to open multiple files that they"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  need at the same time."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Highlight: This feature is an add-on to the open feature implemented earlier in the development cycle. I refactored"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  out the `openTags` method to make the code cleaner and more maintainable."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "(Pull requests [\\#183](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/183),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "[\\#184](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/184))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * What it does: Allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  by using the redo command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in using commands,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in the future."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  Through discussion with the team, we have decided on the commands that can be undone and redone."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Credits: Original implementation is from [AddressBook Level 4](https://github.com/se-edu/addressbook-level4)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  Made some changes to adapt the implementation to HelloFile\u0027s model and commands."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dluo-git\u0026tabRepo\u003dAY2021S1-CS2103T-F12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Maintained release for `v1.3`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Maintaining team tasks together with other team members."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Update CLI syntax to match HelloFile."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  (Pull requests [\\#83](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/83),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  [\\#267](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/267))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Update Tag and TagCommand to use absolute file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  (Pull request [\\#153](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/153))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Add more predicates to enhance `FindCommand` to find characters instead of words."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  (Pull request [\\#118](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/118))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Write additional tests to increase test coverage."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  (Pull requests [\\#189](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/189),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  [\\#268](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/268))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * User Guide (UG):"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    * Add documentation for command summary. [\\#27](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/27)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    * Update UG with more information such as longer introduction and more descriptive guides for commands. [\\#213](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/213)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Developer Guide (DG):"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    * Update DG Diagrams and include `TagCommand`, `OpenCommand` implementation details. [\\#154](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/158)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Proof reading:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    * Proof read UG and DG and correct mistakes. [\\#177](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/177)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* **Contribution to Team-based Tasks**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Made a logo for HelloFile to be used in UG and presentations."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  [\\#193](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/193),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  [\\#81](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/81),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  [\\#87](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/87),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  [\\#276](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/276)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Contributed to forum discussions"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  (examples: [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/370),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  [2](https://github.com/nus-cs2103-AY2021S1/forum/issues/312),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  [3](https://github.com/nus-cs2103-AY2021S1/forum/issues/271),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  [4](https://github.com/nus-cs2103-AY2021S1/forum/issues/374))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  (examples: [1](https://github.com/luo-git/ped/issues/5),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  [2](https://github.com/luo-git/ped/issues/3),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": "  [3](https://github.com/luo-git/ped/issues/6))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": "## \\[Optional\\] Contributions to the User Guide (Extract)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "As the information age encroaches out lives, our digital footprint has become larger and larger."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "When we accumulate many files from work, school and daily lives,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "we tend to spend a lot of time locating the files that we need."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "In an Internation Data Corporation (IDC) [white paper](https://denalilabs.com/static/ProductivityWhitepaper.pdf)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "published in 2012, a survey of 1200 information workers and IT professionals around the world"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "shows that they spend an average of 4.5 hours a week looking for documents. That is a lot of productivity time wasted!"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "This is where our solution, HelloFile, comes in."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": "*HelloFile* is a desktop application for professionals who have to manage a lot of files, specifically **tech savvy CS2103T CS students**."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "It is optimised for use under Command Line Interface (CLI)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "By using our application, you can tag frequently used files/folders with a short nickname, and open your them"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": "with a single command. We hope by using our application, you can manage your files with ease. You can"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": "make your life easier one file at a time, and free up your precious time to spend on things you truly enjoy."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": "## \\[Optional\\] Contributions to the Developer Guide (Extract)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### Adding of Tags: TagCommand"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luo-git"
        },
        "content": "[TagCommand](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/logic/commands/TagCommand.java)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luo-git"
        },
        "content": "adds a new `Tag` to `AddressBook` if the tag\u0027s `TagName` is not a duplicate and the tag\u0027s `FileAddress`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luo-git"
        },
        "content": "is pointing to a valid file."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Firstly, `TagCommand` checks if the file address given is absolute or relative file path."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luo-git"
        },
        "content": "If the address is relative, it converts the relative path to absolute address by concatenating the relative"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luo-git"
        },
        "content": "path to the current path stored in `Model`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luo-git"
        },
        "content": "We designed `TagCommand` this way so that the users can use our File Explorer interface to navigate to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luo-git"
        },
        "content": "a folder, then tag files using relative file addresses."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Lastly, TagCommand checks if the file is present using `java.io.File.exists()` before adding the tag to `Model`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### Opening of Tags: OpenCommand"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luo-git"
        },
        "content": "[OpenCommand](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/logic/commands/OpenCommand.java)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luo-git"
        },
        "content": "accepts either a `Tag` or a `Label`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luo-git"
        },
        "content": "It filters the list of `Tags` stored in `AddressBook` by the `Tag` or `Label` supplied, and generate a list of `Tag`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luo-git"
        },
        "content": "to be opened."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luo-git"
        },
        "content": "After that, it opens the files located at the `Tag`\u0027s `FileAddress` if the file is present and user has read permission."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luo-git"
        },
        "content": "`CommandException` is thrown if tag is not present, the file cannot be found or no read permission."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luo-git"
        },
        "content": "We implemented OpenCommand using `java.awt.Desktop`,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luo-git"
        },
        "content": "which supports various desktop capabilities such as `open()`. `Desktop` ensures that our application can operation across"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luo-git"
        },
        "content": "most java-supported platforms, hence fulfilling our product\u0027s requirement to be platform independent."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luo-git"
        },
        "content": "However, there are some significant drawback of using `java.awt.Desktop`. The platform that HelloFile operates on must"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luo-git"
        },
        "content": "support `Desktop`. This means that our application will never work on a headless environment."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luo-git"
        },
        "content": "As a developer, you can check whether the environment supports `Desktop`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luo-git"
        },
        "content": "using the library method `java.awt.Desktop.isDesktopSupported()`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Another drawback is that `java.awt.Desktop.open()` blocks the JavaFX thread and causes the UI to freeze in non-Windows"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luo-git"
        },
        "content": "environment. We believe this is due to concurrency issue related to JavaFX."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Regretfully, we have yet to find an elegant solution for this problem after consulting our professor."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luo-git"
        },
        "content": "The current solution is running `Desktop.open()` on a separate thread, which solves the problem."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "luo-git"
        },
        "content": "We have tested this command under Windows and Ubuntu Linux."
      }
    ],
    "authorContributionMap": {
      "luo-git": 154
    }
  },
  {
    "path": "docs/team/ma-yueran.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "title: Ma Yueran\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "## Project: HelloFile"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "HelloFile is a file management application created as an extension to AddressBook - Level 3 (AB3),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "specifically made for tech savvy CS2103T CS students."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "By using HelloFile, students can tag frequently used files/folders with a short nickname, and open their files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "with intuitive commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* **New Feature**: Added theme switching for UI."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "(Pull request [\\#98](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/98), "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "[\\#276](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/276))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * What it does: allows the user to switch the theme of UI (e.g. Light Theme, Dark Theme, Galaxy Theme...)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * Justification: This feature is nice to have as it provides more options for the UI appearance, and the user can switch the theme to make the Ui fit his mood or the environment. E.g. Switch to Dark Theme at night."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * Highlights: This enhancement does not affect the Logic and Model components much, but it needs to interact with storage as the theme chosen needs to be saved upon exiting the app and loaded when launching the app."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * Credits: *{JavaFx was used to implement the popup window for theme switching}*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* **New Feature**: Added Internal File Explorer."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "(Pull request [\\#154](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/154), "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "[\\#191](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/191))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * What it does: allows the user to view files under different directories."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * Justification: This feature makes command `tag` much easier to use, since it allows the user to tag a file using its relative path (In v1.2, `tag` command only accept absolute file path)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * Highlights: This is a new and unique feature of HelloFile compared to AB3, new models and UI components are added. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* **New Feature**: Added `cd` command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "(Pull request [\\#162](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/162))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * What it does: allows the user to change the current directory of the Internal File Explorer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * Justification: This feature is crucial to the Internal File Explorer since it allows the user to navigate to different directories. There are three ways of using `cd`, cd to an absolute directory, cd to a child directory and cd to a parent directory."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * Highlights: The format of `cd` command for HelloFile is not exactly the same as the traditional cd command, as we tried to use prefixes for parsing, but the command is still able to go to different directories without any problems."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dMa-Yueran\u0026tabRepo\u003dAY2021S1-CS2103T-F12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * Maintaining team tasks together with other team members."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * Holding Zoom meetings for the team as my Zoom account does not have time limit."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* **Enhancements to existing features**: "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * Replace the AddressBook Level 3 UI with new UI."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  (Pull request [\\#77](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/77))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * Add more themes for UI."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  (Pull request [\\#98](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/98),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  [\\#271](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/271),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  [\\#276](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/276))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    * Added the documentation for the feature `cd`. [\\#176](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/176)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    * Update images to fit new UI. [\\#211](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/211)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    * Added implementation details of the `cd` and *Internal File Explorer* feature. [\\#168](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/168)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  [\\#279](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/279), "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  [\\#164](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/164), "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  [\\#91](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/91), "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  [\\#81](https://github.com/AY2021S1-CS2103T-F12-1/tp/pull/81)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  (examples: [1](https://github.com/Ma-Yueran/ped/issues/3), "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  [2](https://github.com/Ma-Yueran/ped/issues/5), "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  [3](https://github.com/Ma-Yueran/ped/issues/6))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "## \\[Optional\\] Contributions to the User Guide (Extract)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Changing current directory : `cd`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Changes the current directory of the HelloFile internal File Explorer. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "You can change the current directory in 3 ways:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "By using `f\u003e` to go to a folder using an absolute path,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "by using `./` to go to a folder using a relative path,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "or using `../` to go to the parent folder."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Alternative, you can click on the folder in the *File Explorer Panel* to navigate."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format 1: `cd f\u003eABSOLUTE_FILE_PATH`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format 2: `cd ./RELATIVE_FILE_PATH`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format 3: `cd ../`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "![cd](../images/screenshots/cd_command.png)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* `cd f\u003eC:\\Users` (Changes the current directory to `C:\\Users`)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* `cd ./tp` (Changes the current directory to the child directory `tp`)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* `cd ../` (Changes the current directory to the parent directory)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "*The image was not added by me, and the command format was also updated by my teammate to fit the new format.*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "## \\[Optional\\] Contributions to the Developer Guide (Extract)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Changing of Directory: CdCommand"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "[CdCommand](https://github.com/AY2021S1-CS2103T-F12-1/tp/blob/master/src/main/java/seedu/address/logic/commands/CdCommand.java)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "changes the current directory of the HelloFile internal File Explorer. `CommandException` is thrown if the given directory "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "is invalid, cannot be found, or cannot be set as the current directory (*e.g. the given directory is not a folder*)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "CdCommand calls `setAddress` in `CurrentPath` to set the current directory to the absolute address parsed from the user input."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Then, `CurrentPath` will update the list of children files `FileList` to fit the new current directory."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Moreover, it also updates `javafx.scene.control.ListView` in `FileExplorer` as `ListView` is bound to the `FileList` of the children files "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "under the `CurrentPath`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Internal File Explorer"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Internal File Explorer is a simple file explorer that supports viewing files on your computer. It contains a `CurrentPath` that "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "represents the directory the explorer is viewing, as well as a `FileList` of the children files under that directory. The "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "user can use `CdCommand` to change the current directory of the explorer, so he or she can view files under different directories."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "The purpose of implementing Internal File Explorer is to make tagging files easier by supporting tagging files using their "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "relative paths (*e.g. the file name*). This can make tagging files easier especially when the user wants to tag multiple files "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "under the same directory."
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 115
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 1,
      "-": 393
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 1,
      "-": 249
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing HelloFile ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs, initializedPrefs.getSavedFilePathValue());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        logger.info(\"Starting AddressBook \" + VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping HelloFile ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            assert model !\u003d null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs(), model.getCurrentPath().getAddress().value);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 5,
      "Ma-Yueran": 2,
      "-": 177
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.theme.ThemeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String DEFAULT_THEME_NAME \u003d ThemeSet.DARK_THEME.getThemeName();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final String themeName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width, position and theme."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        themeName \u003d DEFAULT_THEME_NAME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width, position and theme."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition, String themeName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.themeName \u003d themeName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getThemeName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return themeName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates + \"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sb.append(\"Theme: \" + themeName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 15,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String LOG_FILE \u003d \"hellofile.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG_INPUT \u003d \"The Tag provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG_DISPLAYED_INDEX \u003d \"The Tag index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MESSAGE_TAGS_LISTED_OVERVIEW \u003d \"%1$d tags listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 1,
      "Anthony6401": 1,
      "HynRidge": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/SavedFilePath.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.commons.util.FileUtil.isFileExists;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " *  A Serializable class that contains the saved file path of the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class SavedFilePath {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String DEFAULT_FILE_PATH \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SavedFilePath.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a {@code SavedFilePath} with the default value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public SavedFilePath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.value \u003d DEFAULT_FILE_PATH;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a {@code SavedFilePath} with the given value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public SavedFilePath(@JsonProperty(\"value\") String value) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Path path \u003d Paths.get(value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (isFileExists(path)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            this.value \u003d path.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            logger.warning(\"Invalid saved file path! Starting with the default file path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            this.value \u003d DEFAULT_FILE_PATH;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void setValue(String value) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                || (other instanceof SavedFilePath // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u0026\u0026 value.equals(((SavedFilePath) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return Files.exists(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns true if the {@code toCheck} contains the {@code key}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *       containsCharIgnoreCase(\"ABcdef\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *       containsCharIgnoreCase(\"ABcdef\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *       containsWordIgnoreCase(\"ABcdef\", \"dd\") \u003d\u003d false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param toCheck cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param key cannot be null, cannot be empty"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static boolean containsCharIgnoreCase(String toCheck, String key) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        requireNonNull(key);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String preparedKey \u003d key.trim().toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String preparedStr \u003d toCheck.toLowerCase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        checkArgument(!preparedKey.isEmpty(), \"Key parameter cannot be empty\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return preparedStr.contains(preparedKey);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 19,
      "HynRidge": 3,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.explorer.CurrentPath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tags */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    ObservableList\u003cTag\u003e getFilteredTagList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /** Returns the current path of HelloFile */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    CurrentPath getCurrentPath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of files */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    ObservableList\u003cFile\u003e getFilteredFileList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 8,
      "HynRidge": 2,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.explorer.CurrentPath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public ObservableList\u003cTag\u003e getFilteredTagList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return model.getFilteredTagList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public CurrentPath getCurrentPath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return model.getCurrentPath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ObservableList\u003cFile\u003e getFilteredFileList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return model.getFilteredFileList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 10,
      "HynRidge": 3,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddressType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public enum AddressType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    ABSOLUTE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    CHILD,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    PARENT"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CdCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CHILD_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARENT_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.explorer.CurrentPath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Sets the current path of the file explorer."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class CdCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cd\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \": Changes the current path of the file explorer\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            + \"\\n\\t(1)\" + PREFIX_FILE_ADDRESS + \"ABSOLUTE PATH\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            + \"\\n\\t(2)\" + PREFIX_CHILD_PATH + \"CHILD FOLDER NAME\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            + \"\\n\\t(3)\" + PREFIX_PARENT_PATH"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"\\n\\nExamples: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            + \"\\n\\t(1)\" + COMMAND_WORD + \" \" + PREFIX_FILE_ADDRESS + \"F:\\\\OneDrive\\\\CS2013T \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            + \"\\n\\t(2)\" + COMMAND_WORD + \" \" + PREFIX_CHILD_PATH + \"OneDrive\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            + \"\\n\\t(3)\" + COMMAND_WORD + \" \" + PREFIX_PARENT_PATH;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String CD_COMMAND_USAGE \u003d COMMAND_WORD + \" \" + \"f/FILE_PATH\" + \" OR \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + COMMAND_WORD + \" ./CHILD_FILE PATH\" + \" OR \" + COMMAND_WORD + \" ../\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Current path set to \u0027%s\u0027\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String MESSAGE_PATH_NOT_FOUND \u003d \"Cannot find \u0027%s\u0027\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String MESSAGE_PATH_INVALID \u003d \"Cannot set the path to \u0027%s\u0027\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String MESSAGE_BLANK_PATH \u003d \"The path given cannot be blank!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String MESSAGE_PARENT_PATH_NOT_BLANK \u003d \"../ does not accept any arguments\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String MESSAGE_NO_PARENT_PATH \u003d \"Current path does not have a parent path.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_ADDRESS_TYPE \u003d \"The address type being proceed is unknown\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_NO_PERMISSION \u003d \"You have no permission to open %s.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private AddressType addressType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String addressString;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a CdCommand to change the current path of the file explorer to the given {@code FileAddress}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public CdCommand(AddressType addressType, String addressString) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        requireNonNull(addressType, addressString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.addressType \u003d addressType;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.addressString \u003d addressString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Sets the current path of the file explorer to the input file address."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws CommandException if the input file address is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        CurrentPath currentPath \u003d model.getCurrentPath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String absolutePathString;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        switch (addressType) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        case ABSOLUTE:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            absolutePathString \u003d addressString;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        case CHILD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            absolutePathString \u003d currentPath.getAddress().value + \"/\" + addressString;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        case PARENT:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            absolutePathString \u003d currentPath.getParentAddress();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new CommandException(MESSAGE_UNKNOWN_ADDRESS_TYPE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (absolutePathString \u003d\u003d null \u0026\u0026 addressType.equals(AddressType.PARENT)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PARENT_PATH);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!FileAddress.isValidFileAddress(absolutePathString)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new CommandException(FileAddress.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        File pathToSet \u003d new File(absolutePathString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String canonicalPath;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!pathToSet.exists()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_PATH_NOT_FOUND, addressString));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!pathToSet.isDirectory()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_PATH_INVALID, addressString));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            canonicalPath \u003d pathToSet.getCanonicalPath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new CommandException(exception.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Check if user has read permission to that path"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!pathToSet.canRead()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_PERMISSION, canonicalPath));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        FileAddress newPath \u003d new FileAddress(canonicalPath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        currentPath.setAddress(newPath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, canonicalPath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                || (other instanceof CdCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                \u0026\u0026 addressType.equals(((CdCommand) other).addressType)) // address type check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                \u0026\u0026 addressString.equals(((CdCommand) other).addressString);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 2,
      "luo-git": 7,
      "Ma-Yueran": 111,
      "HynRidge": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String CLEAR_COMMAND_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clear the tag list. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"\\n\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All tags have been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 1,
      "luo-git": 1,
      "HynRidge": 3,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String EXIT_COMMAND_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exit from HelloFile app\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"\\n\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": " * Finds and lists all tag in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String FIND_COMMAND_USAGE \u003d COMMAND_WORD + \" \" + \"KEYWORD\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tag whose tag name/label contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"Parameters: KEYWORD1 [KEYWORD2]...\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"Example: \\n\\t(i) (Find by tag name) \" + COMMAND_WORD + \" tagname1 tagname2 tagname3\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"\\n\\t(ii) (Find by label) \" + COMMAND_WORD + \" label1 label2 label3\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"\\n\\t(iii) (Find by label \u0026 tag name) \" + COMMAND_WORD + \" tagname1 label1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final TagNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public FindCommand(TagNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        model.updateFilteredTagList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                String.format(Messages.MESSAGE_TAGS_LISTED_OVERVIEW, model.getFilteredTagList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 1,
      "HynRidge": 12,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String STRING_FORMAT \u003d \"%-20s %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d String.format(\"%-14s %s\", \"Command\", \"Usage\\n\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-22s %s\", CdCommand.COMMAND_WORD, CdCommand.CD_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-21s %s\", ClearCommand.COMMAND_WORD, ClearCommand.CLEAR_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-22s %s\", ExitCommand.COMMAND_WORD, ExitCommand.EXIT_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-22s %s\", FindCommand.COMMAND_WORD, FindCommand.FIND_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-22s %s\", LabelCommand.COMMAND_WORD, LabelCommand.LABEL_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-24s %s\", ListCommand.COMMAND_WORD, ListCommand.LIST_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(STRING_FORMAT, OpenCommand.COMMAND_WORD, OpenCommand.OPEN_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-21s %s\", RedoCommand.COMMAND_WORD, RedoCommand.REDO_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-21s %s\", RetagCommand.COMMAND_WORD, RetagCommand.RETAG_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(STRING_FORMAT, ShowCommand.COMMAND_WORD, ShowCommand.SHOW_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-22s %s\", TagCommand.COMMAND_WORD, TagCommand.TAG_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-20s %s\", UndoCommand.COMMAND_WORD, UndoCommand.UNDO_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-20s %s\", UnlabelCommand.COMMAND_WORD, UnlabelCommand.UNLABEL_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(STRING_FORMAT, UntagCommand.COMMAND_WORD, UntagCommand.UNTAG_COMMAND_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String INVALID_KEYWORD_MESSAGE \u003d \"%s is an unknown command\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a new HelpCommand with the given command string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param commandWord valid command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public HelpCommand(String commandWord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireNonNull(commandWord);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case CdCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new CommandResult(CdCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new CommandResult(ClearCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new CommandResult(ExitCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new CommandResult(FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case LabelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new CommandResult(LabelCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        case UnlabelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new CommandResult(UnlabelCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new CommandResult(ListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new CommandResult(OpenCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new CommandResult(RedoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case RetagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new CommandResult(RetagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new CommandResult(ShowCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new CommandResult(TagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new CommandResult(UndoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case UntagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new CommandResult(UntagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new CommandException(String.format(INVALID_KEYWORD_MESSAGE, commandWord));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                || (other instanceof HelpCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 commandWord.equals(((HelpCommand) other).commandWord));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 2,
      "HynRidge": 68,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LabelCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagNameEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": " * Adds label(s) to a specified tag."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class LabelCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"label\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds Label(s) to an existing Tag. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"\\n\\nParameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + PREFIX_TAG_NAME + \"TAG_NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + PREFIX_LABEL_NAME + \"LABEL_NAME1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"[\" + PREFIX_LABEL_NAME + \"LABEL_NAME2\" + \"]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + PREFIX_TAG_NAME + \"cs2103 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + PREFIX_LABEL_NAME + \"notes \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + PREFIX_LABEL_NAME + \"CS2103T\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String LABEL_COMMAND_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TAG_NAME + \"TAG_NAME\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \" \" + PREFIX_LABEL_NAME + \"LABEL1\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \" [\" + PREFIX_LABEL_NAME + \"LABEL2]...\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tag successfully updated: %1$s!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_TAG_NOT_FOUND \u003d \"Tag: %s not found!\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \" Please make sure that Tag is present before labeling.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LABEL \u003d \"Duplicate Label!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"File not found at %s!\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \" Please make sure that file is present before adding a label.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private final TagName tagName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private final Set\u003cLabel\u003e labels;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Creates a LabelCommand to add labels to the specified {@code tagName}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public LabelCommand(TagName tagName, Set\u003cLabel\u003e labels) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.labels \u003d labels;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Executes the command and adds the labels to a specified tag in the model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return A Command result of executing LabelCommand."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Check if tag exists"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": "        List\u003cTag\u003e tagList \u003d model.findFilteredTagList(new TagNameEqualsKeywordPredicate(tagName));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (tagList.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_TAG_NOT_FOUND, tagName.toString()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Get the tag"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag tagToChange \u003d tagList.get(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Get file address, previous labels"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": "        FileAddress fileAddress \u003d tagToChange.getFileAddress();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!FileUtil.isFileExists(Paths.get(fileAddress.value))) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FILE_NOT_FOUND, fileAddress));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Set\u003cLabel\u003e previousLabels \u003d tagToChange.getLabels();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Append new labels into previous labels"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "li-s"
        },
        "content": "        labels.addAll(previousLabels);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Create new tag"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag newTag \u003d new Tag(tagName, fileAddress, labels);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // Changes the old tag to the edited tag"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        model.setTag(tagToChange, newTag);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Save commit for undo"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "li-s"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, newTag));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || (other instanceof LabelCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \u0026\u0026 (this.labels.equals(((LabelCommand) other).labels))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        \u0026\u0026 this.tagName.equals(((LabelCommand) other).tagName));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 90,
      "luo-git": 7,
      "Anthony6401": 3,
      "HynRidge": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TAGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": " * Lists all tags in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ls\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String LIST_COMMAND_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows the list of all tag. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"\\n\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String VALID_USER_INPUT \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tags\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String MESSAGE_INVALID_USER_INPUT \u003d \"Please don\u0027t pass in any argument for list command!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        model.updateFilteredTagList(PREDICATE_SHOW_ALL_TAGS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                || other instanceof ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 2,
      "Anthony6401": 9,
      "HynRidge": 5,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OpenCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.TagLabelEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.TagNameEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class OpenCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \": Opens the file specified in the filepath of a tag or label. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"This command accepts either tag or label but not both.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"\\n\\nParameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + PREFIX_TAG_NAME + \"TAG_NAME or \" + PREFIX_LABEL_NAME + \"LABEL_NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"\\n\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + PREFIX_TAG_NAME + \"cs2103 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String OPEN_COMMAND_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TAG_NAME + \"TAG_NAME\" + \" OR \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_LABEL_NAME + \"LABEL\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"File opened! Tag: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_TAG_NOT_FOUND \u003d \"Tag \u0027%s\u0027 not found!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_LABEL_NOT_FOUND \u003d \"No tag found with the label %s!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_ERROR \u003d \"Error opening %s: \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"The file: %s doesn\u0027t exist.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_FILE_NO_PERMISSION \u003d \"You have no permission to open %s.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_ENV_NOT_DESKTOP_SUPPORTED \u003d \"Sorry, open command is not supported\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"in your platform.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final TagName tagName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final Label label;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Creates an OpenCommand to open the file specified in the {@code Tag}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public OpenCommand(TagName tagName) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert tagName !\u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.label \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Creates an OpenCommand to open the file specified by the {@code Label}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public OpenCommand(Label label) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert label !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.tagName \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Executes the command and opens the file specified by tagName."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws CommandException if tagName cannot be found in model."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert label !\u003d null || tagName !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        List\u003cTag\u003e tagsToOpen \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (tagName !\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Open tag based on tag name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Check if tagName is in tag list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            List\u003cTag\u003e tagList \u003d model.findFilteredTagList(new TagNameEqualsKeywordPredicate(tagName));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (tagList.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_TAG_NOT_FOUND, tagName.toString()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assert tagList.size() \u003d\u003d 1 : \"Only one tag should be found.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            tagsToOpen \u003d List.of(tagList.get(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Open tag based on label"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            List\u003cTag\u003e tagList \u003d model.findFilteredTagList(new TagLabelEqualsKeywordPredicate(label));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (tagList.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_LABEL_NOT_FOUND, label.toString()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            tagsToOpen \u003d tagList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Check if environment is desktop supported before opening files"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new CommandException(MESSAGE_ENV_NOT_DESKTOP_SUPPORTED);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Perform open and get a set of opened tags"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Map\u003cTag, String\u003e openResults \u003d openTags(tagsToOpen);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Format result string"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        boolean hasError \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        for (Tag tag : tagsToOpen) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String message \u003d openResults.get(tag);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (message.startsWith(\"Error\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                hasError \u003d true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            sb.append(message).append(\"\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String resultMessage \u003d sb.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Remove last \"\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (resultMessage.endsWith(\"\\n\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            resultMessage \u003d resultMessage.substring(0, resultMessage.length() - 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Throw exception if some tags were not opened"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (hasError) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new CommandException(resultMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new CommandResult(resultMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Opens all tags from a list and returns a map of runtime messages."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Map\u003cTag, String\u003e openTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Map\u003cTag, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Open every tags in the list and store error messages"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        tags.forEach(tag -\u003e {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            File file \u003d new File(tag.getFileAddress().value);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                result.put(tag, String.format(MESSAGE_ERROR + MESSAGE_FILE_NOT_FOUND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        tag.getTagName(), tag.getFileAddress()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else if (!file.canRead()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                result.put(tag, String.format(MESSAGE_ERROR + MESSAGE_FILE_NO_PERMISSION,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        tag.getTagName(), tag.getFileAddress()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                // Use concurrent threads here to avoid JavaFX freeze in Linux"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                new Thread(() -\u003e {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        Desktop.getDesktop().open(file);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                }).start();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                result.put(tag, String.format(MESSAGE_SUCCESS, tag));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        });"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (!(other instanceof OpenCommand)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        OpenCommand o \u003d (OpenCommand) other;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (this.tagName !\u003d null \u0026\u0026 o.tagName !\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return this.tagName.equals(o.tagName);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (this.label !\u003d null \u0026\u0026 o.label !\u003d null) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return this.label.equals(o.label);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 174,
      "li-s": 2,
      "HynRidge": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String REDO_COMMAND_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Redo the recent command. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\nCommands that can be redone:\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\n1. tag\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\n2. retag\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\n3. untag\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\n4. label\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\n5. unlabel\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\n6. clear\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\n7. undo\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"\\n\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to redo! No more commands to redo!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        logger.info(MESSAGE_SUCCESS + \"\\n\" + model.getAddressBook());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return obj instanceof RedoCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 47,
      "li-s": 8,
      "HynRidge": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RetagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_TAG_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagNameEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Changes a tag\u0027s name in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class RetagCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"retag\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \": Retags the tagged file identified by the old tag into the new tag.\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + PREFIX_OLD_TAG_NAME + \"OLD_TAG_NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + PREFIX_TAG_NAME + \"NEW_TAG_NAME\\n\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + PREFIX_OLD_TAG_NAME + \"my_files \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + PREFIX_TAG_NAME + \"my_old_files \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String RETAG_COMMAND_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + PREFIX_OLD_TAG_NAME + \"OLD_TAG_NAME \" + PREFIX_TAG_NAME + \"NEW_TAG_NAME\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_RETAG_TAG_SUCCESS \u003d \"Retagged Tag: %s to Tag: %s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_OLD_TAG_NOT_FOUND \u003d \" %s tag not found!\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \" Please make sure that the old tag is present before retagging.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Duplicate tag name!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private final TagName newTagName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private final TagName oldTagName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Creates a RetagCommand to retag the specified {@code oldTagName} to {@code newTagName}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public RetagCommand(TagName oldTagName, TagName newTagName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "        requireNonNull(oldTagName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "        requireNonNull(newTagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.oldTagName \u003d oldTagName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.newTagName \u003d newTagName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Executes the command and renames the tag in the model to the new tag."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return A Command result of executing retag command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Check if oldTagName is in tag list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "        List\u003cTag\u003e oldTagList \u003d model.findFilteredTagList(new TagNameEqualsKeywordPredicate(oldTagName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (oldTagList.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_OLD_TAG_NOT_FOUND, oldTagName.toString()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Check if newTagName is in tag list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": "        List\u003cTag\u003e newTagList \u003d model.findFilteredTagList(new TagNameEqualsKeywordPredicate(newTagName));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!newTagList.isEmpty() \u0026\u0026 !newTagName.equals(oldTagName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Get oldTagName"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag tagToChange \u003d oldTagList.get(0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Get file path"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "li-s"
        },
        "content": "        FileAddress fileAddress \u003d tagToChange.getFileAddress();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Add new tag"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag newTag \u003d new Tag(newTagName, fileAddress, tagToChange.getLabels());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // Changes the old tag to the edited tag"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        model.setTag(tagToChange, newTag);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Save commit for undo"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_RETAG_TAG_SUCCESS, oldTagName, newTagName));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || (other instanceof RetagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \u0026\u0026 newTagName.equals(((RetagCommand) other).newTagName)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \u0026\u0026 oldTagName.equals(((RetagCommand) other).oldTagName));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 84,
      "luo-git": 6,
      "Anthony6401": 5,
      "HynRidge": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TAG_INPUT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagNameEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Shows a Tag\u0027s file path identified using it\u0027s tag name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a tag\u0027s file address. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"\\n\\nParameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            + PREFIX_TAG_NAME + \"TAG_NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"\\n\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            + PREFIX_TAG_NAME + \"cs2103 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String SHOW_COMMAND_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TAG_NAME + \"TAG_NAME\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s\u0027s file path: %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String NO_LABEL_IN_TAG \u003d \"There is no label associated with this Tag.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private final TagNameEqualsKeywordPredicate predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Creates an ShowCommand to show the specified {@code Tag}\u0027s file path"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public ShowCommand(TagNameEqualsKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        List\u003cTag\u003e tags \u003d model.findFilteredTagList(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TAG_INPUT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag tag \u003d tags.get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        builder.append(String.format(MESSAGE_SUCCESS, tag.getTagName(), tag.getFileAddress()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (tag.getLabels().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "            builder.append(\"\\n\").append(NO_LABEL_IN_TAG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            builder.append(tag.getLabels().size() \u003d\u003d 1 ? \"\\nLabel: \" : \"\\nLabels: \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            tag.getLabels().forEach(builder::append);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return new CommandResult(builder.toString().trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                || (other instanceof ShowCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u0026\u0026 predicate.equals(((ShowCommand) other).predicate));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 3,
      "Anthony6401": 62,
      "HynRidge": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": " * Adds a tag to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a tag to the HelloFile\u0027s address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"\\n\\nParameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + PREFIX_TAG_NAME + \"TAG_NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + PREFIX_FILE_ADDRESS + \"FILE_ADDRESS \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"[\" + PREFIX_LABEL_NAME + \"LABEL_NAME\" + \"]...\\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + PREFIX_TAG_NAME + \"cs2103 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + PREFIX_FILE_ADDRESS + \"F:\\\\OneDrive\\\\CS2013T \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + PREFIX_LABEL_NAME + \"CS2103T\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String TAG_COMMAND_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TAG_NAME + \"TAG_NAME\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \" \" + PREFIX_FILE_ADDRESS + \"FILEPATH\" + \" [\" + PREFIX_LABEL_NAME + \"LABEL]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tag added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"File not found at %s!\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \" Please make sure that file is present before adding a tag.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Duplicate tag name!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final Tag toTag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Tag}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public TagCommand(Tag tag) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        toTag \u003d tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private boolean filePresent(String address) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert address !\u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        File file \u003d new File(address);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return file.exists();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Executes the command and add the tag to model."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return A Command result of executing tag command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (model.hasTag(toTag)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Check if file is present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String path;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        boolean isAbsolutePath \u003d Paths.get(toTag.getFileAddress().value).isAbsolute();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        path \u003d toTag.getFileAddress().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (!isAbsolutePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            path \u003d Paths.get(model.getCurrentPath().getAddress().value, toTag.getFileAddress().value)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    .normalize().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (!filePresent(path)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    String.format(MESSAGE_FILE_NOT_FOUND, path));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag absPathTag \u003d toTag.toAbsolute(isAbsolutePath, model.getCurrentPath().getAddress());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        model.addTag(absPathTag);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Save commit for undo"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, absPathTag));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                || (other instanceof TagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \u0026\u0026 toTag.equals(((TagCommand) other).toTag));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 6,
      "luo-git": 34,
      "Anthony6401": 19,
      "HynRidge": 12,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String UNDO_COMMAND_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Undo a recent command\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\nCommands that can be undone:\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\n1. tag\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\n2. retag\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\n3. untag\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\n4. label\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\n5. unlabel\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\n6. clear\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"\\n7. redo\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"\\n\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to undo! No more commands that are undo-able!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        logger.info(MESSAGE_SUCCESS + \"\\n\" + model.getAddressBook());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return obj instanceof UndoCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 47,
      "li-s": 8,
      "HynRidge": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnlabelCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagNameEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Deletes a specified tag\u0027s label(s)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class UnlabelCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unlabel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes Label(s) in an existing Tag. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"\\n\\nParameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            + PREFIX_TAG_NAME + \"TAG_NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + PREFIX_LABEL_NAME + \"LABEL_NAME1 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \"[\" + PREFIX_LABEL_NAME + \"LABEL_NAME2\" + \"]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            + PREFIX_TAG_NAME + \"cs2103 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            + PREFIX_LABEL_NAME + \"notes \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            + PREFIX_LABEL_NAME + \"CS2103T\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String UNLABEL_COMMAND_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TAG_NAME + \"TAG_NAME\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \" \" + PREFIX_LABEL_NAME + \"LABEL1\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \" [\" + PREFIX_LABEL_NAME + \"LABEL2]...\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tag successfully updated: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String MESSAGE_LABEL_MISSING \u003d \"All of this label can\u0027t be found in %s:\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String MESSAGE_DASH \u003d \"- %s\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String MESSAGE_INVALID_LABEL \u003d \"The remaining labels that are not \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            + \"listed above have been deleted.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String MESSAGE_TAG_NOT_FOUND \u003d \"Tag: %s not found!\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            + \" Please make sure that Tag is present before deleting its label.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private final TagName tagName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private final Set\u003cLabel\u003e labels;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Creates an UnlabelCommand to delete labels to the specified {@code tagName}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public UnlabelCommand(TagName tagName, Set\u003cLabel\u003e labels) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.labels \u003d labels;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the command and deletes the specified tag\u0027s labels according to the arguments."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return A Command result of executing unlabel command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // Check if tag exists"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        List\u003cTag\u003e tagList \u003d model.findFilteredTagList(new TagNameEqualsKeywordPredicate(tagName));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (tagList.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_TAG_NOT_FOUND, tagName.toString()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // Get the tag"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag tagToChange \u003d tagList.get(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        FileAddress fileAddress \u003d tagToChange.getFileAddress();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // Deletes all the matching labels"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Set\u003cLabel\u003e editedLabel \u003d tagToChange.getLabels().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .filter(label -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    if (labels.stream().anyMatch(label::equals)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        labels.remove(label);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag newTag \u003d new Tag(tagName, fileAddress, editedLabel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // Changes the old tag to the edited tag"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        model.setTag(tagToChange, newTag);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (!labels.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            builder.append(String.format(MESSAGE_LABEL_MISSING, tagName));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            labels.forEach(label -\u003e builder.append(String.format(MESSAGE_DASH, label)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            builder.append(MESSAGE_INVALID_LABEL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new CommandResult(builder.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, newTag));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                || (other instanceof UnlabelCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u0026\u0026 (this.labels.equals(((UnlabelCommand) other).labels))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u0026\u0026 this.tagName.equals(((UnlabelCommand) other).tagName));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 3,
      "Anthony6401": 109,
      "HynRidge": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UntagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagNameEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": " * Untags a Tag identified using it\u0027s unique tag."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class UntagCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"untag\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \": Untags the tagged file identified by the unique tag used in the displayed Tag list.\\n\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"Parameters: \" + PREFIX_TAG_NAME + \"TAG_NAME (Must be an existing tag)\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_TAG_NAME + \"HelloFile.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String UNTAG_COMMAND_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TAG_NAME + \"TAG_NAME\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_UNTAG_TAG_SUCCESS \u003d \"Untagged Tag: %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_TAG_NOT_FOUND \u003d \" %s tag not found!\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \" Please make sure that the tag is present before untagging.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private final TagName tagName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public UntagCommand(TagName tagName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Check if tag to untag is in tag list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "        List\u003cTag\u003e tagList \u003d model.findFilteredTagList(new TagNameEqualsKeywordPredicate(tagName));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (tagList.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_TAG_NOT_FOUND, tagName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "        model.deleteTag(tagList.get(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Save commit for undo"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNTAG_TAG_SUCCESS, tagName));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || (other instanceof UntagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \u0026\u0026 tagName.equals(((UntagCommand) other).tagName)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 24,
      "luo-git": 4,
      "HynRidge": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.CdCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.LabelCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.RetagCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.commands.UnlabelCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.UntagCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return new TagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "        case UntagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "            return new UntagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "        case RetagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "            return new RetagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return new OpenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new ShowCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "li-s"
        },
        "content": "        case LabelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "li-s"
        },
        "content": "            return new LabelCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        case CdCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return new CdCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return new UndoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return new RedoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        case UnlabelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new UnlabelCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 8,
      "luo-git": 12,
      "Anthony6401": 7,
      "Ma-Yueran": 9,
      "HynRidge": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CdCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CHILD_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARENT_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.AddressType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.CdCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class CdCommandParser implements Parser\u003cCdCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Prefix prefix \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CdCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * and returns an CdCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public CdCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FILE_ADDRESS, PREFIX_CHILD_PATH, PREFIX_PARENT_PATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!isOnlyOnePrefixPresent(argMultimap, PREFIX_FILE_ADDRESS, PREFIX_CHILD_PATH, PREFIX_PARENT_PATH)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CdCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        AddressType addressType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String addressString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String prefixValue \u003d argMultimap.getValue(prefix).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (PREFIX_FILE_ADDRESS.equals(prefix)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            addressType \u003d AddressType.ABSOLUTE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            addressString \u003d ParserUtil.parseAbsoluteAddress(prefixValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else if (PREFIX_CHILD_PATH.equals(prefix)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            addressType \u003d AddressType.CHILD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            addressString \u003d ParserUtil.parseChildAddress(prefixValue);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else if (PREFIX_PARENT_PATH.equals(prefix)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            addressType \u003d AddressType.PARENT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            addressString \u003d ParserUtil.parseParentAddress(prefixValue);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new ParseException(CdCommand.MESSAGE_UNKNOWN_ADDRESS_TYPE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return new CdCommand(addressType, addressString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Returns true if only one of the prefixes contains {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private boolean isOnlyOnePrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        int numberOfPresents \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (Prefix prefix : prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            if (argumentMultimap.getValue(prefix).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                numberOfPresents++;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return numberOfPresents \u003d\u003d 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 64,
      "HynRidge": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final Prefix PREFIX_TAG_NAME \u003d new Prefix(\"t\u003e\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final Prefix PREFIX_OLD_TAG_NAME \u003d new Prefix(\"o\u003e\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final Prefix PREFIX_FILE_ADDRESS \u003d new Prefix(\"f\u003e\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final Prefix PREFIX_CHILD_PATH \u003d new Prefix(\"./\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final Prefix PREFIX_PARENT_PATH \u003d new Prefix(\"../\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final Prefix PREFIX_LABEL_NAME \u003d new Prefix(\"l\u003e\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 4,
      "Ma-Yueran": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.TagNameContainsCharPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final Logger LOGGER \u003d LogsCenter.getLogger(FindCommandParser.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            LOGGER.info(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new FindCommand(new TagNameContainsCharPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 2,
      "HynRidge": 5,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HelpCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * and returns a HelpCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public HelpCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String trimmedInput \u003d userInput.trim().toLowerCase();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return new HelpCommand(trimmedInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LabelCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.LabelCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": " * Parses input arguments and creates a new LabelCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class LabelCommandParser implements Parser\u003cLabelCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LabelCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * and returns an LabelCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public LabelCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG_NAME, PREFIX_LABEL_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG_NAME, PREFIX_LABEL_NAME)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LabelCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName tagName \u003d ParserUtil.parseTagName(argMultimap.getValue(PREFIX_TAG_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Set\u003cLabel\u003e labels \u003d ParserUtil.parseLabels(argMultimap.getAllValues(PREFIX_LABEL_NAME));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new LabelCommand(tagName, labels);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public ListCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (!userInput.equals(ListCommand.VALID_USER_INPUT)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new ParseException(ListCommand.MESSAGE_INVALID_USER_INPUT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OpenCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OpenCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * and returns an OpenCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public OpenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG_NAME, PREFIX_LABEL_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Use XOR to ensure only 1 argument (t/ or l/) is present"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        boolean hasTagName \u003d arePrefixesPresent(argMultimap, PREFIX_TAG_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        boolean hasLabelName \u003d arePrefixesPresent(argMultimap, PREFIX_LABEL_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        boolean hasOnlyOneArg \u003d hasTagName ^ hasLabelName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!hasOnlyOneArg || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (hasTagName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            TagName tagName \u003d ParserUtil.parseTagName(argMultimap.getValue(PREFIX_TAG_NAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return new OpenCommand(tagName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Label labelName \u003d ParserUtil.parseLabel(argMultimap.getValue(PREFIX_LABEL_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return new OpenCommand(labelName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.CdCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static TagName parseTagName(String name) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!TagName.isValidTagName(trimmedName)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new ParseException(TagName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return new TagName(trimmedName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Parses a {@code String address} into an {@code FileAddress}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static FileAddress parseFileAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!FileAddress.isValidFileAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new ParseException(FileAddress.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return new FileAddress(trimmedAddress);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Parses an address string as an absolute address."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param address the address string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the absolute address string"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws ParseException if the given address string is blank."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String parseAbsoluteAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (trimmedAddress.isBlank()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new ParseException(CdCommand.MESSAGE_BLANK_PATH);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return trimmedAddress;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Parses an address string as a child address."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param address the address string"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the child address string"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws ParseException if the address string given is blank."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String parseChildAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (trimmedAddress.isBlank()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new ParseException(CdCommand.MESSAGE_BLANK_PATH);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return trimmedAddress;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Parses an address string as a parent address."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param address the address string"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the parent address string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws ParseException if the given address string is not blank."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String parseParentAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!trimmedAddress.isBlank()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new ParseException(CdCommand.MESSAGE_PARENT_PATH_NOT_BLANK);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return trimmedAddress;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /** Parses a {@code String label} into an {@code Label}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws ParseException if the given {@code label} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static Label parseLabel(String label) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireNonNull(label);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String trimmedLabel \u003d label.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!Label.isValidLabel(trimmedLabel)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new ParseException(Label.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return new Label(trimmedLabel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Parses a {@code Collection\u003cLabel\u003e labels} into an {@code Set\u003cLabel\u003e}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws ParseException if the given {@code labels} is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static Set\u003cLabel\u003e parseLabels(Collection\u003cString\u003e labels) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireNonNull(labels);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        final Set\u003cLabel\u003e labelSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (String label : labels) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            labelSet.add(parseLabel(label));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return labelSet;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 34,
      "HynRidge": 30,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027tag f/C:/abc.txt t/myFile\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RedoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class RedoCommandParser implements Parser\u003cRedoCommand\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \"No parameter is expected for redo command!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public RedoCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (userInput.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new ParseException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new RedoCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RetagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_TAG_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.RetagCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": " * Parses input arguments and creates a new RetagCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class RetagCommandParser implements Parser\u003cRetagCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RetagCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * and returns a RetagCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public RetagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_OLD_TAG_NAME, PREFIX_TAG_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_OLD_TAG_NAME, PREFIX_TAG_NAME)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RetagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName oldTagName \u003d ParserUtil.parseTagName(argMultimap.getValue(PREFIX_OLD_TAG_NAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName newTagName \u003d ParserUtil.parseTagName(argMultimap.getValue(PREFIX_TAG_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new RetagCommand(oldTagName, newTagName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShowCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagNameEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Parses input arguments and creates a new ShowCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ShowCommandParser implements Parser\u003cShowCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShowCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * and returns an ShowCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public ShowCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG_NAME)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName tagName \u003d ParserUtil.parseTagName(argMultimap.getValue(PREFIX_TAG_NAME).orElse(\"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return new ShowCommand(new TagNameEqualsKeywordPredicate(tagName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TagCommandParser implements Parser\u003cTagCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TagCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * and returns an TagCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public TagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG_NAME, PREFIX_FILE_ADDRESS, PREFIX_LABEL_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG_NAME, PREFIX_FILE_ADDRESS)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagName tagName \u003d ParserUtil.parseTagName(argMultimap.getValue(PREFIX_TAG_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        FileAddress fileAddress \u003d ParserUtil.parseFileAddress(argMultimap.getValue(PREFIX_FILE_ADDRESS).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Set\u003cLabel\u003e labels \u003d ParserUtil.parseLabels(argMultimap.getAllValues(PREFIX_LABEL_NAME));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Tag tag \u003d new Tag(tagName, fileAddress, labels);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new TagCommand(tag);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 3,
      "luo-git": 7,
      "HynRidge": 11,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UndoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class UndoCommandParser implements Parser\u003cUndoCommand\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \"No parameter is expected for undo command!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public UndoCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (userInput.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new ParseException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new UndoCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnlabelCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.commands.UnlabelCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Parses input arguments and creates a new UnlabelCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class UnlabelCommandParser implements Parser\u003cUnlabelCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnlabelCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * and returns an UnlabelCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public UnlabelCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG_NAME, PREFIX_LABEL_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG_NAME, PREFIX_LABEL_NAME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnlabelCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName tagName \u003d ParserUtil.parseTagName(argMultimap.getValue(PREFIX_TAG_NAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Set\u003cLabel\u003e labels \u003d ParserUtil.parseLabels(argMultimap.getAllValues(PREFIX_LABEL_NAME));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return new UnlabelCommand(tagName, labels);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UntagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.UntagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": " * Parses input arguments and creates a new UntagCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class UntagCommandParser implements Parser\u003cUntagCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UntagCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * and returns a UntagCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public UntagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG_NAME)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UntagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName newTagName \u003d ParserUtil.parseTagName(argMultimap.getValue(PREFIX_TAG_NAME).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new UntagCommand(newTagName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 28,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "//    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "//        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.explorer.FileList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final FileList files;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        files \u003d new FileList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Creates an AddressBook using the Tags in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Replaces the contents of the tag list with {@code tags}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * {@code tags} must not contain duplicate tags."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        setTags(newData.getTagList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns true if a tag with the same identity as {@code tag} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return tags.contains(tag);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Adds a tag to the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The tag must not already exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void addTag(Tag p) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tags.add(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Replaces the given tag {@code target} in the list with {@code editedTag}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The tag identity of {@code editedTag} must not be the same as another existing tag in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        requireNonNull(editedTag);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        tags.setTag(target, editedTag);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void removeTag(Tag key) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tags.remove(key);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return tags.asUnmodifiableObservableList().size() + \" tags in addressbook.\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return tags.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public FileList getFileList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return files;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ObservableList\u003cFile\u003e getObservableFileList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return files.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 tags.equals(((AddressBook) other).tags));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return tags.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 1,
      "Anthony6401": 10,
      "Ma-Yueran": 12,
      "HynRidge": 19,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.explorer.CurrentPath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    Predicate\u003cTag\u003e PREDICATE_SHOW_ALL_TAGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns true if a tag with the same identity as {@code tag} exists in the address book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    boolean hasTag(Tag tag);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Deletes the given tag."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * The tag must exist in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    void deleteTag(Tag target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Adds the given tag."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * {@code tag} must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    void addTag(Tag tag);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Replaces the given tag {@code target} with {@code editedTag}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * The tag identity of {@code editedTag} must not be the same as another existing tag in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    void setTag(Tag target, Tag editedTag);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /** Returns an unmodifiable view of the filtered tag list */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    ObservableList\u003cTag\u003e getFilteredTagList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /** Returns the current path of HelloFile */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    CurrentPath getCurrentPath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /** Returns an unmodifiable view of the filtered file list */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    ObservableList\u003cFile\u003e getFilteredFileList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Updates the filter of the filtered tag list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    void updateFilteredTagList(Predicate\u003cTag\u003e predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Finds the filter of the filtered tag list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    List\u003cTag\u003e findFilteredTagList(Predicate\u003cTag\u003e predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 6,
      "luo-git": 25,
      "Anthony6401": 3,
      "Ma-Yueran": 8,
      "HynRidge": 11,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.explorer.CurrentPath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final FilteredList\u003cTag\u003e filteredTags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final FilteredList\u003cFile\u003e filteredFiles;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final CurrentPath currentPath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        filteredTags \u003d new FilteredList\u003c\u003e(this.versionedAddressBook.getTagList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        filteredFiles \u003d new FilteredList\u003c\u003e(this.versionedAddressBook.getObservableFileList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        currentPath \u003d new CurrentPath(this.userPrefs.getSavedFilePathValue(), this.versionedAddressBook.getFileList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return versionedAddressBook.hasTag(tag);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void deleteTag(Tag target) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        versionedAddressBook.removeTag(target);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        versionedAddressBook.addTag(tag);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        updateFilteredTagList(PREDICATE_SHOW_ALL_TAGS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        versionedAddressBook.setTag(target, editedTag);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Tag List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Tag} backed by the internal list of"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public ObservableList\u003cTag\u003e getFilteredTagList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return filteredTags;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Returns the current path of HelloFile."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the current path"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public CurrentPath getCurrentPath() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return currentPath;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code File} backed by the internal list of"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ObservableList\u003cFile\u003e getFilteredFileList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return filteredFiles;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        filteredTags.setPredicate(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public List\u003cTag\u003e findFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return filteredTags.getSource().stream()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .filter(predicate)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 filteredTags.equals(other.filteredTags);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 37,
      "Anthony6401": 10,
      "Ma-Yueran": 21,
      "HynRidge": 17,
      "-": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.explorer.FileList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns an unmodifiable view of the tag list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * This list will not contain any duplicate tags."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    ObservableList\u003cTag\u003e getTagList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    FileList getFileList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Returns an unmodifiable view of the file list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * This list will not contain any duplicate files."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    ObservableList\u003cFile\u003e getObservableFileList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 2,
      "Ma-Yueran": 9,
      "HynRidge": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.commons.core.SavedFilePath;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    SavedFilePath getSavedFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    void setSavedFilePathValue(String savedFilePath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 5,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.commons.core.SavedFilePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private SavedFilePath savedFilePath \u003d new SavedFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        setSavedFilePath(newUserPrefs.getSavedFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public SavedFilePath getSavedFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.savedFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void setSavedFilePath(SavedFilePath savedFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        requireNonNull(savedFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.savedFilePath \u003d savedFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String getSavedFilePathValue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.savedFilePath.getValue();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void setSavedFilePathValue(String savedFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.savedFilePath.setValue(savedFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u0026\u0026 savedFilePath.equals(o.savedFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, savedFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sb.append(\"\\nSaved file path : \" + savedFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 24,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * This code is adapted from AddressBook Level 4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * {@see https://github.com/se-edu/addressbook-level4/blob/master"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * /src/main/java/seedu/address/model/VersionedAddressBook.java}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * {@code AddressBook} that keeps track of its own history."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class VersionedAddressBook extends AddressBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final List\u003cReadOnlyAddressBook\u003e addressBookStateList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new versioned address book"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param initialState initial state of the address book"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public VersionedAddressBook(ReadOnlyAddressBook initialState) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        addressBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        addressBookStateList.add(new AddressBook(initialState));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Saves a copy of the current {@code AddressBook} state at the end of the state list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        addressBookStateList.add(new AddressBook(this));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        addressBookStateList.subList(currentStatePointer + 1, addressBookStateList.size()).clear();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return currentStatePointer \u003c addressBookStateList.size() - 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!(other instanceof VersionedAddressBook)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook otherVersionedAddressBook \u003d (VersionedAddressBook) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return super.equals(otherVersionedAddressBook)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \u0026\u0026 addressBookStateList.equals(otherVersionedAddressBook.addressBookStateList)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAddressBook.currentStatePointer;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/explorer/CurrentPath.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.model.explorer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * CurrentPath contains the current path (a FileAddress) of the HelloFile"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * file explorer. It also contains the list of children files under the path."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class CurrentPath {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private FileAddress address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private FileList childrenFiles;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a CurrentPath."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param fileList the list to be the children file list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public CurrentPath(String filePath, FileList fileList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        requireNonNull(fileList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        address \u003d new FileAddress(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        childrenFiles \u003d fileList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        updateChildrenFileList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public FileAddress getAddress() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getParentAddress() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        File file \u003d new File(address.value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return file.getParent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setAddress(FileAddress address) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        updateChildrenFileList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void updateChildrenFileList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        File folder \u003d new File(address.value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        List\u003cFile\u003e files \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (File file : folder.listFiles()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            files.add(file);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        childrenFiles.setFiles(files);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (!(obj instanceof CurrentPath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        CurrentPath other \u003d (CurrentPath) obj;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return this.address.equals(other.address) \u0026\u0026 this.childrenFiles.equals(other.childrenFiles);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 13,
      "Anthony6401": 2,
      "Ma-Yueran": 43,
      "HynRidge": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/explorer/FileList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.model.explorer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * The list of children files under the current path."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class FileList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final ObservableList\u003cFile\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final ObservableList\u003cFile\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setFiles(List\u003cFile\u003e files) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        requireAllNonNull(files);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        internalList.setAll(files);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ObservableList\u003cFile\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (!(obj instanceof FileList)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        FileList other \u003d (FileList) obj;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return this.internalList.equals(other.internalList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \u0026\u0026 this.internalUnmodifiableList.equals(other.internalUnmodifiableList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 14,
      "Ma-Yueran": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/label/Label.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.label;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class Label {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "            \"Label should only contain one word with alphanumeric characters, and it should not be blank\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private String label;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a new {@code Label}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param label A valid label"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Label(String label) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireNonNull(label);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        checkArgument(isValidLabel(label), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static boolean isValidLabel(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String getLabel() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setLabel(String label) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assert label !\u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns true if both description have the same identity and data fields."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * This defines a stronger notion of equality between two labels."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!(other instanceof Label)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Label otherLabel \u003d (Label) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return otherLabel.getLabel().equals(getLabel());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return \"[\" + label + \"]\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return label.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 1,
      "HynRidge": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/FileAddress.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Represents a Tag\u0027s file address in the Hello File."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFileAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class FileAddress {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"File address can only take a valid file path!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"([a-zA-z]:)?([!@#$%^\u0026()\\\\[\\\\]{}`~\\\\-_\u0027;\u003d+.,\\\\\\\\/\\\\sa-zA-Z0-9]*)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs an {@code FileAddress}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public FileAddress(String address) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        checkArgument(isValidFileAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        value \u003d formatByOS(address);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns true if a given string is a valid file address."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static boolean isValidFileAddress(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() !\u003d 0 \u0026\u0026 !test.matches(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Formats a string to be specific to operating system."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param toFormat the string before formatting"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return the string after formatting"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private String formatByOS(String toFormat) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return toFormat.replace(\u0027/\u0027, \u0027\\\\\u0027);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return toFormat.replace(\u0027\\\\\u0027, \u0027/\u0027);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                || (other instanceof FileAddress // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 value.equals(((FileAddress) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 16,
      "li-s": 1,
      "Anthony6401": 2,
      "HynRidge": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Represents a Tag in the HelloFile."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final TagName tagName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final FileAddress fileAddress;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final Set\u003cLabel\u003e labels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Tag(TagName tagName, FileAddress fileAddress, Set\u003cLabel\u003e labels) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireAllNonNull(tagName, fileAddress, labels);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.fileAddress \u003d fileAddress;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.labels.addAll(labels);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagName getTagName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public FileAddress getFileAddress() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return fileAddress;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Set\u003cLabel\u003e getLabels() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return Collections.unmodifiableSet(labels);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Converts the current tag to one with absolute address."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return The same tag but with absolute file address."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws IllegalArgumentException If file does not exist."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public Tag toAbsolute(boolean isAbsolutePath, FileAddress currentPath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        File file;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (isAbsolutePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            file \u003d new File(fileAddress.value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            file \u003d new File(currentPath.value, fileAddress.value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new IllegalArgumentException(\"Tag address not valid!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        FileAddress absAddress;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            absAddress \u003d new FileAddress(Paths.get(file.getCanonicalPath()).normalize().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new IllegalArgumentException(\"Tag address not found!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return new Tag(tagName, absAddress, labels);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public boolean isSameTag(Tag otherTag) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (otherTag \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return otherTag !\u003d null"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u0026\u0026 otherTag.getTagName().equals(getTagName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns true if both tag have the same identity and data fields."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * This defines a stronger notion of equality between two tags."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!(other instanceof Tag)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Tag otherTag \u003d (Tag) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return otherTag.getTagName().equals(getTagName())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 otherTag.getFileAddress().equals(getFileAddress())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 otherTag.getLabels().equals(getLabels());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return Objects.hash(tagName, fileAddress, labels);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        builder.append(getTagName())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "li-s"
        },
        "content": "                .append(\"\\nFileAddress: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                .append(getFileAddress())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "li-s"
        },
        "content": "                .append(\"\\nLabels: \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "li-s"
        },
        "content": "        getLabels().forEach((label) -\u003e builder.append(label.getLabel() + \", \"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "li-s"
        },
        "content": "        builder.delete(builder.length() - 2, builder.length());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 11,
      "li-s": 4,
      "Anthony6401": 20,
      "HynRidge": 67,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagLabelEqualsKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TagLabelEqualsKeywordPredicate implements Predicate\u003cTag\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final Label labelToFind;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public TagLabelEqualsKeywordPredicate(Label labelToFind) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.labelToFind \u003d labelToFind;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean test(Tag tag) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return tag.getLabels().contains(labelToFind);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                || (other instanceof TagLabelEqualsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \u0026\u0026 labelToFind.equals(((TagLabelEqualsKeywordPredicate) other).labelToFind)); // state check"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Represents a Tag\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            \"Tag names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param name A valid tag name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        checkArgument(isValidTagName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tagName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                || (other instanceof TagName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 tagName.equals(((TagName) other).tagName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 2,
      "HynRidge": 14,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagNameContainsCharPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Tests that a {@code Tag}\u0027s {@code Name} matches any of the sequence of characters given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TagNameContainsCharPredicate extends TagNameContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public TagNameContainsCharPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean test(Tag tag) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsCharIgnoreCase(tag.getTagName().tagName, keyword)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                        || tag.getLabels().stream().anyMatch("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                            label -\u003e StringUtil.containsCharIgnoreCase(label.getLabel(), keyword)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 19,
      "HynRidge": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Tests that a {@code Tag}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagNameContainsKeywordsPredicate implements Predicate\u003cTag\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public boolean test(Tag tag) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(tag.getTagName().tagName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                || (other instanceof TagNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 1,
      "HynRidge": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagNameEqualsKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Tests that a {@code Tag}\u0027s {@code TagName} equals to the tag name given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class TagNameEqualsKeywordPredicate implements Predicate\u003cTag\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private final TagName tagNameToFind;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public TagNameEqualsKeywordPredicate(TagName tagNameToFind) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.tagNameToFind \u003d tagNameToFind;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean test(Tag tag) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return tagNameToFind.equals(tag.getTagName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                || (other instanceof TagNameEqualsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u0026\u0026 tagNameToFind.equals(((TagNameEqualsKeywordPredicate) other).tagNameToFind)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueTagList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": " * A list of tags that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": " * A tag is considered unique by comparing using {@code Tag#isSametag(Tag)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": " * tags uses Tag#isSametag(Tag) for equality so as to ensure that the tag being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": " * unique in terms of identity in the UniqueTagList. However, the removal of a tag uses Tag#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": " * as to ensure that the tag with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * @see Tag#isSameTag(Tag)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class UniqueTagList implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns true if the list contains an equivalent tag as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTag);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Adds a tag to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * The tag must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void add(Tag toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Replaces the tag {@code target} in the list with {@code editedTag}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * The tag identity of {@code editedTag} must not be the same as another existing tag in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!target.isSameTag(editedTag) \u0026\u0026 contains(editedTag)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        internalList.set(index, editedTag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Removes the equivalent tag from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * The tag must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void remove(Tag toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTags(UniqueTagList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Replaces the contents of this list with {@code tags}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * {@code tags} must not contain duplicate tags."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!tagsAreUnique(tags)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        internalList.setAll(tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public ObservableList\u003cTag\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                || (other instanceof UniqueTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTagList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns true if {@code tags} contains only unique tags."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private boolean tagsAreUnique(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tags.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                if (tags.get(i).isSameTag(tags.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 12,
      "HynRidge": 36,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/DuplicateTagException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class DuplicateTagException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public DuplicateTagException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 2,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static Tag[] getSampleTags() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return new Tag[]{};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static Set\u003cLabel\u003e getLabelSet(String... strings) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .map(Label::new)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (Tag sampleTag : getSampleTags()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            sampleAb.addTag(sampleTag);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 2,
      "HynRidge": 5,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedLabel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Jackson-friendly version of {@link Label}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class JsonAdaptedLabel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private final String label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a {@code JsonAdaptedLabel} with the given {@code label}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public JsonAdaptedLabel(String label) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Converts a given {@code Label} into this class for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public JsonAdaptedLabel(Label source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        label \u003d source.getLabel();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String getLabel() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Converts this Jackson-friendly adapted label object into the model\u0027s {@code Label} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted label."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public Label toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (!Label.isValidLabel(label)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new IllegalValueException(Label.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return new Label(label);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Tag\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final String fileAddress;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private final Set\u003cJsonAdaptedLabel\u003e labels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given tag details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public JsonAdaptedTag(@JsonProperty(\"tagName\") String tagName,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                          @JsonProperty(\"fileAddress\") String fileAddress,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                          @JsonProperty(\"labels\") Set\u003cJsonAdaptedLabel\u003e labels) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.fileAddress \u003d fileAddress;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (labels !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            this.labels.addAll(labels);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tagName \u003d source.getTagName().tagName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        fileAddress \u003d source.getFileAddress().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        labels.addAll(source.getLabels().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .map(JsonAdaptedLabel::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        final Set\u003cLabel\u003e tagLabels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        for (JsonAdaptedLabel label : labels) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            tagLabels.add(label.toModelType());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (tagName \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, TagName.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!TagName.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new IllegalValueException(TagName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        final TagName modelName \u003d new TagName(tagName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (fileAddress \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    FileAddress.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!FileAddress.isValidFileAddress(fileAddress)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new IllegalValueException(FileAddress.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        final FileAddress modelFileAddress \u003d new FileAddress(fileAddress);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        final Set\u003cLabel\u003e modelLabels \u003d new HashSet\u003c\u003e(tagLabels);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return new Tag(modelName, modelFileAddress, modelLabels);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 18,
      "HynRidge": 34,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Tags list contains duplicate tag(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tags.addAll(source.getTagList().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (JsonAdaptedTag jsonAdaptedTag : tags) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            Tag tag \u003d jsonAdaptedTag.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            if (addressBook.hasTag(tag)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            addressBook.addTag(tag);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 11,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs, String savedCurrentPath) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        userPrefs.setSavedFilePathValue(savedCurrentPath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 2,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs, String savedCurrentPath) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs, String savedCurrentPath) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs, savedCurrentPath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 2,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param savedCurrentPath cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs, String savedCurrentPath) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            // setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 3,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FileCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.CdCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * An UI component that displays information of a {@code File}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class FileCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String FXML \u003d \"FileCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final Image FILE_ICON \u003d AppUtil.getImage(\"/images/file_icon.png\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final Image FOLDER_ICON \u003d AppUtil.getImage(\"/images/folder_icon.png\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public final File file;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private ImageView icon;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label fileName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a {@code FileCard} with the given {@code File}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public FileCard(File file) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        fileName.setText(file.getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (file.isDirectory()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            icon.setImage(FOLDER_ICON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            icon.setImage(FILE_ICON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Changes the current directory to this path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void cdToThisPath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        MainWindow mainWindow \u003d MainWindow.getInstance();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (mainWindow \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String command \u003d CdCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_CHILD_PATH + fileName.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            mainWindow.executeCommand(command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (CommandException | ParseException exception) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!(other instanceof FileCard)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        FileCard card \u003d (FileCard) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return file.equals(card.file);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FileExplorerPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.CdCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.explorer.CurrentPath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Panel of the file explorer."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class FileExplorerPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String FXML \u003d \"FileExplorerPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TagListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private CurrentPath currentPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label currentPathDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private ListView\u003cFile\u003e fileListView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Create a default {@code FileExplorerPanel} that cannot display current path and file list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public FileExplorerPanel() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Sets the current path and the list of children files."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param currentPath the current path"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param fileList the list of children files"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setData(CurrentPath currentPath, ObservableList\u003cFile\u003e fileList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assert currentPath !\u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.currentPath \u003d currentPath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        fileListView.setItems(fileList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        fileListView.setCellFactory(listView -\u003e new FileListViewCell());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        updateCurrentPath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Updates the current path displayed on UI."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void updateCurrentPath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        currentPathDisplay.setText(currentPath.getAddress().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Changes the current directory to the parent directory."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void cdToParentPath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        MainWindow mainWindow \u003d MainWindow.getInstance();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String command \u003d CdCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_PARENT_PATH;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            mainWindow.executeCommand(command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (CommandException | ParseException exception) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code File} using a {@code FileCard}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    class FileListViewCell extends ListCell\u003cFile\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        protected void updateItem(File file, boolean empty) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            super.updateItem(file, empty);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            if (empty || file \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                setGraphic(new FileCard(file).getRoot());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FooterBar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * A ui for the footer bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class FooterBar extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String FXML \u003d \"FooterBar.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label versionNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public FooterBar(String versionNum) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        versionNumber.setText(versionNum);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.util.UiUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String WEBSITE_MESSAGE \u003d \"Visit our website for more information of HelloFile\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String WEBSITE_URL \u003d \"https://ay2021s1-cs2103t-f12-1.github.io/tp/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String USERGUIDE_MESSAGE \u003d \"Refer to the User Guide\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-f12-1.github.io/tp/UserGuide.html#quick-start\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label message01;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label message02;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label url01;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label url02;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        message01.setText(WEBSITE_MESSAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        message02.setText(USERGUIDE_MESSAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        url01.setText(WEBSITE_URL);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        url02.setText(USERGUIDE_URL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        root.setTitle(\"Help\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiUtil.setTheme(root, MainWindow.getInstance().getCurrentTheme());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Copies the URL to the product website to the clipboard."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void copyWebsiteUrl() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        url.putString(WEBSITE_URL);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void copyUserGuideUrl() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 29,
      "-": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LastInputDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class LastInputDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public LastInputDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setLastInput(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.theme.Theme;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.theme.ThemeSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.util.UiUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static MainWindow instance \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Theme currentTheme;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private TagListPanel tagListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private LastInputDisplay lastInputDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private ThemeWindow themeWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private FileExplorerPanel fileExplorerPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StackPane resultDisplayPlaceHolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StackPane tagListPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StackPane lastInputPlaceHolder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StackPane commandBoxPlaceHolder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StackPane footerbarPlaceHolder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StackPane fileExplorerPlaceHolder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // Set instance"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        instance \u003d this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // Theme selection window"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        themeWindow \u003d new ThemeWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // Help window"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // File explorer panel"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        fileExplorerPanel \u003d new FileExplorerPanel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static MainWindow getInstance() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public Theme getCurrentTheme() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return currentTheme;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // result display"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resultDisplayPlaceHolder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // tag list view"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tagListPanel \u003d new TagListPanel(logic.getFilteredTagList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tagListPlaceholder.getChildren().add(tagListPanel.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // last input display"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        lastInputDisplay \u003d new LastInputDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        lastInputPlaceHolder.getChildren().add(lastInputDisplay.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // command box"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandBoxPlaceHolder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // footer bar"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        FooterBar footerBar \u003d new FooterBar(MainApp.VERSION.toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        footerbarPlaceHolder.getChildren().add(footerBar.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // file explorer panel"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        fileExplorerPanel.setData(logic.getCurrentPath(), logic.getFilteredFileList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        fileExplorerPlaceHolder.getChildren().add(fileExplorerPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        currentTheme \u003d ThemeSet.getTheme(guiSettings.getThemeName());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiUtil.setTheme(primaryStage, currentTheme);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY(), currentTheme.getThemeName());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Opens the theme choosing window."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void handleTheme() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!themeWindow.isShowing()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            themeWindow.show();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            themeWindow.focus();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            lastInputDisplay.setLastInput(commandText);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fileExplorerPanel.updateCurrentPath();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            lastInputDisplay.setLastInput(commandText);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setTheme(Theme theme) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        currentTheme \u003d theme;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiUtil.setTheme(primaryStage, theme);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiUtil.setTheme(helpWindow.getRoot(), theme);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiUtil.setTheme(themeWindow.getRoot(), theme);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 78,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TagCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * An UI component that displays information of a {@code Tag}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String FXML \u003d \"TagCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public final Tag tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private Label fileAddress;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private HBox labels;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Tag} and index to display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagCard(Tag tag, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tagName.setText(tag.getTagName().tagName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        fileAddress.setText(tag.getFileAddress().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (seedu.address.model.label.Label label : tag.getLabels()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String labelText \u003d \" \" + label.getLabel() + \" \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Label labelBox \u003d new Label(labelText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            labelBox.getStyleClass().add(\"label-box\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            labels.getChildren().add(labelBox);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Displays the information of the tag in the main window."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void showTagInfo() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        MainWindow mainWindow \u003d MainWindow.getInstance();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (mainWindow \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String showInfoCommand \u003d ShowCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_TAG_NAME + tag.getTagName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            mainWindow.executeCommand(showInfoCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (CommandException | ParseException exception) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!(other instanceof TagCard)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagCard card \u003d (TagCard) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 tag.equals(card.tag);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 34,
      "HynRidge": 12,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TagListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Panel containing the list of tags."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String FXML \u003d \"TagListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TagListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private ListView\u003cTag\u003e tagListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Creates a {@code TagListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public TagListPanel(ObservableList\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tagListView.setItems(tagList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tagListView.setCellFactory(listView -\u003e new TagListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Tag} using a {@code TagCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    class TagListViewCell extends ListCell\u003cTag\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        protected void updateItem(Tag tag, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            super.updateItem(tag, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            if (empty || tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                setGraphic(new TagCard(tag, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 13,
      "Ma-Yueran": 3,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ThemeCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.theme.Theme;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * An UI component that displays information of a {@code Theme}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ThemeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String FXML \u003d \"ThemeCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private ThemeWindow themeWindow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Theme theme;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label themeName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a ThemeCard."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param theme the theme"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param themeWindow the theme choosing window"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ThemeCard(Theme theme, ThemeWindow themeWindow) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.theme \u003d theme;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.themeWindow \u003d themeWindow;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        themeName.setText(theme.getThemeName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void showThemePreview() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        themeWindow.showThemePreview(theme);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!(other instanceof ThemeCard)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ThemeCard card \u003d (ThemeCard) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return themeName.getText().equals(card.themeName.getText());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ThemeWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.theme.Theme;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.theme.ThemeSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.util.UiUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Controller for a theme selection page."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ThemeWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ThemeWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String FXML \u003d \"ThemeWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Theme currentTheme \u003d MainWindow.getInstance().getCurrentTheme();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Theme selectedTheme \u003d currentTheme;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private ListView\u003cRegion\u003e themeList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private ImageView themeImage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a new ThemeWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param root Stage to use as the root of the ThemeWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ThemeWindow(Stage root) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiUtil.setTheme(root, currentTheme);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        root.setTitle(\"Select a Theme\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a new ThemeWindow."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ThemeWindow() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void fillThemeCards() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ThemeCard lightThemeCard \u003d new ThemeCard(ThemeSet.LIGHT_THEME, this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ThemeCard darkThemeCard \u003d new ThemeCard(ThemeSet.DARK_THEME, this);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ThemeCard galaxyThemeCard \u003d new ThemeCard(ThemeSet.GALAXY_THEME, this);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ThemeCard skyThemeCard \u003d new ThemeCard(ThemeSet.SKY_THEME, this);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        themeList.getItems().setAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                lightThemeCard.getRoot(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                darkThemeCard.getRoot(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                galaxyThemeCard.getRoot(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                skyThemeCard.getRoot()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Displays the preview image of the given theme."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param theme the theme to display"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void showThemePreview(Theme theme) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        themeImage.setImage(AppUtil.getImage(theme.getThemePreviewPath()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        selectedTheme \u003d theme;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Applies the selected theme to the application."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void applySelectedTheme() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        MainWindow.getInstance().setTheme(selectedTheme);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        hide();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Shows the theme selection window."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        logger.fine(\"Showing theme page about the application.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        fillThemeCards();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        showThemePreview(selectedTheme);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Returns true if the theme window is currently being shown."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Hides the theme window."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Focuses on the theme window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/hello_file_icon.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        primaryStage.getIcons().add(AppUtil.getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 4,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/theme/Theme.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui.theme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Theme stores the style sheet path and theme preview image path information."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class Theme {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String themeName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String styleSheetPath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String themePreviewPath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a theme with the given style sheet path and theme preview image path."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param themeName the name of the theme"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param styleSheetPath the path of the style sheet"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param themePreviewPath the path of the preview image"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public Theme(String themeName, String styleSheetPath, String themePreviewPath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        requireNonNull(themeName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        requireNonNull(styleSheetPath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        requireNonNull(themePreviewPath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.themeName \u003d themeName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.styleSheetPath \u003d styleSheetPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.themePreviewPath \u003d themePreviewPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getThemeName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return themeName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getStyleSheetPath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return styleSheetPath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getThemePreviewPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return themePreviewPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!(other instanceof Theme)) { //this handles null as well."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Theme o \u003d (Theme) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return themeName.equals(o.themeName)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                \u0026\u0026 styleSheetPath.equals(o.styleSheetPath)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                \u0026\u0026 themePreviewPath.equals(o.themePreviewPath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return themeName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/theme/ThemeSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui.theme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * ThemeSet stores Themes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ThemeSet {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String LIGHT_THEME_NAME \u003d \"Light Theme\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String DARK_THEME_NAME \u003d \"Dark Theme\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String GALAXY_THEME_NAME \u003d \"Galaxy Theme\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String SKY_THEME_NAME \u003d \"Sky Theme\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final Theme LIGHT_THEME \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new Theme(LIGHT_THEME_NAME, \"view/LightTheme.css\", \"/images/light_theme.png\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final Theme DARK_THEME \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new Theme(DARK_THEME_NAME, \"view/HelloFileDarkTheme.css\", \"/images/dark_theme.png\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final Theme GALAXY_THEME \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new Theme(GALAXY_THEME_NAME, \"view/GalaxyTheme.css\", \"/images/galaxy_theme.png\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final Theme SKY_THEME \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new Theme(SKY_THEME_NAME, \"view/SkyTheme.css\", \"/images/sky_theme.png\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final Theme getTheme(String themeName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assert themeName !\u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        switch (themeName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        case DARK_THEME_NAME:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return DARK_THEME;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        case GALAXY_THEME_NAME:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return GALAXY_THEME;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        case SKY_THEME_NAME:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return SKY_THEME;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return LIGHT_THEME;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/UiUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.theme.Theme;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UiUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Sets the theme of the given root to the give theme."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param root the Stage to set theme"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param theme the theme to be set"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static void setTheme(Stage root, Theme theme) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        requireNonNull(root);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        requireNonNull(theme);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        root.getScene().getStylesheets().clear();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        root.getScene().getStylesheets().add(theme.getStyleSheetPath());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 22
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 6,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/FileCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" onMouseClicked\u003d\"#cdToThisPath\" styleClass\u003d\"file-card\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cImageView fx:id\u003d\"icon\" fitHeight\u003d\"20.0\" fitWidth\u003d\"20.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003cLabel fx:id\u003d\"fileName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$FileName\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 30
    }
  },
  {
    "path": "src/main/resources/view/FileExplorerPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cVBox prefWidth\u003d\"249.0\" styleClass\u003d\"explorer-pane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003cHBox styleClass\u003d\"current-path-box\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cLabel fx:id\u003d\"currentPathDisplay\" text\u003d\"\\$path\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#cdToParentPath\" prefHeight\u003d\"28.0\" prefWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cImageView fitHeight\u003d\"20.0\" fitWidth\u003d\"20.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cimage\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                     \u003cImage url\u003d\"@../images/go_back_icon.png\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003c/image\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/Button\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cInsets /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003cListView fx:id\u003d\"fileListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 44
    }
  },
  {
    "path": "src/main/resources/view/FooterBar.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cHBox spacing\u003d\"2.0\" styleClass\u003d\"footer-bar\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cLabel text\u003d\"Version: \" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cLabel fx:id\u003d\"versionNumber\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cInsets right\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cLabel text\u003d\"Message: \" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cLabel text\u003d\"None\" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 21
    }
  },
  {
    "path": "src/main/resources/view/GalaxyTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------background----------*/"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-image: url(\"../images/background_galaxy_theme.jpg\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-size: cover;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------pane----------*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.3);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".split-pane .pane-with-border {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".scroll-pane .viewport {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".corner {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------scroll bar----------*/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.4);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------menu----------*/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.7);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".menu {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-label-padding: 3px;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".menu .label, .menu-item .label {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".menu:hover, .menu:focused, .menu:pressed {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".menu-item:hover {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.4);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------command box----------*/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.6);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------text area----------*/"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".text-area {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.6);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".text-area .scroll-pane {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".text-area .scroll-pane .viewport{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".text-area .scroll-pane .content{"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------list view----------*/"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.5);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-border-width: 0px;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.3);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.7);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------footer bar----------*/"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".footer-bar {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.5);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".footer-bar .label {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------theme card----------*/"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".theme-card .label {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------help window----------*/"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".help-message-label {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".url-label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: E5E9E8;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------file explorer----------*/"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".explorer-pane .current-path-box {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.5);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".explorer-pane .label {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".file-card {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".file-card .grid-pane {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------label box----------*/"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".label-box {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: #568497;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 189
    }
  },
  {
    "path": "src/main/resources/view/HelloFileDarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------background----------*/"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-image: url(\"../images/background_dark_theme.gif\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------pane----------*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".split-pane .pane-with-border {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".scroll-pane .viewport {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".corner {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------scroll bar----------*/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------menu----------*/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.5);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".menu {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-label-padding: 3px;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".menu .label, .menu-item .label {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".menu:hover, .menu:focused, .menu:pressed {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".menu-item:hover {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------command box----------*/"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.4);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------text area----------*/"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".text-area {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.4);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".text-area .scroll-pane {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".text-area .scroll-pane .viewport{"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".text-area .scroll-pane .content{"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------list view----------*/"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-border-width: 0px;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.4);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.3);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------footer bar----------*/"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".footer-bar {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.3);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".footer-bar .label {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------theme card----------*/"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".theme-card .label {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------help window----------*/"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".help-message-label {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".url-label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: grey;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------file explorer----------*/"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".explorer-pane .current-path-box {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.5);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".explorer-pane .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".file-card {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".file-card .grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------label box----------*/"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".label-box {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: #568497;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 188
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cfx:root minHeight\u003d\"200.0\" minWidth\u003d\"300.0\" type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cVBox alignment\u003d\"TOP_CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"315.0\" prefWidth\u003d\"552.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cHBox alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003cVBox alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cLabel fx:id\u003d\"message01\" styleClass\u003d\"help-message-label\" text\u003d\"\\$message\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                    \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cLabel fx:id\u003d\"url01\" styleClass\u003d\"url-label\" text\u003d\"\\$url\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                    \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#copyWebsiteUrl\" text\u003d\"Copy Url\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cHBox alignment\u003d\"TOP_CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003cVBox alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cLabel fx:id\u003d\"message02\" styleClass\u003d\"help-message-label\" text\u003d\"\\$message\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                    \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cLabel fx:id\u003d\"url02\" styleClass\u003d\"url-label\" text\u003d\"\\$url\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                    \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUserGuideUrl\" text\u003d\"Copy Url\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 49,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------label box----------*/"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".label-box {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: #505B60;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 9
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cfx:root minHeight\u003d\"300.0\" minWidth\u003d\"420.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"HelloFile App\" type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"501.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cMenuBar\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    \u003cmenus\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003citems\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/items\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/Menu\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"View\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                          \u003citems\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleTheme\" text\u003d\"Theme...\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                          \u003c/items\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003citems\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                          \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/items\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    \u003c/menus\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cSplitPane dividerPositions\u003d\"0.2, 0.8\" prefHeight\u003d\"160.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"tagListPlaceholder\" prefWidth\u003d\"143.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"resultDisplayPlaceHolder\" prefHeight\u003d\"299.0\" prefWidth\u003d\"359.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                 \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                 \u003c/VBox.margin\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"lastInputPlaceHolder\" prefHeight\u003d\"15.0\" prefWidth\u003d\"301.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"fileExplorerPlaceHolder\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"commandBoxPlaceHolder\" prefHeight\u003d\"41.0\" prefWidth\u003d\"501.0\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"footerbarPlaceHolder\" prefHeight\u003d\"19.0\" prefWidth\u003d\"501.0\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 46,
      "-": 22
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/font\u003e\u003c/TextArea\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 6,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/SkyTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------background----------*/"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-image: url(\"../images/background_sky_theme.jpg\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-size: cover;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------pane----------*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".split-pane .pane-with-border {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-border-color: rgba(0, 0, 0, 0.2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".scroll-pane .viewport {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".corner {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------scroll bar----------*/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------menu----------*/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".menu {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-label-padding: 3px;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".menu .label, .menu-item .label {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".menu:hover, .menu:focused, .menu:pressed {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.05);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".menu-item:hover {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------command box----------*/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.07);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------text area----------*/"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".text-area {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.03);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".text-area .scroll-pane {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".text-area .scroll-pane .viewport{"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".text-area .scroll-pane .content{"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------list view----------*/"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.05);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-border-width: 0px;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.05);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.08);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------footer bar----------*/"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".footer-bar {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.05);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".footer-bar .label {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------theme card----------*/"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".theme-card .label {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------help window----------*/"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".help-message-label {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".url-label {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-text-fill: grey;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------file explorer----------*/"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".explorer-pane .current-path-box {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".explorer-pane .label {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".file-card {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".file-card .grid-pane {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/*----------label box----------*/"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ".label-box {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-color: #A3F4E5;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 179
    }
  },
  {
    "path": "src/main/resources/view/TagCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cVBox alignment\u003d\"CENTER_LEFT\" onMouseClicked\u003d\"#showTagInfo\" spacing\u003d\"3.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003cLabel fx:id\u003d\"tagName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$tagName\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003cHBox fx:id\u003d\"labels\" spacing\u003d\"5.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cLabel fx:id\u003d\"fileAddress\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$fileAddress\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 32
    }
  },
  {
    "path": "src/main/resources/view/TagListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  \u003cListView fx:id\u003d\"tagListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 1,
      "HynRidge": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/ThemeCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cVBox alignment\u003d\"TOP_CENTER\" onMouseClicked\u003d\"#showThemePreview\" styleClass\u003d\"theme-card\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cLabel fx:id\u003d\"themeName\" text\u003d\"\\$ThemeName\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 14
    }
  },
  {
    "path": "src/main/resources/view/ThemeWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cfx:root minHeight\u003d\"200.0\" minWidth\u003d\"300.0\" type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"364.0\" prefWidth\u003d\"547.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cListView fx:id\u003d\"themeList\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003cImageView fx:id\u003d\"themeImage\" fitHeight\u003d\"300.0\" fitWidth\u003d\"400.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003cHBox alignment\u003d\"BOTTOM_CENTER\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#applySelectedTheme\" prefHeight\u003d\"25.0\" prefWidth\u003d\"80.0\" text\u003d\"Apply\" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#hide\" prefHeight\u003d\"25.0\" prefWidth\u003d\"80.0\" text\u003d\"Cancel\" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 43
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  \"tags\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    \"tagName\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    \"fileAddress\": \"c\\\\:a\\\\b\\\\abc.txt\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    \"tagName\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    \"fileAddress\": \"c:\\\\a\\\\b\\\\abc.txt\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 5,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  \"tags\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"tagName\": \"@#$@#$\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    \"fileAddress\": \"c:\\\\a\\\\b\\\\abc.txt\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 1,
      "HynRidge": 2,
      "-": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  \"tags\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    \"tagName\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    \"fileAddress\": \"c:\\\\a\\\\b\\\\abc.txt\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    \"tagName\": \"Alice Pauline\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    \"fileAddress\": \"c:\\\\a\\\\b\\\\abc.txt\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 5,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  \"tags\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"tagName\": \"Hans @@Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    \"fileAddress\": \"abvvt\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 1,
      "HynRidge": 2,
      "-": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  \"_comment\": \"fileAddressBook save file which contains the same Person values as in TypicalTags#getTypicalfileAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  \"tags\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \"tagName\" : \"cs2103\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"fileAddress\" : \"./src/test/java/seedu/address/testutil/cs2103.bat\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"labels\": [\"testLabel\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"tagName\" : \"cs2101\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"fileAddress\" : \"./src/test/java/seedu/address/testutil/cs2101.bat\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"labels\": [\"testLabel\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"tagName\" : \"myfile\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"fileAddress\" : \"c:\\\\a\\\\b\\\\myfile.txt\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"labels\": [\"project\", \"myfile\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"tagName\" : \"myfile 2\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"fileAddress\" : \"c:\\\\a\\\\b\\\\myfile2.txt\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"labels\": [\"project\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"tagName\" : \"myfile 3\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"fileAddress\" : \"c:\\\\a\\\\b\\\\myfile3.txt\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"labels\": [\"testLabel\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"tagName\" : \"myfile 4\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"fileAddress\" : \"c:\\\\a\\\\b\\\\myfile4.txt\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"labels\": [\"testLabel\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"tagName\" : \"myfile 5\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"fileAddress\" : \"c:\\\\a\\\\b\\\\myfile5.txt\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \"labels\": [\"testLabel\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 20,
      "Anthony6401": 1,
      "HynRidge": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \"themeName\" : \"Dark Theme\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \"addressBookFilePath\" : \"addressbook.json\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 1,
      "Ma-Yueran": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/InvalidSavedFilePathUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \"themeName\" : \"Galaxy Theme\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  \"addressBookFilePath\" : \"addressbook.json\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  \"savedFilePath\" : {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "      \"value\" : \"./invalidFilePath\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 15
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    \"themeName\" : \"Galaxy Theme\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \"addressBookFilePath\" : \"addressbook.json\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "        final Index fifthIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertTrue(fifthIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertTrue(fifthIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertTrue(fifthIndex.equals(fifthIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(fifthIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(fifthIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(fifthIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void containsCharIgnoreCase_nullKey_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsCharIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void containsCharIgnoreCase_emptyKey_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \"Key parameter cannot be empty\", () -\u003e StringUtil.containsCharIgnoreCase(\"typical tag\", \" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void containsCharIgnoreCase_nullToCheck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsCharIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void containsCharIgnoreCase_validInput_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String toCheck \u003d \"abc d\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(toCheck, \"abc d\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(toCheck, \"a\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(toCheck, \"ab\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(toCheck, \"abc\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(toCheck, \"bc\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(toCheck, \"d\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \"Word parameter cannot be empty\", () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \"Word parameter should be a single word\", () -\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 35,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FILE_ADDRESS_DESC_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USER_DIRECTORY_ADDRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2101;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.UntagCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String invalidCommand \u003d \"invaliCommand\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String tagname \u003d \"randomTagName\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String untagCommand \u003d UntagCommand.COMMAND_WORD + \" \" + PREFIX_TAG_NAME + tagname;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertCommandException(untagCommand, String.format(UntagCommand.MESSAGE_TAG_NOT_FOUND, tagname));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Execute tag command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String tagCommand \u003d TagCommand.COMMAND_WORD + TAG_DESC_CS2101"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + FILE_ADDRESS_DESC_CS2101;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag expectedTag \u003d new TagBuilder(CS2101).withLabels().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        expectedModel.addTag(expectedTag.toAbsolute(false, new FileAddress(USER_DIRECTORY_ADDRESS)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandFailure(tagCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void getFilteredTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTagList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 8,
      "li-s": 6,
      "Anthony6401": 5,
      "HynRidge": 4,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CdCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_ADDRESS_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class CdCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static String absoluteHomeAddress;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static String relativeFileAddress;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static String absoluteFileAddress;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static boolean isWindows;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    static void setUpFileAddress() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        absoluteHomeAddress \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String folderAddress \u003d \"./\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        relativeFileAddress \u003d folderAddress;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        File folderFile \u003d new File(folderAddress);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert folderFile.isDirectory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        absoluteFileAddress \u003d folderFile.getAbsolutePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        isWindows \u003d System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_addressTypeAbsolute_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Model modelStub \u003d new ModelStubWithCurrentPath(absoluteFileAddress);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        CdCommand cdCommand \u003d new CdCommand(AddressType.ABSOLUTE, absoluteHomeAddress);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Model expectedModel \u003d new ModelStubWithCurrentPath(absoluteHomeAddress);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandSuccess(cdCommand, modelStub,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String.format(CdCommand.MESSAGE_SUCCESS, absoluteHomeAddress), expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_addressTypeChild_success() throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (isWindows) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Model modelStub \u003d new ModelStubWithCurrentPath(absoluteFileAddress);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            CdCommand cdCommand \u003d new CdCommand(AddressType.CHILD, \"src\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String newFileAddress \u003d new File(absoluteFileAddress + (isWindows ? \"\\\\src\" : \"/src\"))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    .getCanonicalPath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assert new File(absoluteFileAddress).exists();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assert new File(newFileAddress).exists();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Model expectedModel \u003d new ModelStubWithCurrentPath(newFileAddress);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertCommandSuccess(cdCommand, modelStub,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    String.format(CdCommand.MESSAGE_SUCCESS, newFileAddress), expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_addressTypeParent_success() throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String childAddress \u003d new File(absoluteFileAddress + \"\\\\src\").getCanonicalPath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String parentAddress \u003d new File(absoluteFileAddress).getCanonicalPath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Model modelStub \u003d new ModelStubWithCurrentPath(childAddress);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        CdCommand cdCommand \u003d new CdCommand(AddressType.PARENT, \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Model expectedModel \u003d new ModelStubWithCurrentPath(parentAddress);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandSuccess(cdCommand, modelStub,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String.format(CdCommand.MESSAGE_SUCCESS, parentAddress), expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_unknownAddressType_throwNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CdCommand(null, \"\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_rootGetParent_throwCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Path root \u003d Paths.get(absoluteHomeAddress).getRoot();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Model modelStub \u003d new ModelStubWithCurrentPath(root.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        CdCommand cdCommand \u003d new CdCommand(AddressType.PARENT, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(CommandException.class, CdCommand.MESSAGE_NO_PARENT_PATH, () -\u003e cdCommand.execute(modelStub));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_isNotDirectory_throwCommandException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (isWindows) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Model modelStub \u003d new ModelStubWithCurrentPath(absoluteFileAddress);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            CdCommand cdCommand \u003d new CdCommand(AddressType.CHILD, \"build.gradle\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assert new File(\"./build.gradle\").exists();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertThrows(CommandException.class, String.format("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    CdCommand.MESSAGE_PATH_INVALID, \"build.gradle\"), () -\u003e cdCommand.execute(modelStub));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_noPermission_throwCommandException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Get paths to parent and child folder"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        File file \u003d new File(VALID_FILE_ADDRESS_CS2101);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        file \u003d new File(file.getParent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String pathToTestUtil \u003d file.getPath();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String pathToTestFolder \u003d pathToTestUtil + \"/testFolder\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        File testFolder \u003d new File(pathToTestFolder);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Set read permission to false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        boolean canSetPermission \u003d testFolder.setReadable(false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Test CdCommand"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (canSetPermission) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Model modelStub \u003d new ModelStubWithCurrentPath(pathToTestUtil);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            CdCommand cdCommand \u003d new CdCommand(AddressType.CHILD, \"testFolder\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertThrows(CommandException.class, () -\u003e cdCommand.execute(modelStub));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Set read permission back to true"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        testFolder.setReadable(true);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        CdCommand cdCommand1 \u003d new CdCommand(AddressType.CHILD, \"file\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        CdCommand cdCommand2 \u003d new CdCommand(AddressType.ABSOLUTE, \"file\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        CdCommand cdCommand3 \u003d new CdCommand(AddressType.CHILD, \"different\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertTrue(cdCommand1.equals(cdCommand1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        CdCommand cdCommand1Copy \u003d new CdCommand(AddressType.CHILD, \"file\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertTrue(cdCommand1.equals(cdCommand1Copy));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertFalse(cdCommand1.equals(1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertFalse(cdCommand1.equals(null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // different address type -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertFalse(cdCommand1.equals(cdCommand2));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // different address string -\u003e returns false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertFalse(cdCommand1.equals(cdCommand3));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 117,
      "Ma-Yueran": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 2,
      "HynRidge": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_isShowHelp_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"help message\", true, false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertEquals(true, commandResult.isShowHelp());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_isExit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"help message\", false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertEquals(true, commandResult.isExit());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 12,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CHILD_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_TAG_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARENT_PATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String VALID_TAG_NAME_CS2103 \u003d \"cs2103\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String VALID_TAG_NAME_CS2101 \u003d \"cs2101\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String INVALID_TAG_NAME \u003d \"\u0026\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String USER_DIRECTORY_ADDRESS \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String VALID_FILE_ADDRESS_CS2103 \u003d \"./src/test/java/seedu/address/testutil/cs2103.bat\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String VALID_FILE_ADDRESS_CS2101 \u003d \"./src/test/java/seedu/address/testutil/cs2101.bat\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String VALID_MAC_FILE_ADDRESS_CS2101 \u003d \"./src/test/java/seedu/address/testutil/cs2101.sh\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String VALID_MAC_FILE_ADDRESS_TESTFILE \u003d \"./src/test/java/seedu/address/testutil/testFile.sh\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String VALID_CHILD_FOLDER \u003d \"src\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String VALID_LABEL \u003d \"testLabel\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String INVALID_LABEL \u003d \"@label\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String OLD_TAG_DESC_CS2101 \u003d \" \" + PREFIX_OLD_TAG_NAME + VALID_TAG_NAME_CS2101;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String OLD_TAG_DESC_CS2103 \u003d \" \" + PREFIX_OLD_TAG_NAME + VALID_TAG_NAME_CS2103;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String TAG_DESC_CS2103 \u003d \" \" + PREFIX_TAG_NAME + VALID_TAG_NAME_CS2103;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String TAG_DESC_CS2101 \u003d \" \" + PREFIX_TAG_NAME + VALID_TAG_NAME_CS2101;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String VALID_LABEL_DESC \u003d \" \" + PREFIX_LABEL_NAME + VALID_LABEL;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String VALID_CHILD_PATH \u003d \" \" + PREFIX_CHILD_PATH + VALID_CHILD_FOLDER;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String VALID_PARENT_PATH \u003d \" \" + PREFIX_PARENT_PATH;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String VALID_ABSOLUTE_PATH \u003d \" \" + PREFIX_FILE_ADDRESS + USER_DIRECTORY_ADDRESS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String FILE_ADDRESS_DESC_CS2103 \u003d \" \" + PREFIX_FILE_ADDRESS + VALID_FILE_ADDRESS_CS2103;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String FILE_ADDRESS_DESC_CS2101 \u003d \" \" + PREFIX_FILE_ADDRESS + VALID_FILE_ADDRESS_CS2101;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String INVALID_OLD_TAG_DESC \u003d \" \" + PREFIX_OLD_TAG_NAME + INVALID_TAG_NAME;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG_NAME + INVALID_TAG_NAME;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String INVALID_LABEL_DESC \u003d \" \" + PREFIX_LABEL_NAME + INVALID_LABEL;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "    // empty string not allowed for addresses"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String INVALID_FILE_ADDRESS_DESC \u003d \" \" + PREFIX_FILE_ADDRESS + \" \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * - the address book, filtered tag list and selected tag in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        List\u003cTag\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTagList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTagList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static void showTagAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTagList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Tag person \u003d model.getFilteredTagList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        final String[] splitName \u003d person.getTagName().tagName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        model.updateFilteredTagList(new TagNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(1, model.getFilteredTagList().size());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 18,
      "luo-git": 6,
      "Anthony6401": 7,
      "HynRidge": 14,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TAGS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.testutil.TypicalTags.MYFILE3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.testutil.TypicalTags.MYFILE4;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.testutil.TypicalTags.MYFILE5;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                new TagNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                new TagNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute_zeroKeywords_noTagFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TAGS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        expectedModel.updateFilteredTagList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTagList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute_multipleKeywords_multipleTagsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TAGS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"3 4 5\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        expectedModel.updateFilteredTagList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertEquals(Arrays.asList(MYFILE3, MYFILE4, MYFILE5), model.getFilteredTagList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Parses {@code userInput} into a {@code TagNameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private TagNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return new TagNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 6,
      "HynRidge": 18,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String commandWord1 \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String commandWord2 \u003d \"tag\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        CommandResult expectedCommandResult1 \u003d new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        CommandResult expectedCommandResult2 \u003d new CommandResult(TagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertCommandSuccess(new HelpCommand(commandWord1), model, expectedCommandResult1, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertCommandSuccess(new HelpCommand(commandWord2), model, expectedCommandResult2, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new HelpCommand(\"adnfh woiefoik\").execute(model));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute_invalidcommandword_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        HelpCommand expectedCommandResult \u003d new HelpCommand(\"nadfoidjei\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e expectedCommandResult.execute(model));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 15,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LabelCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LABEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class LabelCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private ModelStubWithTag modelStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag newTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "        modelStub \u003d new ModelStubWithTag(newTag);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag newTag \u003d new TagBuilder().withLabels(\"testLabel\", VALID_LABEL).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ModelStubWithTag expectedModelStub \u003d new ModelStubWithTag(newTag);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "        HashSet\u003cLabel\u003e labels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "        labels.add(new Label(\"testLabel\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "        labels.add(new Label(VALID_LABEL));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "        LabelCommand labelCommand \u003d new LabelCommand(newTag.getTagName(), labels);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertCommandSuccess(labelCommand, modelStub,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "                String.format(LabelCommand.MESSAGE_SUCCESS, newTag), expectedModelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_emptyLabels_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag newTag \u003d new TagBuilder().withLabels(\"testLabel\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ModelStubWithTag expectedModelStub \u003d new ModelStubWithTag(newTag);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "        HashSet\u003cLabel\u003e labels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "        LabelCommand labelCommand \u003d new LabelCommand(newTag.getTagName(), labels);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertCommandSuccess(labelCommand, modelStub,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "                String.format(LabelCommand.MESSAGE_SUCCESS, newTag), expectedModelStub);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_tagNotInModel_throwCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName nonExistingTagName \u003d new TagName(\"noExist\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "        HashSet\u003cLabel\u003e labels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "        LabelCommand labelCommand \u003d new LabelCommand(nonExistingTagName, labels);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertThrows(CommandException.class, String.format(LabelCommand.MESSAGE_TAG_NOT_FOUND,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": "                nonExistingTagName.tagName), () -\u003e labelCommand.execute(modelStub));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_fileNotFound_throwCommandError() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag tagWithInvalidFileAddress \u003d new TagBuilder().withFileAddress(\"C:\\\\somewhereOverTheRainbow\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        modelStub \u003d new ModelStubWithTag(tagWithInvalidFileAddress);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        HashSet\u003cLabel\u003e labels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        labels.add(new Label(\"testLabelNew\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        LabelCommand labelCommand \u003d new LabelCommand(tagWithInvalidFileAddress.getTagName(), labels);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e labelCommand.execute(modelStub));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName oldTagName \u003d new TagName(\"oldTag\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName newTagName \u003d new TagName(\"newTag\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "li-s"
        },
        "content": "        HashSet\u003cLabel\u003e emptyLabels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "li-s"
        },
        "content": "        HashSet\u003cLabel\u003e labels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "li-s"
        },
        "content": "        labels.add(new Label(\"testLabel\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "li-s"
        },
        "content": "        LabelCommand labelCommand1 \u003d new LabelCommand(newTagName, emptyLabels);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "li-s"
        },
        "content": "        LabelCommand labelCommand2 \u003d new LabelCommand(oldTagName, labels);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        LabelCommand labelCommand3 \u003d new LabelCommand(newTagName, labels);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertTrue(labelCommand1.equals(labelCommand1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "li-s"
        },
        "content": "        LabelCommand labelommand1Copy \u003d new LabelCommand(newTagName, emptyLabels);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertTrue(labelCommand1.equals(labelommand1Copy));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(labelCommand1.equals(1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(labelCommand1.equals(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // different tagName -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(labelCommand3.equals(labelCommand2));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // different labels -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(labelCommand1.equals(labelCommand3));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 99,
      "luo-git": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTagAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        showTagAtIndex(model, INDEX_FIRST_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(listCommand.equals(listCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(listCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(listCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 16,
      "HynRidge": 4,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.explorer.CurrentPath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class ModelStub implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void deleteTag(Tag target) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ObservableList\u003cTag\u003e getFilteredTagList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public CurrentPath getCurrentPath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ObservableList\u003cFile\u003e getFilteredFileList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public List\u003cTag\u003e findFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 117,
      "Ma-Yueran": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStubAcceptingTagAdded.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.explorer.CurrentPath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.explorer.FileList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Model stub that always accept the tag being added."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class ModelStubAcceptingTagAdded extends ModelStub {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    final ArrayList\u003cTag\u003e tagsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return tagsAdded.stream().anyMatch(tag::isSameTag);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        tagsAdded.add(tag);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public CurrentPath getCurrentPath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return new CurrentPath(System.getProperty(\"user.dir\"), new FileList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 33,
      "li-s": 4,
      "Anthony6401": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStubDeleteTag.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class ModelStubDeleteTag extends ModelStub {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private List\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private int commitCount \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "    ModelStubDeleteTag(List\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "        requireNonNull(tagList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.tagList \u003d tagList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return this.tagList.contains(tag);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.tagList.remove(tag);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public List\u003cTag\u003e findFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return tagList.stream().filter(predicate).collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        commitCount++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!(other instanceof ModelStubDeleteTag)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ModelStubDeleteTag o \u003d (ModelStubDeleteTag) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return this.tagList.equals(o.tagList) \u0026\u0026 this.commitCount \u003d\u003d o.commitCount;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 45,
      "luo-git": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStubWithAddressBook.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.explorer.FileList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Model stub with AddressBook functionality"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class ModelStubWithAddressBook extends ModelStub {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final AddressBookStubWithTag ab \u003d new AddressBookStubWithTag();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ab.addTag(tag);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return ab.getTagList().contains(tag);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class AddressBookStubWithTag implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final UniqueTagList list \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return list.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public FileList getFileList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ObservableList\u003cFile\u003e getObservableFileList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        list.add(tag);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 43,
      "Ma-Yueran": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStubWithCurrentPath.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.explorer.CurrentPath;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.explorer.FileList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class ModelStubWithCurrentPath extends ModelStub {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private CurrentPath currentPath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ModelStubWithCurrentPath(String currentPath) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.currentPath \u003d new CurrentPath(currentPath, new FileList());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public CurrentPath getCurrentPath() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return currentPath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (!(obj instanceof ModelStubWithCurrentPath)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ModelStubWithCurrentPath other \u003d (ModelStubWithCurrentPath) obj;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return this.currentPath.equals(other.currentPath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStubWithTag.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Model stub that contains a single tag."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class ModelStubWithTag extends ModelStub {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ModelStubWithTag(Tag tag) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return this.tag.isSameTag(tag);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public List\u003cTag\u003e findFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        tagList.add(tag);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return tagList.stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "                .filter(predicate)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void deleteTag(Tag target) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.tag \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (!this.tag.equals(target)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.tag \u003d editedTag;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || (other instanceof ModelStubWithTag // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \u0026\u0026 this.tag.equals(((ModelStubWithTag) other).tag));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 22,
      "li-s": 36,
      "Anthony6401": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStubWithTagAndTaglist.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.explorer.CurrentPath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.explorer.FileList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class ModelStubWithTagAndTaglist extends ModelStub {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final List\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private final CurrentPath currentPath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private int commitCount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Creates a ModelStubWithTagAndTagList object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ModelStubWithTagAndTaglist() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        currentPath \u003d new CurrentPath(System.getProperty(\"user.dir\"), new FileList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        commitCount \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        tags.add(tag);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        tags.remove(tag);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        int index \u003d tags.indexOf(target);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (!target.isSameTag(editedTag) \u0026\u0026 tags.contains(editedTag)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        tags.set(index, editedTag);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return tags.contains(tag);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public CurrentPath getCurrentPath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.currentPath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public List\u003cTag\u003e findFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return tags.stream().filter(predicate).collect(Collectors.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        commitCount +\u003d 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || (other instanceof ModelStubWithTagAndTaglist // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \u0026\u0026 ((ModelStubWithTagAndTaglist) other).tags.equals(this.tags)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \u0026\u0026 ((ModelStubWithTagAndTaglist) other).commitCount \u003d\u003d this.commitCount);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 30,
      "luo-git": 25,
      "Anthony6401": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/OpenCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAC_FILE_ADDRESS_CS2101;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class OpenCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static Tag validTag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static Tag invalidTag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    static void prepareModel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        validTag \u003d new TagBuilder(CS2101).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // If system is not windows, use sh"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            validTag \u003d new TagBuilder(CS2101)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    .withFileAddress(VALID_MAC_FILE_ADDRESS_CS2101).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        invalidTag \u003d new TagBuilder().withFileAddress(\".\\\\somewhereOverTheRainbow\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.addTag(validTag);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.addTag(invalidTag);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_openValidTag_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertCommandSuccess(new OpenCommand(validTag.getTagName()), model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    String.format(OpenCommand.MESSAGE_SUCCESS, validTag), model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_openTagNameNotInModel_throwCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagName tagNameNotInModel \u003d new TagName(\"somethingNotInModel\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        OpenCommand openCommand \u003d new OpenCommand(tagNameNotInModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandFailure(openCommand, model,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String.format(OpenCommand.MESSAGE_TAG_NOT_FOUND, tagNameNotInModel.tagName));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_openInvalidTag_throwCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            OpenCommand openCommand \u003d new OpenCommand(invalidTag.getTagName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertCommandFailure(openCommand, model,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    String.format(OpenCommand.MESSAGE_ERROR + OpenCommand.MESSAGE_FILE_NOT_FOUND,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                            invalidTag.getTagName(), invalidTag.getFileAddress()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 61,
      "li-s": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/OpenCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LABEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAC_FILE_ADDRESS_TESTFILE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2103;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.OpenCommand.MESSAGE_ERROR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.OpenCommand.MESSAGE_FILE_NO_PERMISSION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class OpenCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Model typicalModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName tagName1 \u003d new TagName(VALID_TAG_NAME_CS2103);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName tagName2 \u003d new TagName(VALID_TAG_NAME_CS2101);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        OpenCommand openCommand1 \u003d new OpenCommand(tagName1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        OpenCommand openCommand2 \u003d new OpenCommand(tagName2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(openCommand1.equals(openCommand1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        OpenCommand openCommand1Copy \u003d new OpenCommand(tagName1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(openCommand1.equals(openCommand1Copy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(openCommand1.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(openCommand1.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // different tagName -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(openCommand1.equals(openCommand2));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_tagNotInModel_throwCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagName tagName \u003d new TagName(\"haHaImWrong\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        OpenCommand openCommand \u003d new OpenCommand(tagName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(CommandException.class, String.format(OpenCommand.MESSAGE_TAG_NOT_FOUND,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                tagName.tagName), () -\u003e openCommand.execute(typicalModel));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_tagNameInModel_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Tag correctTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String os \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (!os.startsWith(\"windows\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                correctTag \u003d new TagBuilder()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        .withFileAddress(VALID_MAC_FILE_ADDRESS_TESTFILE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            OpenCommand openCommand \u003d new OpenCommand(correctTag.getTagName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Model modelStubWithTag \u003d new ModelStubWithTag(new TagBuilder().build());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            modelStubWithTag.addTag(correctTag);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String expectedMessage \u003d String.format(OpenCommand.MESSAGE_SUCCESS, correctTag);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertCommandSuccess(openCommand, modelStubWithTag, expectedMessage, modelStubWithTag);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_tagWithLabelInModel_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Tag correctTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Tag correctTag2 \u003d new TagBuilder().withTagName(\"anotherTag\").build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String os \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (!os.startsWith(\"windows\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                correctTag \u003d new TagBuilder()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        .withFileAddress(VALID_MAC_FILE_ADDRESS_TESTFILE).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                correctTag2 \u003d new TagBuilder().withFileAddress(VALID_MAC_FILE_ADDRESS_TESTFILE)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        .withTagName(\"anotherTag\").build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            OpenCommand openCommand \u003d new OpenCommand(new Label(VALID_LABEL));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Model modelStub \u003d new ModelStubWithTagAndTaglist();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            modelStub.addTag(correctTag);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            modelStub.addTag(correctTag2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String expectedMessage \u003d String.format(OpenCommand.MESSAGE_SUCCESS, correctTag)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    + \"\\n\" + String.format(OpenCommand.MESSAGE_SUCCESS, correctTag2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertCommandSuccess(openCommand, modelStub, expectedMessage, modelStub);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_tagNameInModelFileNotFound_throwCommandException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Tag correctTag \u003d new TagBuilder().withTagName(\"test\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    .withFileAddress(\".\\\\src\\\\test\\\\java\\\\seedu\\\\address\\\\testutil\\\\testFileNotHere.bat\").build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            OpenCommand openCommand \u003d new OpenCommand(correctTag.getTagName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Model modelStubWithTag \u003d new ModelStubWithTag(new TagBuilder().build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            modelStubWithTag.addTag(correctTag);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    String.format(OpenCommand.MESSAGE_ERROR + OpenCommand.MESSAGE_FILE_NOT_FOUND,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                            correctTag.getTagName(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                            correctTag.getFileAddress()), () -\u003e openCommand.execute(modelStubWithTag));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_noPermissionToOpenFile_throwCommandException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Tag correctTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            File file \u003d new File(correctTag.getFileAddress().value);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            boolean canSetPermission \u003d file.setReadable(false);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Only perform this test if tester has permission to set file read permission"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (canSetPermission) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                OpenCommand openCommand \u003d new OpenCommand(correctTag.getTagName());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Model modelStubWithTag \u003d new ModelStubWithTag(correctTag);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        String.format(MESSAGE_ERROR, correctTag.getTagName())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                                + String.format(MESSAGE_FILE_NO_PERMISSION,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                                correctTag.getFileAddress()), () -\u003e openCommand.execute(modelStubWithTag));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            file.setReadable(true);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 138,
      "li-s": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2103;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.deleteTag(CS2101);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.deleteTag(CS2103);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.deleteTag(CS2101);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.deleteTag(CS2103);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_multipleRedoableStatesInModel_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_singleRedoableStatesInModel_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_noRedoableStatesInModel_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        RedoCommand redoCommand2 \u003d new RedoCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(redoCommand, redoCommand2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertNotEquals(redoCommand, 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertNotEquals(redoCommand, null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RetagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class RetagCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private ModelStubWithTagAndTaglist modelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag validTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        modelStub \u003d new ModelStubWithTagAndTaglist();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        modelStub.addTag(validTag);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute_duplicateNewTagName_retagSuccess() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagName oldTagName \u003d new TagBuilder().build().getTagName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagName newTagName \u003d new TagBuilder().build().getTagName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Tag newTag \u003d new TagBuilder().withTagName(newTagName.toString()).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ModelStubWithTagAndTaglist expectedModelStub \u003d new ModelStubWithTagAndTaglist();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModelStub.addTag(newTag);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModelStub.commitAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        RetagCommand retagCommand \u003d new RetagCommand(oldTagName, newTagName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertCommandSuccess(retagCommand, modelStub,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String.format(RetagCommand.MESSAGE_RETAG_TAG_SUCCESS, oldTagName, newTagName), expectedModelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_newTagNameInTagList_throwCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Retag a tag with a Tag name that is already in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag duplicateTag \u003d new TagBuilder().withTagName(\"CS1231\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag tagToRetag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagName oldTagName \u003d tagToRetag.getTagName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagName newTagName \u003d new TagName(\"CS1231\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ModelStubWithTagAndTaglist expectedModelStub \u003d new ModelStubWithTagAndTaglist();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModelStub.addTag(tagToRetag);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModelStub.commitAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModelStub.addTag(duplicateTag);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModelStub.commitAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        RetagCommand retagCommand \u003d new RetagCommand(oldTagName, newTagName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                RetagCommand.MESSAGE_DUPLICATE_TAG, () -\u003e retagCommand.execute(expectedModelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_oldTagNotInModel_throwCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName oldTagName \u003d new TagName(\"noExist\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName newTagName \u003d new TagName(\"noMatter\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "li-s"
        },
        "content": "        RetagCommand retagCommand \u003d new RetagCommand(oldTagName, newTagName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertThrows(CommandException.class, String.format(RetagCommand.MESSAGE_OLD_TAG_NOT_FOUND,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": "                oldTagName.tagName), () -\u003e retagCommand.execute(modelStub));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_validInput_retagSuccess() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag newTag \u003d new TagBuilder().withTagName(\"new\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName oldTagName \u003d new TagBuilder().build().getTagName();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName newTagName \u003d newTag.getTagName();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "li-s"
        },
        "content": "        RetagCommand retagCommand \u003d new RetagCommand(oldTagName, newTagName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ModelStubWithTagAndTaglist expectedModelStub \u003d new ModelStubWithTagAndTaglist();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModelStub.addTag(newTag);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModelStub.commitAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertCommandSuccess(retagCommand, modelStub,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String.format(RetagCommand.MESSAGE_RETAG_TAG_SUCCESS, oldTagName, newTagName), expectedModelStub);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName oldTagName \u003d new TagName(\"oldTag\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName newTagName \u003d new TagName(\"newTag\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "li-s"
        },
        "content": "        RetagCommand retagCommand1 \u003d new RetagCommand(oldTagName, newTagName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "li-s"
        },
        "content": "        RetagCommand retagCommand2 \u003d new RetagCommand(newTagName, oldTagName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        RetagCommand retagCommand3 \u003d new RetagCommand(oldTagName, oldTagName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertTrue(retagCommand1.equals(retagCommand1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "li-s"
        },
        "content": "        RetagCommand retagCommand1Copy \u003d new RetagCommand(oldTagName, newTagName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertTrue(retagCommand1.equals(retagCommand1Copy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(retagCommand1.equals(1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(retagCommand1.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // different tagName -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(retagCommand1.equals(retagCommand2));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(retagCommand1.equals(retagCommand3));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(retagCommand2.equals(retagCommand3));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 79,
      "luo-git": 34,
      "HynRidge": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ShowCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.testutil.TypicalTags.MYFILE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.testutil.TypicalTags.MYFILE2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagNameEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.testutil.TypicalTags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ShowCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName firstPredicateTagName \u003d new TagName(\"first\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName secondPredicateTagName \u003d new TagName(\"second\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate firstPredicate \u003d new TagNameEqualsKeywordPredicate("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                firstPredicateTagName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate secondPredicate \u003d new TagNameEqualsKeywordPredicate("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                secondPredicateTagName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ShowCommand showFirstCommand \u003d new ShowCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ShowCommand showSecondCommand \u003d new ShowCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(showFirstCommand.equals(showFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ShowCommand showFirstCommandCopy \u003d new ShowCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(showFirstCommand.equals(showFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(showFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(showFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(showFirstCommand.equals(showSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void execute_invalidTagName_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate predicate \u003d new TagNameEqualsKeywordPredicate(new TagName(\"Invalid Tag Name\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertCommandFailure(showCommand, model, Messages.MESSAGE_INVALID_TAG_INPUT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_validTagName_showTagFileSuccess() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                new TagNameEqualsKeywordPredicate(MYFILE.getTagName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                new TagNameEqualsKeywordPredicate(TypicalTags.MYFILE2.getTagName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ShowCommand firstShowCommand \u003d new ShowCommand(firstPredicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ShowCommand secondShowCommand \u003d new ShowCommand(secondPredicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // show tag that has more than 1 label"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        StringBuilder firstBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        firstBuilder.append(String.format(firstShowCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                MYFILE.getTagName(), MYFILE.getFileAddress()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        firstBuilder.append(\"\\nLabels: \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        MYFILE.getLabels().forEach(firstBuilder::append);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String firstExpectedMessage \u003d firstBuilder.toString().trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // show tag that has only 1 label"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        StringBuilder secondBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        secondBuilder.append(String.format(secondShowCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                MYFILE2.getTagName(), MYFILE2.getFileAddress()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        secondBuilder.append(\"\\nLabel: \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        MYFILE2.getLabels().forEach(secondBuilder::append);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String secondExpectedMessage \u003d secondBuilder.toString().trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertCommandSuccess(firstShowCommand, model, firstExpectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertCommandSuccess(secondShowCommand, model, secondExpectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 1,
      "Anthony6401": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TagCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USER_DIRECTORY_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TagCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute_newTag_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Model model \u003d new ModelStubWithTagAndTaglist();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag validTag \u003d new TagBuilder().build().toAbsolute(false, new FileAddress(USER_DIRECTORY_ADDRESS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Model expectedModel \u003d new ModelStubWithTagAndTaglist();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        expectedModel.addTag(validTag);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandSuccess(new TagCommand(validTag), model,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String.format(TagCommand.MESSAGE_SUCCESS, validTag), expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute_duplicateTag_throwsCommandException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag validTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        model.addTag(validTag.toAbsolute(false, new FileAddress(USER_DIRECTORY_ADDRESS)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandFailure(new TagCommand(validTag), model, TagCommand.MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 9,
      "Anthony6401": 8,
      "HynRidge": 4,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2103;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.nio.file.FileSystems;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TagCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void constructor_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TagCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "    void execute_absoluteFilePath_tagSuccess() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ModelStubAcceptingTagAdded modelStub \u003d new ModelStubAcceptingTagAdded();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Get absolute filepath"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Path validPath \u003d FileSystems.getDefault().getPath(new String()).toAbsolutePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag tagValidAddress \u003d new TagBuilder().withFileAddress(validPath.toString()).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "        CommandResult commandResult \u003d new TagCommand(tagValidAddress).execute(modelStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertEquals(String.format(TagCommand.MESSAGE_SUCCESS, tagValidAddress), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertEquals(Arrays.asList(tagValidAddress), modelStub.tagsAdded);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "    void execute_invalidFilePath_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag validTag \u003d new TagBuilder().withTagName(\"valid tag name\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Path validPath \u003d FileSystems.getDefault().getPath(new String()).toAbsolutePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String path \u003d validPath.toString() + \"somewhereOverTheRainbow\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag tagInvalidAddress \u003d new TagBuilder().withFileAddress(path).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(tagInvalidAddress);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTag(validTag);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "                String.format(TagCommand.MESSAGE_FILE_NOT_FOUND, path), () -\u003e tagCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_tagAddressFileNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag tagInvalidAddress \u003d new TagBuilder().withFileAddress(\"./somewhereOverTheRainbow\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag validTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(tagInvalidAddress);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTag(validTag);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e tagCommand.execute(modelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_duplicateTagName_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag validTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(validTag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTag(validTag);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(CommandException.class, TagCommand.MESSAGE_DUPLICATE_TAG, () -\u003e tagCommand.execute(modelStub));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag t1 \u003d new TagBuilder().withTagName(VALID_TAG_NAME_CS2101).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag t2 \u003d new TagBuilder().withTagName(VALID_TAG_NAME_CS2103).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagCommand tagT1Command \u003d new TagCommand(t1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagCommand tagT2Command \u003d new TagCommand(t2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(tagT1Command.equals(tagT1Command));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagCommand tagT1CommandCopy \u003d new TagCommand(t1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(tagT1Command.equals(tagT1CommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(tagT1Command.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(tagT1Command.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(tagT1Command.equals(tagT2Command));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 35,
      "luo-git": 24,
      "HynRidge": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2103;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.deleteTag(CS2101);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.deleteTag(CS2103);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.deleteTag(CS2101);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.deleteTag(CS2103);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_multipleUndoableStatesInModel_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_singleUndoableStatesInModel_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_noUndoableStatesInModel_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        UndoCommand undoCommand1 \u003d new UndoCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        UndoCommand undoCommand2 \u003d new UndoCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(undoCommand1, undoCommand2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertNotEquals(undoCommand1, 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertNotEquals(undoCommand1, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UnlabelCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class UnlabelCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private ModelStubWithTag modelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag newTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        modelStub \u003d new ModelStubWithTag(newTag);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName oldTagName \u003d new TagName(\"oldTag\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName newTagName \u003d new TagName(\"newTag\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        HashSet\u003cLabel\u003e emptyLabels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        HashSet\u003cLabel\u003e labels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        labels.add(new Label(\"testLabel\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        UnlabelCommand firstUnlabelCommand \u003d new UnlabelCommand(newTagName, emptyLabels);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        UnlabelCommand secondUnlabelCommand \u003d new UnlabelCommand(oldTagName, labels);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(firstUnlabelCommand.equals(firstUnlabelCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        UnlabelCommand firstUnlabelommandCopy \u003d new UnlabelCommand(newTagName, emptyLabels);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(firstUnlabelCommand.equals(firstUnlabelommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(firstUnlabelCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(firstUnlabelCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // different tagName -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(firstUnlabelCommand.equals(secondUnlabelCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // different labels -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(firstUnlabelCommand.equals(secondUnlabelCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // different tagName but same labels -\u003e return false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        UnlabelCommand diffTagNameUnlabelCommand \u003d new UnlabelCommand(oldTagName, emptyLabels);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(firstUnlabelCommand.equals(diffTagNameUnlabelCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void execute_tagNotInModel_throwCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName nonExistingTagName \u003d new TagName(\"noExist\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        HashSet\u003cLabel\u003e labels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        UnlabelCommand unlabelCommand \u003d new UnlabelCommand(nonExistingTagName, labels);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(CommandException.class, String.format(UnlabelCommand.MESSAGE_TAG_NOT_FOUND,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                nonExistingTagName.tagName), () -\u003e unlabelCommand.execute(modelStub));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void execute_emptyLabels_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag newTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ModelStubWithTag expectedModelStub \u003d new ModelStubWithTag(newTag);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        HashSet\u003cLabel\u003e labels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        UnlabelCommand unlabelCommand \u003d new UnlabelCommand(newTag.getTagName(), labels);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertCommandSuccess(unlabelCommand, modelStub,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String.format(unlabelCommand.MESSAGE_SUCCESS, newTag), expectedModelStub);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void execute_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName defaultTagName \u003d new TagBuilder().build().getTagName();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // All labels are valid"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        modelStub.addTag(new TagBuilder().withLabels(\"testLabel\", \"deletedLabel\", \"anotherDeletedLabel\").build());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag firstExpectedDeletedLabelTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ModelStubWithTag firstExpectedModelStub \u003d new ModelStubWithTag(firstExpectedDeletedLabelTag);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        HashSet\u003cLabel\u003e firstLabels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        firstLabels.add(new Label(\"deletedLabel\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        firstLabels.add(new Label(\"anotherDeletedLabel\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        UnlabelCommand firstUnlabelCommand \u003d new UnlabelCommand(defaultTagName, firstLabels);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertCommandSuccess(firstUnlabelCommand, modelStub,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String.format(UnlabelCommand.MESSAGE_SUCCESS, firstExpectedDeletedLabelTag), firstExpectedModelStub);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // Some label is invalid"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        modelStub.addTag(new TagBuilder().withLabels(\"testLabel\", \"deletedLabel\").build());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag secondExpectedDeletedLabelTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ModelStubWithTag secondExpectedModelStub \u003d new ModelStubWithTag(secondExpectedDeletedLabelTag);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        HashSet\u003cLabel\u003e secondLabels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        secondLabels.add(new Label(\"deletedLabel\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        secondLabels.add(new Label(\"invalidLabel\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        UnlabelCommand secondUnlabelCommand \u003d new UnlabelCommand(defaultTagName, secondLabels);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        builder.append(String.format(UnlabelCommand.MESSAGE_LABEL_MISSING, defaultTagName));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        builder.append(String.format(UnlabelCommand.MESSAGE_DASH, new Label(\"invalidLabel\")));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        builder.append(UnlabelCommand.MESSAGE_INVALID_LABEL);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedMessage \u003d builder.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertCommandSuccess(secondUnlabelCommand, modelStub, expectedMessage, secondExpectedModelStub);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UntagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2103;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": " * {@code UntagCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class UntagCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private ModelStub modelStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag validTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        tagList.add(validTag);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        modelStub \u003d new ModelStubDeleteTag(tagList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_validTagName_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag tagToDelete \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "        UntagCommand untagCommand \u003d new UntagCommand(tagToDelete.getTagName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String expectedMessage \u003d String.format(UntagCommand.MESSAGE_UNTAG_TAG_SUCCESS, tagToDelete.getTagName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ModelStub expectedModel \u003d new ModelStubDeleteTag(new ArrayList\u003cTag\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertCommandSuccess(untagCommand, modelStub, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_tagNotInModel_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName nonExistTagName \u003d new TagName(\"jalksdjlfkjsdlakjflsjlj\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "        UntagCommand untagCommand \u003d new UntagCommand(nonExistTagName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertThrows(CommandException.class, String.format(UntagCommand.MESSAGE_TAG_NOT_FOUND,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "                nonExistTagName), () -\u003e untagCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName validTag1 \u003d new TagName(VALID_TAG_NAME_CS2101);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName validTag2 \u003d new TagName(VALID_TAG_NAME_CS2103);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "        UntagCommand deleteFirstCommand \u003d new UntagCommand(validTag1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "        UntagCommand deleteSecondCommand \u003d new UntagCommand(validTag2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": "        UntagCommand deleteFirstCommandCopy \u003d new UntagCommand(new TagName(VALID_TAG_NAME_CS2101));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(new TagName(VALID_TAG_NAME_CS2101)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // different tag -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 67,
      "luo-git": 1,
      "HynRidge": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2103;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.UntagCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag tag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagCommand command \u003d (TagCommand) parser.parseCommand(TagUtil.getTagCommand(tag));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(new TagCommand(tag), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Deprecated"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void parseCommand_untag() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "        UntagCommand command \u003d (UntagCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "                UntagCommand.COMMAND_WORD + \" \" + TAG_DESC_CS2103);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName validTagName \u003d new TagName(VALID_TAG_NAME_CS2103);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertEquals(new UntagCommand(validTagName), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(new FindCommand(new TagNameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 10,
      "luo-git": 4,
      "HynRidge": 5,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CdCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USER_DIRECTORY_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ABSOLUTE_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CHILD_FOLDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CHILD_PATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARENT_PATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CHILD_PATH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_ADDRESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARENT_PATH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.commands.AddressType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.CdCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class CdCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private CdCommandParser parser \u003d new CdCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parse_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // all fields missing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertParseFailure(parser, \"    \","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CdCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // has preamble"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CdCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // has more than 1 prefix"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_CHILD_PATH + \" \" + PREFIX_PARENT_PATH,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CdCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // go to parent path with argument"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_PARENT_PATH + \"noArg\", CdCommand.MESSAGE_PARENT_PATH_NOT_BLANK);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // go to child with no argument"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_CHILD_PATH, CdCommand.MESSAGE_BLANK_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // using absolute path with no argument"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FILE_ADDRESS, CdCommand.MESSAGE_BLANK_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parse_validArg_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // Using child path"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInput1 \u003d VALID_CHILD_PATH;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        CdCommand cdCommandChild \u003d new CdCommand(AddressType.CHILD, VALID_CHILD_FOLDER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseSuccess(parser, userInput1, cdCommandChild);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // Go to parent"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInput2 \u003d VALID_PARENT_PATH;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        CdCommand cdCommandParent \u003d new CdCommand(AddressType.PARENT, \"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseSuccess(parser, userInput2, cdCommandParent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // Using absolute path"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInput3 \u003d VALID_ABSOLUTE_PATH;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        CdCommand cdCommandAbsolute \u003d new CdCommand(AddressType.ABSOLUTE, USER_DIRECTORY_ADDRESS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseSuccess(parser, userInput3, cdCommandAbsolute);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 49,
      "Ma-Yueran": 16,
      "HynRidge": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                new FindCommand(new TagNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/HelpCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "class HelpCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private HelpCommandParser parser \u003d new HelpCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void parse_emptyArg_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String emptyArg \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        HelpCommand expectedHelpCommand \u003d new HelpCommand(emptyArg);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertParseSuccess(parser, emptyArg, expectedHelpCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void parse_nonemptyarg_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String arg \u003d \"hfwhfewfhwefi\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        HelpCommand expectedHelpCommand \u003d new HelpCommand(arg);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertParseSuccess(parser, arg, expectedHelpCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LabelCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LABEL_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LABEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LABEL_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2103;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.LabelCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class LabelCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private LabelCommandParser parser \u003d new LabelCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName tagName \u003d new TagName(VALID_TAG_NAME_CS2103);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Label label \u003d new Label(VALID_LABEL);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Set\u003cLabel\u003e labels \u003d Set.of(label);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String userInput \u003d TAG_DESC_CS2103 + VALID_LABEL_DESC;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        LabelCommand labelCommand \u003d new LabelCommand(tagName, labels);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseSuccess(parser, userInput, labelCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, LabelCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // missing tag name prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_NAME_CS2103 + VALID_LABEL_DESC,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // missing tag"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, VALID_LABEL_DESC,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // missing label name prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_CS2103 + VALID_LABEL,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // missing label"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_CS2103,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_NAME_CS2103 + VALID_LABEL, expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void parse_invalidTagInput_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // wrong tag format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, INVALID_TAG_DESC + VALID_LABEL_DESC,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": "                TagName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // wrong label format"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_CS2103 + INVALID_LABEL_DESC,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "li-s"
        },
        "content": "                Label.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parse_emptyArg_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String emptyArg \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseSuccess(parser, emptyArg, expectedListCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parse_nonEmptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String nonEmptyArg \u003d \"abc\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, nonEmptyArg, ListCommand.MESSAGE_INVALID_USER_INPUT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/OpenCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LABEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LABEL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2103;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2103;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class OpenCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private OpenCommandParser parser \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parse_correctFieldsPresent_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag expectedTag \u003d new TagBuilder(CS2103).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Label expectedLabel \u003d new Label(VALID_LABEL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TAG_DESC_CS2103,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                new OpenCommand(expectedTag.getTagName()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // One tag name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_CS2103,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                new OpenCommand(expectedTag.getTagName()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // multiple tag names - last tag name accepted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_CS2101 + TAG_DESC_CS2103,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                new OpenCommand(expectedTag.getTagName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // One label"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseSuccess(parser, VALID_LABEL_DESC, new OpenCommand(expectedLabel));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // More than 1 label - last label accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseSuccess(parser, VALID_LABEL_DESC + \"2\" + VALID_LABEL_DESC,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                new OpenCommand(expectedLabel));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parse_bothFieldMissing_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // missing all prefix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_NAME_CS2103, expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parse_bothFieldPresent_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Having both prefixes is not allowed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseFailure(parser, INVALID_TAG_DESC + VALID_LABEL_DESC, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TAG_DESC_CS2101,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 73,
      "li-s": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String INVALID_FILE_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static final String INVALID_FILE_ADDRESS \u003d \"dsf/asdf??\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String INVALID_LABEL_1 \u003d \"L@bel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String INVALID_LABEL_2 \u003d \"L8bel!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String VALID_TAG_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String VALID_FILE_ADDRESS \u003d \"c:\\\\a\\\\b\\\\rachel.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String VALID_LABEL_1 \u003d \"label\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String VALID_LABEL_2 \u003d \"label\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(INDEX_FIRST_TAG, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(INDEX_FIRST_TAG, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTagName((String) null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTagName(INVALID_FILE_NAME));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagName expectedName \u003d new TagName(VALID_TAG_NAME);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseTagName(VALID_TAG_NAME));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_TAG_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagName expectedName \u003d new TagName(VALID_TAG_NAME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseTagName(nameWithWhitespace));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFileAddress((String) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFileAddress(INVALID_FILE_ADDRESS));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        FileAddress expectedFileAddress \u003d new FileAddress(VALID_FILE_ADDRESS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedFileAddress, ParserUtil.parseFileAddress(VALID_FILE_ADDRESS));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_FILE_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        FileAddress expectedFileAddress \u003d new FileAddress(VALID_FILE_ADDRESS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedFileAddress, ParserUtil.parseFileAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void parseLabel_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLabel(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void parseLabel_invalidValue_throwParserException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseLabel(INVALID_LABEL_1));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void parseLabel_validValueWithoutWhitespace_returnLabel() throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Label expectedLabel \u003d new Label(VALID_LABEL_1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedLabel, ParserUtil.parseLabel(VALID_LABEL_1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void parseLabel_validValueWithWhitespace_returnTrimmedLabel() throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String labelWithWhitespace \u003d WHITESPACE + VALID_LABEL_1 + WHITESPACE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Label expectedLabel \u003d new Label(VALID_LABEL_1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedLabel, ParserUtil.parseLabel(labelWithWhitespace));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void parseLabels_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLabels(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void parseLabels_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseLabels(Collections.singletonList(INVALID_LABEL_1)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                ParserUtil.parseLabels(Arrays.asList(INVALID_LABEL_1, INVALID_LABEL_2)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseLabels(Arrays.asList(VALID_LABEL_1, INVALID_LABEL_1)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void parseLabels_validValue_returnSetLabels() throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Label expectedLabel1 \u003d new Label(VALID_LABEL_1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Label expectedLabel2 \u003d new Label(VALID_LABEL_2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(new HashSet\u003cLabel\u003e(Arrays.asList(expectedLabel1, expectedLabel2)),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                ParserUtil.parseLabels(Arrays.asList(VALID_LABEL_1, VALID_LABEL_2)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 1,
      "HynRidge": 52,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RedoCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class RedoCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static RedoCommandParser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static void prepareParser() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        parser \u003d new RedoCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parse_invalidInput_throwCommandException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String invalidInput \u003d \"abc\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String invalidInput2 \u003d \"123\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseFailure(parser, invalidInput, RedoCommandParser.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseFailure(parser, invalidInput2, RedoCommandParser.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parse_validInput_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String validInput \u003d \"\"; // Empty parameter"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String validInput2 \u003d \"   \"; // White spaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String validInput3 \u003d \"\\t\"; // Tab"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String validInput4 \u003d \"\\n\"; // Newline"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        RedoCommand expectedCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseSuccess(parser, validInput, expectedCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseSuccess(parser, validInput2, expectedCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseSuccess(parser, validInput3, expectedCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseSuccess(parser, validInput4, expectedCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RetagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OLD_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OLD_TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2103;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.RetagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class RetagCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private RetagCommandParser parser \u003d new RetagCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName oldTagName \u003d new TagName(VALID_TAG_NAME_CS2101);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName newTagName \u003d new TagName(VALID_TAG_NAME_CS2103);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String userInput \u003d OLD_TAG_DESC_CS2101 + TAG_DESC_CS2103;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        RetagCommand retagCommand \u003d new RetagCommand(oldTagName, newTagName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseSuccess(parser, userInput, retagCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RetagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // missing old tag name prefix"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_NAME_CS2101 + TAG_DESC_CS2103,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // missing new tag name prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, OLD_TAG_DESC_CS2101 + VALID_TAG_NAME_CS2103,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_NAME_CS2103 + VALID_TAG_NAME_CS2103, expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void parse_invalidTagInput_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RetagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // wrong old tag format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, INVALID_OLD_TAG_DESC + TAG_DESC_CS2103,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "                TagName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // wrong new tag format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_NAME_CS2101 + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ShowCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2103;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagNameEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ShowCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private ShowCommandParser parser \u003d new ShowCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // No prefix"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, \"noprefix\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parse_validArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ShowCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "                new ShowCommand(new TagNameEqualsKeywordPredicate(new TagName(VALID_TAG_NAME_CS2103)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_CS2103, expectedFindCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 4,
      "Anthony6401": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FILE_ADDRESS_DESC_CS2101;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FILE_ADDRESS_DESC_CS2103;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FILE_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_ADDRESS_CS2103;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LABEL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2103;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.testutil.TypicalTags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TagCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private TagCommandParser parser \u003d new TagCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parse_allFieldsPresent_success() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String commandString \u003d FILE_ADDRESS_DESC_CS2101 + TAG_DESC_CS2101 + VALID_LABEL_DESC;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag toTag \u003d TypicalTags.CS2101;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagCommand expectedTagCommand \u003d new TagCommand(toTag);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseSuccess(new TagCommandParser(), commandString, expectedTagCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // missing tag name prefix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_NAME_CS2103 + FILE_ADDRESS_DESC_CS2103,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // missing file address prefix"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_CS2103 + VALID_FILE_ADDRESS_CS2103,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_NAME_CS2103 + VALID_FILE_ADDRESS_CS2103,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, INVALID_TAG_DESC + FILE_ADDRESS_DESC_CS2103,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "                TagName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // invalid fileaddress"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_CS2103 + INVALID_FILE_ADDRESS_DESC,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "                FileAddress.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, INVALID_TAG_DESC + INVALID_FILE_ADDRESS_DESC,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                TagName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TAG_DESC_CS2103"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "                + FILE_ADDRESS_DESC_CS2103,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 17,
      "li-s": 15,
      "HynRidge": 7,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UndoCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class UndoCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static UndoCommandParser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static void prepareParser() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        parser \u003d new UndoCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parse_invalidInput_throwCommandException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String invalidInput \u003d \"abc\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String invalidInput2 \u003d \"123\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseFailure(parser, invalidInput, UndoCommandParser.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseFailure(parser, invalidInput2, UndoCommandParser.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parse_validInput_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String validInput \u003d \"\"; // Empty parameter"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String validInput2 \u003d \"   \"; // White spaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String validInput3 \u003d \"\\t\"; // Tab"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String validInput4 \u003d \"\\n\"; // Newline"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        UndoCommand expectedCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseSuccess(parser, validInput, expectedCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseSuccess(parser, validInput2, expectedCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseSuccess(parser, validInput3, expectedCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseSuccess(parser, validInput4, expectedCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UnlabelCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LABEL_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LABEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LABEL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2103;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.commands.UnlabelCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class UnlabelCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private UnlabelCommandParser parser \u003d new UnlabelCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName tagName \u003d new TagName(VALID_TAG_NAME_CS2103);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Label label \u003d new Label(VALID_LABEL);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Set\u003cLabel\u003e labels \u003d Set.of(label);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInput \u003d TAG_DESC_CS2103 + VALID_LABEL_DESC;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        UnlabelCommand unlabelCommand \u003d new UnlabelCommand(tagName, labels);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseSuccess(parser, userInput, unlabelCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnlabelCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // missing tag name prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_NAME_CS2103 + VALID_LABEL_DESC, expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // missing tag"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, VALID_LABEL_DESC, expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // missing label name prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_CS2103 + VALID_LABEL, expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // missing label"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_CS2103, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // has preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_NAME_CS2103 + VALID_LABEL, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parse_invalidTagInput_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // wrong tag format"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, INVALID_TAG_DESC + VALID_LABEL_DESC,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                TagName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // wrong label format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_CS2103 + INVALID_LABEL_DESC,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                Label.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UntagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2103;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.UntagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": " * outside of the UntagCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": " * same path through the UntagCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class UntagCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private UntagCommandParser parser \u003d new UntagCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void parse_validArgs_returnsUntagCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName validTagName \u003d new TagName(VALID_TAG_NAME_CS2103);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_CS2103, new UntagCommand(validTagName));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UntagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // missing tag name prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_NAME_CS2103,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UntagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 24,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2103;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.explorer.FileList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getTagList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void resetData_withDuplicateTags_throwsDuplicateTagException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag editedCS2103 \u003d new TagBuilder(CS2103).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        List\u003cTag\u003e newPersons \u003d Arrays.asList(CS2103, editedCS2103);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(DuplicateTagException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hasTag_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasTag(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hasTag_tagNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(addressBook.hasTag(CS2103));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hasTag_tagInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        addressBook.addTag(CS2103);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(addressBook.hasTag(CS2103));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hasTag_tagWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        addressBook.addTag(CS2103);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag editedCS2103 \u003d new TagBuilder(CS2103).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(addressBook.hasTag(editedCS2103));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_tagInAddressBook_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        AddressBook dummyAddressBook \u003d addressBook;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        dummyAddressBook.addTag(CS2103);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        dummyAddressBook.setTag(CS2103, CS2101);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Tag expectedTag \u003d new TagBuilder(CS2101).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(dummyAddressBook.hasTag(expectedTag));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        AddressBook dummyAddressBook \u003d addressBook;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        dummyAddressBook.addTag(CS2103);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e dummyAddressBook.setTag(CS2103, null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void removeTag_tagInAddressBook_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        AddressBook dummyAddressBook \u003d addressBook;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        dummyAddressBook.addTag(CS2103);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        dummyAddressBook.removeTag(CS2103);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Tag expectedTag \u003d new TagBuilder(CS2101).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(dummyAddressBook.hasTag(expectedTag));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void removeTag_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        AddressBook dummyAddressBook \u003d addressBook;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e dummyAddressBook.removeTag(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void getTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getTagList().remove(0));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hashcode_equals_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        AddressBook newAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(addressBook.hashCode() \u003d\u003d addressBook.hashCode());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //different object --\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(addressBook.hashCode() \u003d\u003d newAddressBook.hashCode());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        AddressBookStub(Collection\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            this.tags.setAll(tags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        public FileList getFileList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        public ObservableList\u003cFile\u003e getObservableFileList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 9,
      "HynRidge": 58,
      "Ma-Yueran": 8,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TAGS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2103;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.testutil.TypicalTags.MYFILE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4, \"Dark Theme\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4, \"Dark Theme\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hasTag_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTag(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hasTag_tagNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(modelManager.hasTag(CS2103));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hasTag_tagInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        modelManager.addTag(CS2103);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(modelManager.hasTag(CS2103));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void getFilteredTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTagList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_tagInAddressBook_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        modelManager.addTag(CS2103);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        modelManager.setTag(CS2103, CS2101);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(modelManager.hasTag(CS2101));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "li-s"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withTag(CS2103).withTag(MYFILE).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String[] keywords \u003d CS2103.getTagName().tagName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        modelManager.updateFilteredTagList(new TagNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        modelManager.updateFilteredTagList(PREDICATE_SHOW_ALL_TAGS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 2,
      "Anthony6401": 5,
      "HynRidge": 22,
      "Ma-Yueran": 2,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UserPrefs firstUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagName notUserPrefs \u003d new TagName(\"CS2103\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UserPrefs secondUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //same object -\u003e return true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstUserPrefs.equals(firstUserPrefs));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //different object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstUserPrefs.equals(notUserPrefs));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //same class -\u003e retursn true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstUserPrefs.equals(secondUserPrefs));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hashcodeCheck_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UserPrefs newUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(userPrefs.hashCode() \u003d\u003d userPrefs.hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //different instances -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(userPrefs.hashCode() \u003d\u003d newUserPrefs.hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 30,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2103;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Adapted from AddressBook Level 4."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * {@see https://github.com/se-edu/addressbook-level4/blob/master/src/test/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * java/seedu/address/model/VersionedAddressBookTest.java}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCS2101 \u003d new AddressBookBuilder().withTag(CS2101).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCS2103 \u003d new AddressBookBuilder().withTag(CS2103).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d SampleDataUtil.getSampleAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook, addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithCS2101, addressBookWithCS2103),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                addressBookWithCS2103,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook, addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook, addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook, addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook, addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook, addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook, addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook, addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook, addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                addressBookWithCS2101,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Collections.singletonList(addressBookWithCS2103));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook, addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Arrays.asList(addressBookWithCS2101, addressBookWithCS2103));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook, addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook, addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithCS2101),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                addressBookWithCS2103,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook, addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                addressBookWithCS2101,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Collections.singletonList(addressBookWithCS2103));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                emptyAddressBook, addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                prepareAddressBookList(addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithCS2103);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                addressBookWithCS2101, addressBookWithCS2103);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 301,
      "Anthony6401": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/explorer/CurrentPathTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.model.explorer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class CurrentPathTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructor_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CurrentPath(null, null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/model/label/LabelTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.label;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "class LabelTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Label(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void constructor_invalidLabel_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Label(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void isValidLabel() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Label.isValidLabel(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(Label.isValidLabel(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(Label.isValidLabel(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(Label.isValidLabel(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(Label.isValidLabel(\"CS2103T*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(Label.isValidLabel(\"CS2103T Software Engineering\")); // long labels"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(Label.isValidLabel(\"cs\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(Label.isValidLabel(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(Label.isValidLabel(\"cs2103T\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(Label.isValidLabel(\"CS\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String labelName \u003d \"CS2013T\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Label firstLabel \u003d new Label(labelName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Label secondLabel \u003d new Label(\"CS2101\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //same objects -\u003e returns True"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstLabel.equals(firstLabel));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //same values -\u003e return true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Label newLabelcopy \u003d new Label(labelName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstLabel.equals(newLabelcopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //different types -\u003e return false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstLabel.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //different object -\u003e return false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Label newLabel \u003d new Label(\"CS2103T\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstLabel.equals(newLabel));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //null -\u003e return false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstLabel.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //different values -\u003e return false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstLabel.equals(secondLabel));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setLabel_labelInTag_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String validLabel \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String anotherValidLabel \u003d \"CS2101\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Label label \u003d new Label(validLabel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        label.setLabel(anotherValidLabel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Label expectedLabel \u003d new Label(anotherValidLabel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(expectedLabel.equals(label));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FileAddress(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String invalidAddress \u003d \"::\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new FileAddress(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void isValidFileAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileAddress.isValidFileAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(FileAddress.isValidFileAddress(\"*\")); // forbidden symbol"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(FileAddress.isValidFileAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(FileAddress.isValidFileAddress(\"d:\\\\a\\\\b\\\\abc.txt\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(FileAddress.isValidFileAddress(\"d:\\\\haha\\\\..\")); // appending .."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(FileAddress.isValidFileAddress(\"d:\\\\haha\\\\.\")); // appending ."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(FileAddress.isValidFileAddress(\"z:\\\\a\\\\b\\\\abc.txt\")); // z drive"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(FileAddress.isValidFileAddress(\"d\")); // one character"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(FileAddress.isValidFileAddress(\"d:/ab/abc.txt\")); // backward slash"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(FileAddress.isValidFileAddress(\"/usr/abc.txt\")); // linux"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(FileAddress.isValidFileAddress(\"./\")); // root"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(FileAddress.isValidFileAddress(\".\\\\\")); // root"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(FileAddress.isValidFileAddress("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \"a:\\\\b\\\\c\\\\d\\\\e\\\\f\\\\g.exe\")); // long address"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 10,
      "HynRidge": 9,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/FileAddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class FileAddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void constructor_validSpecialCharacter_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        char[] validChars \u003d new char[]{\u0027(\u0027, \u0027)\u0027, \u0027!\u0027, \u0027@\u0027, \u0027#\u0027, \u0027$\u0027, \u0027%\u0027, \u0027^\u0027, \u0027\u0026\u0027, \u0027;\u0027, \u0027\\\u0027\u0027, \u0027\u003d\u0027, \u0027+\u0027,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            \u0027-\u0027, \u0027_\u0027, \u0027,\u0027, \u0027.\u0027, \u0027`\u0027, \u0027~\u0027, \u0027[\u0027, \u0027]\u0027, \u0027{\u0027, \u0027}\u0027};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String basePathWindows \u003d \"C:\\\\User\\\\\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String basePathLinux \u003d \"/usr/\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Exhaustively check for all possible valid path"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        for (char c : validChars) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            new FileAddress(basePathWindows + c);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            new FileAddress(basePathLinux + c);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void constructor_invalidSpecialCharacter_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        char [] invalidChars \u003d new char[]{\u0027:\u0027, \u0027*\u0027, \u0027\"\u0027, \u0027\u003c\u0027, \u0027\u003e\u0027, \u0027|\u0027, \u0027?\u0027};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String basePathWindows \u003d \"C:\\\\User\\\\\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String basePathLinux \u003d \"/usr/\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Exhaustively check for all possible invalid path"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        for (char c : invalidChars) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertThrows(IllegalArgumentException.class, () -\u003e new FileAddress(basePathWindows + c));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertThrows(IllegalArgumentException.class, () -\u003e new FileAddress(basePathLinux + c));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String validFileAddress \u003d \"C:\\\\d\\\\Univ files\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        FileAddress firstFileAddress \u003d new FileAddress(validFileAddress);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        FileAddress secondFileAddress \u003d new FileAddress(\"C:\\\\Videos\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstFileAddress.equals(firstFileAddress));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        FileAddress newFileAddress \u003d new FileAddress(validFileAddress);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstFileAddress.equals(newFileAddress));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //different type -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstFileAddress.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstFileAddress.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //different values -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstFileAddress.equals(secondFileAddress));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 36,
      "HynRidge": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagLabelEqualsKeywordPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class TagLabelEqualsKeywordPredicateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Label firstPredicateLabel \u003d new Label(\"first\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Label secondPredicateLabel \u003d new Label(\"second\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagLabelEqualsKeywordPredicate firstPredicate \u003d new TagLabelEqualsKeywordPredicate("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                firstPredicateLabel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagLabelEqualsKeywordPredicate secondPredicate \u003d new TagLabelEqualsKeywordPredicate("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                secondPredicateLabel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagLabelEqualsKeywordPredicate firstPredicateCopy \u003d new TagLabelEqualsKeywordPredicate("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                firstPredicateLabel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // different label -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void test_labelEqualsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagLabelEqualsKeywordPredicate predicate \u003d new TagLabelEqualsKeywordPredicate("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                new Label(\"first\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(predicate.test(new TagBuilder().withLabels(\"first\").build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void test_tagLabelDoesNotEqualsKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagLabelEqualsKeywordPredicate predicate \u003d new TagLabelEqualsKeywordPredicate("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                new Label(\"first\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(predicate.test(new TagBuilder().withLabels(\"second\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagNameContainsCharPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "class TagNameContainsCharPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate firstPredicate \u003d new TagNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate secondPredicate \u003d new TagNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate firstPredicateCopy \u003d new TagNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void test_tagNameContainsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //Words contain same character whole character Keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsCharPredicate firstPredicate \u003d new TagNameContainsCharPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                Arrays.asList(\"test\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.test(new TagBuilder().withTagName(\"test\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //Keyword contains less character"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.test(new TagBuilder().withTagName(\"test2\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //Words start with different prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.test(new TagBuilder().withTagName(\"abctest123\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //Words end with different suffix"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.test(new TagBuilder().withTagName(\"test123Hello\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //Words contain keyword in the middle"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.test(new TagBuilder().withTagName(\"HellotestWorld\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void test_labelContainsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //Words contain same character whole character Keyword"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsCharPredicate firstPredicate \u003d new TagNameContainsCharPredicate("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                Arrays.asList(\"test\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsCharPredicate multiPredicate \u003d new TagNameContainsCharPredicate(Arrays.asList(\"hello\", \"CS2103\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \"CS2101\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.test(new TagBuilder().withLabels(\"hello\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //Keyword contains less character"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.test(new TagBuilder().withLabels(\"hello2\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //Words start with different prefix"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.test(new TagBuilder().withLabels(\"abchello123\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //Words end with different suffix"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.test(new TagBuilder().withLabels(\"hello123World\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //Words contain keyword in the middle"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.test(new TagBuilder().withLabels(\"GoodhelloWorld\").build()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //Tag contains multiple label"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(multiPredicate.test(new TagBuilder().withLabels(\"hello\", \"CS2103\", \"CS2101\").build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //Tag contains multiple label, each label is longer"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(multiPredicate.test(new TagBuilder().withLabels(\"hello123\", \"CS2103T\", \"CS2101s\").build()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void test_keywordMissing_returnsFalse() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsCharPredicate firstPredicate \u003d new TagNameContainsCharPredicate("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "li-s"
        },
        "content": "                Arrays.asList(\"arr\", \"4567\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "li-s"
        },
        "content": "        //Words contain one character longer than keyword"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(firstPredicate.test(new TagBuilder().withTagName(\"ar\").build()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        //Different Keyword"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstPredicate.test(new TagBuilder().withTagName(\"1234\").build()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 4,
      "HynRidge": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagNameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate firstPredicate \u003d new TagNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate secondPredicate \u003d new TagNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate firstPredicateCopy \u003d new TagNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // different tag -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate predicate \u003d new TagNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(predicate.test(new TagBuilder().withTagName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        predicate \u003d new TagNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(predicate.test(new TagBuilder().withTagName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        predicate \u003d new TagNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(predicate.test(new TagBuilder().withTagName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        predicate \u003d new TagNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(predicate.test(new TagBuilder().withTagName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void test_tagNameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate predicate \u003d new TagNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(predicate.test(new TagBuilder().withTagName(\"Alice\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        predicate \u003d new TagNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(predicate.test(new TagBuilder().withTagName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // Keywords match phone and address, but does not match name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        predicate \u003d new TagNameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(predicate.test(new TagBuilder().withTagName(\"Alice\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                .withFileAddress(\"c:\\\\a\\\\b\\\\alice.txt\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 1,
      "HynRidge": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagNameEqualsKeywordPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class TagNameEqualsKeywordPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName firstPredicateTagName \u003d new TagName(\"first\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName secondPredicateTagName \u003d new TagName(\"second\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate firstPredicate \u003d new TagNameEqualsKeywordPredicate("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                firstPredicateTagName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate secondPredicate \u003d new TagNameEqualsKeywordPredicate("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                secondPredicateTagName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate firstPredicateCopy \u003d new TagNameEqualsKeywordPredicate("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                firstPredicateTagName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // different tag -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void test_nameEqualsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate predicate \u003d new TagNameEqualsKeywordPredicate("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                new TagName(\"first\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(predicate.test(new TagBuilder().withTagName(\"first\").build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void test_tagNameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate predicate \u003d new TagNameEqualsKeywordPredicate("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                new TagName(\"first\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(predicate.test(new TagBuilder().withTagName(\"second\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 1,
      "Anthony6401": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class TagNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TagName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TagName(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TagName.isValidTagName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(TagName.isValidTagName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(TagName.isValidTagName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(TagName.isValidTagName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(TagName.isValidTagName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(TagName.isValidTagName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(TagName.isValidTagName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(TagName.isValidTagName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(TagName.isValidTagName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(TagName.isValidTagName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 1,
      "HynRidge": 14,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/UniqueTagListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_ADDRESS_CS2103;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2103;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class UniqueTagListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final UniqueTagList uniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void contains_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void contains_tagNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(uniqueTagList.contains(CS2103));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void contains_tagInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(uniqueTagList.contains(CS2103));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void contains_tagWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag editedCS2103 \u003d new TagBuilder(CS2103).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(uniqueTagList.contains(editedCS2103));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void add_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void add_duplicateTag_throwsDuplicateTagException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(DuplicateTagException.class, () -\u003e uniqueTagList.add(CS2103));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_nullTargetTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.setTag(null, CS2103));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_nullEditedTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.setTag(CS2103, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_targetTagNotInList_throwsTagNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(TagNotFoundException.class, () -\u003e uniqueTagList.setTag(CS2103, CS2103));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_editedTagIsSameTag_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.setTag(CS2103, CS2103);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        expectedUniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedUniqueTagList, uniqueTagList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_editedTagHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag editedCS2103 \u003d new TagBuilder(CS2103).withFileAddress(VALID_FILE_ADDRESS_CS2103).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.setTag(CS2103, editedCS2103);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        expectedUniqueTagList.add(editedCS2103);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedUniqueTagList, uniqueTagList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_editedTagHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "li-s"
        },
        "content": "        uniqueTagList.setTag(CS2103, CS2101);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "li-s"
        },
        "content": "        expectedUniqueTagList.add(CS2101);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedUniqueTagList, uniqueTagList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_editedTagHasNonUniqueIdentity_throwsDuplicateTagException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "li-s"
        },
        "content": "        uniqueTagList.add(CS2101);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertThrows(DuplicateTagException.class, () -\u003e uniqueTagList.setTag(CS2103, CS2101));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void remove_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void remove_tagDoesNotExist_throwsTagNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(TagNotFoundException.class, () -\u003e uniqueTagList.remove(CS2103));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void remove_existingTag_removesTag() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.remove(CS2103);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedUniqueTagList, uniqueTagList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_nullUniqueTagList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.setTags((UniqueTagList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_uniqueTagList_replacesOwnListWithProvidedUniqueTagList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "li-s"
        },
        "content": "        expectedUniqueTagList.add(CS2101);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        uniqueTagList.setTags(expectedUniqueTagList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedUniqueTagList, uniqueTagList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTags_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.setTags((List\u003cTag\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTags_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "li-s"
        },
        "content": "        List\u003cTag\u003e tagList \u003d Collections.singletonList(CS2101);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        uniqueTagList.setTags(tagList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "li-s"
        },
        "content": "        expectedUniqueTagList.add(CS2101);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedUniqueTagList, uniqueTagList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTags_listWithDuplicateTags_throwsDuplicateTagException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        List\u003cTag\u003e listWithDuplicateTags \u003d Arrays.asList(CS2103, CS2103);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(DuplicateTagException.class, () -\u003e uniqueTagList.setTags(listWithDuplicateTags));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            -\u003e uniqueTagList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void iterator_tagInObservableList_success() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Tag tag \u003d new TagBuilder().withTagName(\"CS2103T\").build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        uniqueTagList.add(tag);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        expectedUniqueTagList.add(tag);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(uniqueTagList.iterator().equals(expectedUniqueTagList.iterator()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 10,
      "Anthony6401": 26,
      "HynRidge": 57,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedLabelTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class JsonAdaptedLabelTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String VALID_LABEL \u003d \"project\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String INVALID_LABEL \u003d \"#project\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void toModelType_invalidLabel_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        JsonAdaptedLabel label \u003d new JsonAdaptedLabel(INVALID_LABEL);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedMessage \u003d Label.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, label::toModelType);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void toModelType_validLabel_returnsLabel() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Label myFileLabel \u003d new Label(VALID_LABEL);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        JsonAdaptedLabel label \u003d new JsonAdaptedLabel(myFileLabel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertEquals(myFileLabel, label.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.storage.JsonAdaptedTag.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.testutil.TypicalTags.MYFILE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class JsonAdaptedTagTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String INVALID_FILE_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String INVALID_LABEL \u003d \"#project\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static final String VALID_TAG_NAME \u003d MYFILE.getTagName().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static final String VALID_FILE_ADDRESS \u003d MYFILE.getFileAddress().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final Set\u003cJsonAdaptedLabel\u003e VALID_LABELS \u003d MYFILE.getLabels().stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            .map(JsonAdaptedLabel::new)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_validTagDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        JsonAdaptedTag tag \u003d new JsonAdaptedTag(MYFILE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertEquals(MYFILE, tag.toModelType());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        JsonAdaptedTag tag \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                new JsonAdaptedTag(INVALID_NAME, VALID_FILE_ADDRESS, VALID_LABELS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String expectedMessage \u003d TagName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, tag::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        JsonAdaptedTag tag \u003d new JsonAdaptedTag(null, VALID_FILE_ADDRESS, VALID_LABELS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TagName.class.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, tag::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        JsonAdaptedTag tag \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                new JsonAdaptedTag(VALID_TAG_NAME, INVALID_FILE_ADDRESS, VALID_LABELS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String expectedMessage \u003d FileAddress.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, tag::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        JsonAdaptedTag tag \u003d new JsonAdaptedTag(VALID_TAG_NAME, null, VALID_LABELS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, FileAddress.class.getSimpleName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, tag::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Set\u003cJsonAdaptedLabel\u003e invalidLabels \u003d new HashSet\u003c\u003e(VALID_LABELS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        invalidLabels.add(new JsonAdaptedLabel(INVALID_LABEL));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        JsonAdaptedTag tag \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                new JsonAdaptedTag(VALID_TAG_NAME, VALID_FILE_ADDRESS, invalidLabels);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(IllegalValueException.class, tag::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 3,
      "Anthony6401": 30,
      "HynRidge": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2103;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.testutil.TypicalTags.MYFILE6;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.testutil.TypicalTags.MYFILE7;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void readAddressBook_invalidTagAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void readAddressBook_invalidAndValidTagAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": "        original.addTag(MYFILE6);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        original.removeTag(CS2103);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "li-s"
        },
        "content": "        original.addTag(MYFILE7);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 4,
      "Anthony6401": 2,
      "HynRidge": 3,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TypicalTags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final Path TYPICAL_TAGS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final Path INVALID_TAG_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final Path DUPLICATE_TAG_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_typicalTagsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TAGS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalTags.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TAG_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_duplicateTags_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TAG_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_TAG,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 12,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String USER_DIRECTORY_PATH \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void readUserPrefs_invalidSavedFilePath_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"InvalidSavedFilePathUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100, \"Dark Theme\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        userPrefs.setSavedFilePathValue(System.getProperty(\"user.dir\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    .saveUserPrefs(userPrefs, USER_DIRECTORY_PATH);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2, \"Galaxy Theme\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original, USER_DIRECTORY_PATH);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5, \"Dark Theme\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original, USER_DIRECTORY_PATH);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 12,
      "Ma-Yueran": 3,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userDirectoryPath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6, \"DarkTheme\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        storageManager.saveUserPrefs(original, userDirectoryPath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 2,
      "HynRidge": 1,
      "Ma-Yueran": 1,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withTag(TAG_NAME).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Adds a new {@code Tag} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public AddressBookBuilder withTag(Tag tag) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        addressBook.addTag(tag);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 1,
      "HynRidge": 4,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TagBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * A utility class to help with building Tag objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String DEFAULT_TAG_NAME \u003d \"testTag\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String DEFAULT_FILE_ADDRESS \u003d \"./src/test/java/seedu/address/testutil/testFile.bat\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String DEFAULT_LABEL \u003d \"testLabel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private TagName tagName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private FileAddress fileAddress;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private Set\u003cLabel\u003e labels;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Creates a {@code TagBuilder} with the default details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.tagName \u003d new TagName(DEFAULT_TAG_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.fileAddress \u003d new FileAddress(DEFAULT_FILE_ADDRESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Set\u003cLabel\u003e labels \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        labels.add(new Label(DEFAULT_LABEL));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.labels \u003d labels;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Initializes the TagBuilder with the data of {@code tagToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagBuilder(Tag tagToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tagName \u003d tagToCopy.getTagName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        fileAddress \u003d tagToCopy.getFileAddress();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        labels \u003d tagToCopy.getLabels();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Sets the {@code TagName} of the {@code Tag} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagBuilder withTagName(String tagName) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.tagName \u003d new TagName(tagName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Sets the {@code FileAddress} of the {@code Tag} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagBuilder withFileAddress(String fileAddress) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.fileAddress \u003d new FileAddress(fileAddress);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Parses the {@code labels} into a {@code Set\u003cLabel\u003e} and set it to the {@code Tag} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagBuilder withLabels(String ... labels) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.labels \u003d SampleDataUtil.getLabelSet(labels);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Tag build() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return new Tag(tagName, fileAddress, labels);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 2,
      "li-s": 5,
      "Anthony6401": 2,
      "HynRidge": 35,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TagUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.label.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * A utility class for Tag."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns an add command string for adding the {@code tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static String getTagCommand(Tag tag) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return TagCommand.COMMAND_WORD + \" \" + getTagDetails(tag);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns the part of command string for the given {@code tag}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static String getTagDetails(Tag tag) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        sb.append(PREFIX_TAG_NAME + tag.getTagName().tagName + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        sb.append(PREFIX_FILE_ADDRESS + tag.getFileAddress().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "        StringBuilder labels \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        for (Label label : tag.getLabels()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "            labels.append(PREFIX_LABEL_NAME + label.getLabel() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "        sb.append(labels);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 9,
      "luo-git": 3,
      "HynRidge": 10,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTagList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTagList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static Tag getTag(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return model.getFilteredTagList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 5,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Index INDEX_FIRST_TAG \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Index INDEX_SECOND_TAG \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Index INDEX_THIRD_TAG \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTags.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_ADDRESS_CS2101;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_ADDRESS_CS2103;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NAME_CS2103;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * A utility class containing a list of {@code Tag} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TypicalTags {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    // TODO These tags could be updated with more descriptive tag names."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final Tag CS2103 \u003d new TagBuilder().withTagName(VALID_TAG_NAME_CS2103)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "            .withFileAddress(VALID_FILE_ADDRESS_CS2103)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final Tag CS2101 \u003d new TagBuilder().withTagName(VALID_TAG_NAME_CS2101)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "            .withFileAddress(VALID_FILE_ADDRESS_CS2101)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final Tag MYFILE \u003d new TagBuilder().withTagName(\"myfile\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "            .withFileAddress(\"c:\\\\a\\\\b\\\\myfile.txt\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            .withLabels(\"project\", \"myfile\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final Tag MYFILE2 \u003d new TagBuilder().withTagName(\"myfile 2\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            .withFileAddress(\"c:\\\\a\\\\b\\\\myfile2.txt\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            .withLabels(\"project\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final Tag MYFILE3 \u003d new TagBuilder().withTagName(\"myfile 3\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "            .withFileAddress(\"c:\\\\a\\\\b\\\\myfile3.txt\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final Tag MYFILE4 \u003d new TagBuilder().withTagName(\"myfile 4\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "            .withFileAddress(\"c:\\\\a\\\\b\\\\myfile4.txt\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final Tag MYFILE5 \u003d new TagBuilder().withTagName(\"myfile 5\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "            .withFileAddress(\"c:\\\\a\\\\b\\\\myfile5.txt\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final Tag MYFILE6 \u003d new TagBuilder().withTagName(\"myfile 6\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "            .withFileAddress(\"c:\\\\a\\\\b\\\\myfile6.txt\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final Tag MYFILE7 \u003d new TagBuilder().withTagName(\"myfile 7\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "            .withFileAddress(\"c:\\\\a\\\\b\\\\myfile7.txt\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private TypicalTags() {} // prevents instantiation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical tags."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "        AddressBook ab3 \u003d new AddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (Tag tag : getTypicalTags()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "            ab3.addTag(tag);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return ab3;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static List\u003cTag\u003e getTypicalTags() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103, CS2101, MYFILE, MYFILE2, MYFILE3, MYFILE4, MYFILE5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 27,
      "luo-git": 2,
      "Anthony6401": 4,
      "HynRidge": 10,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/cs2101.bat",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "title File Open Test"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "echo CS2101 file has been opened!"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "timeout 3"
      }
    ],
    "authorContributionMap": {
      "luo-git": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/cs2101.sh",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "echo CS2101 file has been opened!"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "wait 5"
      }
    ],
    "authorContributionMap": {
      "luo-git": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/cs2103.bat",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "title File Open Test"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "echo CS2103 file has been opened!"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "timeout 5"
      }
    ],
    "authorContributionMap": {
      "luo-git": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/cs2103.sh",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "echo CS2103 file has been opened!"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "wait 5"
      }
    ],
    "authorContributionMap": {
      "luo-git": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/testFile.bat",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "title File Open Test"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "echo Test file has been opened!"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "timeout 5"
      }
    ],
    "authorContributionMap": {
      "luo-git": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/testFile.sh",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "echo Test file has been opened!"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "wait 5"
      }
    ],
    "authorContributionMap": {
      "luo-git": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/theme/ThemeSetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui.theme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ThemeSetTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String LIGHT_THEME_NAME \u003d \"Light Theme\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String DARK_THEME_NAME \u003d \"Dark Theme\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String GALAXY_THEME_NAME \u003d \"Galaxy Theme\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String SKY_THEME_NAME \u003d \"Sky Theme\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String INVALID_THEME_NAME \u003d \"hahaha\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getTheme_getLightTheme_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Theme themeGet \u003d ThemeSet.getTheme(LIGHT_THEME_NAME);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertTrue(themeGet.equals(ThemeSet.LIGHT_THEME));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getTheme_getDarkTheme_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Theme themeGet \u003d ThemeSet.getTheme(DARK_THEME_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertTrue(themeGet.equals(ThemeSet.DARK_THEME));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getTheme_getGalaxyTheme_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Theme themeGet \u003d ThemeSet.getTheme(GALAXY_THEME_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertTrue(themeGet.equals(ThemeSet.GALAXY_THEME));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getTheme_getSkyTheme_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Theme themeGet \u003d ThemeSet.getTheme(SKY_THEME_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertTrue(themeGet.equals(ThemeSet.SKY_THEME));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getTheme_invalidThemeName_returnLightTheme() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Theme themeGet \u003d ThemeSet.getTheme(INVALID_THEME_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertTrue(themeGet.equals(ThemeSet.LIGHT_THEME));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/theme/ThemeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui.theme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ThemeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String VALID_THEME_NAME \u003d \"Dark Theme\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String VALID_STYLE_SHEET_PATH \u003d \"view/HelloFileDarkTheme.css\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String VALID_THEME_PREVIEW_PATH \u003d \"/images/dark_theme.png\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructor_nullThemeName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                NullPointerException.class, () -\u003e new Theme(null, VALID_STYLE_SHEET_PATH, VALID_THEME_PREVIEW_PATH));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructor_nullStyleSheetPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Theme(VALID_THEME_NAME, null, VALID_THEME_PREVIEW_PATH));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructor_nullThemePreviewPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Theme(VALID_THEME_NAME, VALID_STYLE_SHEET_PATH, null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getThemeName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String themeName \u003d \"name\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Theme theme \u003d new Theme(themeName, \"style sheet\", \"preview\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertTrue(themeName.equals(theme.getThemeName()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getStyleSheetPath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String styleSheetPath \u003d \"style sheet\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Theme theme \u003d new Theme(\"name\", styleSheetPath, \"preview\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertTrue(styleSheetPath.equals(theme.getStyleSheetPath()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getThemePreviewPath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String previewPath \u003d \"preview\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Theme theme \u003d new Theme(\"name\", \"style sheet\", previewPath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertTrue(previewPath.equals(theme.getThemePreviewPath()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Theme theme \u003d new Theme(\"name\", \"style sheet\", \"preview\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertTrue(theme.equals(new Theme(\"name\", \"style sheet\", \"preview\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertTrue(theme.equals(theme));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertFalse(theme.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertFalse(theme.equals(\"lalala\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // different theme name -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertFalse(theme.equals(new Theme(\"different\", \"style sheet\", \"preview\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // different style sheet path -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertFalse(theme.equals(new Theme(\"name\", \"different\", \"preview\")));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // different preview image path"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertFalse(theme.equals(new Theme(\"name\", \"style sheet\", \"different\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void themeToString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String themeName \u003d \"a theme\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Theme theme \u003d new Theme(themeName, \"style sheet\", \"preview\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertTrue(theme.toString().equals(themeName));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/util/UiUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.theme.Theme;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.theme.ThemeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UiUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final Theme validTheme \u003d ThemeSet.DARK_THEME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setTheme_nullRoot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e UiUtil.setTheme(null, validTheme));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 18
    }
  }
]
